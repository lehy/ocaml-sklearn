WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'dtype=np.intp', context follows
WARNING:skdoc:--------- context:
function:
    <bound method BiclusterMixin.get_indices of <sklearn.base.BiclusterMixin object at 0x7f1ea4d48e80>>
function_qualname:
    sklearn.base.BiclusterMixin.get_indices
group:
    ret
section:
    Returns
text:
    row_ind : np.array, dtype=np.intp
    Indices of rows in the dataset that belong to the bicluster.
param_name:
    row_ind
type_string:
    np.array, dtype=np.intp
enum_elts:
    ['np.array', 'dtype=np.intp']

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'estimator object, or list, tuple or set of objects', context follows
WARNING:skdoc:--------- context:
function:
    <function clone at 0x7f1ed3ebd310>
function_qualname:
    sklearn.base.clone
group:
    params
section:
    Parameters
text:
    estimator : estimator object, or list, tuple or set of objects
    The estimator or group of estimators to be cloned
param_name:
    estimator
type_string:
    estimator object, or list, tuple or set of objects

WARNING:skdoc:doc_sig: could not parse synthetic sig for defaultdict: 'def __dummy_f_doc_sig(default_factory[, ...]): pass' (def __dummy_f_doc_sig(default_factory[, ...]): pass)
WARNING:skdoc:no signature for constructor of sklearn.base.defaultdict, disabling ctor
WARNING:skdoc:doc_signature() raised an exception: list index out of range
WARNING:skdoc:no signature for defaultdict.clear (<built-in method clear of collections.defaultdict object at 0x7f1ea4db3cc0>)
WARNING:skdoc:doc_signature() raised an exception: list index out of range
WARNING:skdoc:no signature for defaultdict.copy (<built-in method copy of collections.defaultdict object at 0x7f1ea4db3cc0>)
WARNING:skdoc:doc_signature() raised an exception: list index out of range
WARNING:skdoc:no signature for defaultdict.items (<built-in method items of collections.defaultdict object at 0x7f1ea4db3cc0>)
WARNING:skdoc:doc_signature() raised an exception: list index out of range
WARNING:skdoc:no signature for defaultdict.keys (<built-in method keys of collections.defaultdict object at 0x7f1ea4db3cc0>)
WARNING:skdoc:doc_signature() raised an exception: list index out of range
WARNING:skdoc:no signature for defaultdict.values (<built-in method values of collections.defaultdict object at 0x7f1ea4db3cc0>)
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Base.Copy, sklearn.base.copy): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Base.Inspect, sklearn.base.inspect): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Base.Np, sklearn.base.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Base.Platform, sklearn.base.platform): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Base.Re, sklearn.base.re): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Base.Warnings, sklearn.base.warnings): OutsideScope
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:no type string found for 'y_min' in 'optional, default: None', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.isotonic.IsotonicRegression'>
function_qualname:
    sklearn.calibration.IsotonicRegression.IsotonicRegression
group:
    params
section:
    Parameters

WARNING:skdoc:no type string found for 'y_max' in 'optional, default: None', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.isotonic.IsotonicRegression'>
function_qualname:
    sklearn.calibration.IsotonicRegression.IsotonicRegression
group:
    params
section:
    Parameters

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'returns an instance of self', context follows
WARNING:skdoc:--------- context:
function:
    <bound method LabelBinarizer.fit of LabelBinarizer(neg_label=0, pos_label=1, sparse_output=False)>
function_qualname:
    sklearn.calibration.LabelBinarizer.fit
group:
    ret
section:
    Returns
text:
    self : returns an instance of self.
param_name:
    self
type_string:
    returns an instance of self

WARNING:skdoc:failed to parse type: 'CSR matrix  Target values', context follows
WARNING:skdoc:--------- context:
function:
    <bound method LabelBinarizer.inverse_transform of LabelBinarizer(neg_label=0, pos_label=1, sparse_output=False)>
function_qualname:
    sklearn.calibration.LabelBinarizer.inverse_transform
group:
    ret
section:
    Returns
text:
    y : numpy array or CSR matrix of shape [n_samples] Target values.
param_name:
    y
type_string:
    numpy array or CSR matrix  Target values
enum_elts:
    ['numpy array', 'CSR matrix  Target values']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'tuple of input objects', context follows
WARNING:skdoc:--------- context:
function:
    <function check_consistent_length at 0x7f1eac851a60>
function_qualname:
    sklearn.calibration.check_consistent_length
group:
    params
section:
    Parameters
text:
    *arrays : list or tuple of input objects.
    Objects that will be checked for consistent length.
param_name:
    arrays
type_string:
    list or tuple of input objects
enum_elts:
    ['list', 'tuple of input objects']

WARNING:skdoc:overriding *arrays : Enum([Arr(ArrayLike), UnknownType(tuple of input objects)]) to have type List(PyObject())
WARNING:skdoc:failed to parse type: '{all', context follows
WARNING:skdoc:--------- context:
function:
    <function check_is_fitted at 0x7f1eac85b430>
function_qualname:
    sklearn.calibration.check_is_fitted
group:
    params
section:
    Parameters
text:
    all_or_any : callable, {all, any}, default all
    Specify whether all or any of the given attributes must exist.
param_name:
    all_or_any
type_string:
    callable, {all, any}
enum_elts:
    ['callable', '{all', 'any}']

WARNING:skdoc:failed to parse type: 'any}', context follows
WARNING:skdoc:--------- context:
function:
    <function check_is_fitted at 0x7f1eac85b430>
function_qualname:
    sklearn.calibration.check_is_fitted
group:
    params
section:
    Parameters
text:
    all_or_any : callable, {all, any}, default all
    Specify whether all or any of the given attributes must exist.
param_name:
    all_or_any
type_string:
    callable, {all, any}
enum_elts:
    ['callable', '{all', 'any}']

WARNING:skdoc:failed to parse type: 'callable f(x,*args)', context follows
WARNING:skdoc:--------- context:
function:
    <function fmin_bfgs at 0x7f1eca160280>
function_qualname:
    sklearn.calibration.fmin_bfgs
group:
    params
section:
    Parameters
text:
    f : callable f(x,*args)
    Objective function to be minimized.
param_name:
    f
type_string:
    callable f(x,*args)

WARNING:skdoc:failed to parse type: 'callable f'(x,*args)', context follows
WARNING:skdoc:--------- context:
function:
    <function fmin_bfgs at 0x7f1eca160280>
function_qualname:
    sklearn.calibration.fmin_bfgs
group:
    params
section:
    Parameters
text:
    fprime : callable f'(x,*args), optional
    Gradient of f.
param_name:
    fprime
type_string:
    callable f'(x,*args)

WARNING:skdoc:failed to parse type: 'tuple', context follows
WARNING:skdoc:--------- context:
function:
    <function fmin_bfgs at 0x7f1eca160280>
function_qualname:
    sklearn.calibration.fmin_bfgs
group:
    params
section:
    Parameters
text:
    args : tuple, optional
    Extra arguments passed to f and fprime.
param_name:
    args
type_string:
    tuple

WARNING:skdoc:failed to parse type: 'lists', context follows
WARNING:skdoc:--------- context:
function:
    <function indexable at 0x7f1eac851e50>
function_qualname:
    sklearn.calibration.indexable
group:
    params
section:
    Parameters
text:
    *iterables : lists, dataframes, arrays, sparse matrices
    List of objects to ensure sliceability.
param_name:
    iterables
type_string:
    lists, dataframes, arrays, sparse matrices
enum_elts:
    ['lists', 'dataframes', 'arrays', 'sparse matrices']

WARNING:skdoc:failed to parse type: 'dataframes', context follows
WARNING:skdoc:--------- context:
function:
    <function indexable at 0x7f1eac851e50>
function_qualname:
    sklearn.calibration.indexable
group:
    params
section:
    Parameters
text:
    *iterables : lists, dataframes, arrays, sparse matrices
    List of objects to ensure sliceability.
param_name:
    iterables
type_string:
    lists, dataframes, arrays, sparse matrices
enum_elts:
    ['lists', 'dataframes', 'arrays', 'sparse matrices']

WARNING:skdoc:overriding *iterables : Enum([SparsePyList(), ArrPyList(), PyObject()]) to have type List(PyObject())
WARNING:skdoc:doc_sig: could not parse synthetic sig for log: 'def __dummy_f_doc_sig(x, [base=math.e]): pass' (def __dummy_f_doc_sig(x, [base=math.e]): pass)
WARNING:skdoc:no signature for log (<built-in function log>)
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Calibration.Np, sklearn.calibration.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Calibration.Warnings, sklearn.calibration.warnings): OutsideScope
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'object with the joblib.Memory interface', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.cluster._agglomerative.AgglomerativeClustering'>
function_qualname:
    sklearn.cluster.AgglomerativeClustering.AgglomerativeClustering
group:
    params
section:
    Parameters
text:
    memory : str or object with the joblib.Memory interface, default=None
    Used to cache the output of the computation of the tree.
    By default, no caching is done. If a string is given, it is the
    path to the caching directory.
param_name:
    memory
type_string:
    str or object with the joblib.Memory interface
enum_elts:
    ['str', 'object with the joblib.Memory interface']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: '_CFNode', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.cluster._birch.Birch'>
section:
    Attributes
text:
    root_ : _CFNode
    Root of the CFTree.
param_name:
    root_
type_string:
    _CFNode

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.cluster.FeatureAgglomeration.pooling_func, arg 1 != self: (a, axis=None, dtype=None, out=None, keepdims=<no value>)
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'always precompute distances', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.cluster._kmeans.KMeans'>
function_qualname:
    sklearn.cluster.KMeans.KMeans
group:
    params
section:
    Parameters
text:
    True : always precompute distances.
param_name:
    True
type_string:
    always precompute distances

WARNING:skdoc:failed to parse type: 'never precompute distances', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.cluster._kmeans.KMeans'>
function_qualname:
    sklearn.cluster.KMeans.KMeans
group:
    params
section:
    Parameters
text:
    False : never precompute distances.
param_name:
    False
type_string:
    never precompute distances

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'Labels of each point', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.cluster._mean_shift.MeanShift'>
section:
    Attributes
text:
    labels_ :
    Labels of each point.
param_name:
    labels_
type_string:
    Labels of each point

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'between 0 and 1', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.cluster._optics.OPTICS'>
function_qualname:
    sklearn.cluster.OPTICS.OPTICS
group:
    params
section:
    Parameters
text:
    xi : float, between 0 and 1, optional (default=0.05)
    Determines the minimum steepness on the reachability plot that
    constitutes a cluster boundary. For example, an upwards point in the
    reachability plot is defined by the ratio from one point to its
    successor being at most 1-xi.
    Used only when ``cluster_method='xi'``.
param_name:
    xi
type_string:
    float, between 0 and 1
enum_elts:
    ['float', 'between 0 and 1']

WARNING:skdoc:failed to parse type: 'fitting on sparse input will override the setting of', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.cluster._optics.OPTICS'>
function_qualname:
    sklearn.cluster.OPTICS.OPTICS
group:
    params
section:
    Parameters
text:
    Note: fitting on sparse input will override the setting of
    this parameter, using brute force.
param_name:
    Note
type_string:
    fitting on sparse input will override the setting of

WARNING:skdoc:failed to parse type: 'instance of OPTICS', context follows
WARNING:skdoc:--------- context:
function:
    <bound method OPTICS.fit of OPTICS(algorithm='auto', cluster_method='xi', eps=None, leaf_size=30,
           max_eps=inf, metric='minkowski', metric_params=None,
           min_cluster_size=None, min_samples=5, n_jobs=None, p=2,
           predecessor_correction=True, xi=0.05)>
function_qualname:
    sklearn.cluster.OPTICS.fit
group:
    ret
section:
    Returns
text:
    self : instance of OPTICS
    The instance.
param_name:
    self
type_string:
    instance of OPTICS

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: '{None', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.cluster._spectral.SpectralClustering'>
function_qualname:
    sklearn.cluster.SpectralClustering.SpectralClustering
group:
    params
section:
    Parameters
text:
    eigen_solver : {None, 'arpack', 'lobpcg', or 'amg'}
    The eigenvalue decomposition strategy to use. AMG requires pyamg
    to be installed. It can be faster on very large, sparse problems,
    but may also lead to instabilities.
param_name:
    eigen_solver
type_string:
    {None, 'arpack', 'lobpcg', or 'amg'}
enum_elts:
    ['{None', "'arpack'", "'lobpcg'", "'amg'}"]

WARNING:skdoc:failed to parse type: ''amg'}', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.cluster._spectral.SpectralClustering'>
function_qualname:
    sklearn.cluster.SpectralClustering.SpectralClustering
group:
    params
section:
    Parameters
text:
    eigen_solver : {None, 'arpack', 'lobpcg', or 'amg'}
    The eigenvalue decomposition strategy to use. AMG requires pyamg
    to be installed. It can be faster on very large, sparse problems,
    but may also lead to instabilities.
param_name:
    eigen_solver
type_string:
    {None, 'arpack', 'lobpcg', or 'amg'}
enum_elts:
    ['{None', "'arpack'", "'lobpcg'", "'amg'}"]

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: '{'k-means++'', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.cluster._bicluster.SpectralCoclustering'>
function_qualname:
    sklearn.cluster.SpectralCoclustering.SpectralCoclustering
group:
    params
section:
    Parameters
text:
    init : {'k-means++', 'random', or ndarray of shape             (n_clusters, n_features), default='k-means++'
    Method for initialization of k-means algorithm; defaults to
    'k-means++'.
param_name:
    init
type_string:
    {'k-means++', 'random', or ndarray
enum_elts:
    ["{'k-means++'", "'random'", 'ndarray']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'array [n_samples]', context follows
WARNING:skdoc:--------- context:
function:
    <function dbscan at 0x7f1ea790a670>
function_qualname:
    sklearn.cluster.dbscan
group:
    ret
section:
    Returns
text:
    labels : array [n_samples]
    Cluster labels for each point.  Noisy samples are given the label -1.
param_name:
    labels
type_string:
    array [n_samples]

WARNING:skdoc:failed to parse type: '{'k-means++', 'random', or ndarray, or a callable}', context follows
WARNING:skdoc:--------- context:
function:
    <function k_means at 0x7f1ea86bf3a0>
function_qualname:
    sklearn.cluster.k_means
group:
    params
section:
    Parameters
text:
    init : {'k-means++', 'random', or ndarray, or a callable}, optional
    Method for initialization, default to 'k-means++':
param_name:
    init
type_string:
    {'k-means++', 'random', or ndarray, or a callable}

WARNING:skdoc:failed to parse type: 'shape: n_samples', context follows
WARNING:skdoc:--------- context:
function:
    <function spectral_clustering at 0x7f1ea86afc10>
function_qualname:
    sklearn.cluster.spectral_clustering
group:
    ret
section:
    Returns
text:
    labels : array of integers, shape: n_samples
    The labels of the clusters.
param_name:
    labels
type_string:
    array of integers, shape: n_samples
enum_elts:
    ['array of integers', 'shape: n_samples']

WARNING:skdoc:failed to parse type: 'math:`u` is the newly joined cluster consisting of', context follows
WARNING:skdoc:--------- context:
function:
    <function ward_tree at 0x7f1ea790a310>
function_qualname:
    sklearn.cluster.ward_tree
group:
    ret
section:
    Returns
text:
    where :math:`u` is the newly joined cluster consisting of
    clusters :math:`s` and :math:`t`, :math:`v` is an unused
    cluster in the forest, :math:`T=|v|+|s|+|t|`, and
    :math:`|*|` is the cardinality of its argument. This is also
    known as the incremental algorithm.
param_name:
    where
type_string:
    math:`u` is the newly joined cluster consisting of

WARNING:skdoc:failed to parse type: 'list of tuples', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.compose._column_transformer.ColumnTransformer'>
function_qualname:
    sklearn.compose.ColumnTransformer.ColumnTransformer
group:
    params
section:
    Parameters
text:
    transformers : list of tuples
    List of (name, transformer, column(s)) tuples specifying the
    transformer objects to be applied to subsets of the data.
param_name:
    transformers
type_string:
    list of tuples

WARNING:skdoc:failed to parse type: 'Bunch object', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.compose._column_transformer.ColumnTransformer'>
section:
    Attributes
text:
    named_transformers_ : Bunch object, a dictionary with attribute access
    Read-only attribute to access any transformer by given name.
    Keys are transformer names and values are the fitted transformer
    objects.
param_name:
    named_transformers_
type_string:
    Bunch object, a dictionary with attribute access
enum_elts:
    ['Bunch object', 'a dictionary with attribute access']

WARNING:skdoc:failed to parse type: 'a dictionary with attribute access', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.compose._column_transformer.ColumnTransformer'>
section:
    Attributes
text:
    named_transformers_ : Bunch object, a dictionary with attribute access
    Read-only attribute to access any transformer by given name.
    Keys are transformer names and values are the fitted transformer
    objects.
param_name:
    named_transformers_
type_string:
    Bunch object, a dictionary with attribute access
enum_elts:
    ['Bunch object', 'a dictionary with attribute access']

WARNING:skdoc:failed to parse type: 'DataFrame', context follows
WARNING:skdoc:--------- context:
function:
    <function ColumnTransformer.fit at 0x7f1ea793aee0>
function_qualname:
    sklearn.compose.ColumnTransformer.fit
group:
    params
section:
    Parameters
text:
    X : array-like or DataFrame of shape [n_samples, n_features]
    Input data, of which specified subsets are used to fit the
    transformers.
param_name:
    X
type_string:
    array-like or DataFrame
enum_elts:
    ['array-like', 'DataFrame']

WARNING:skdoc:failed to parse type: 'ColumnTransformer', context follows
WARNING:skdoc:--------- context:
function:
    <function ColumnTransformer.fit at 0x7f1ea793aee0>
function_qualname:
    sklearn.compose.ColumnTransformer.fit
group:
    ret
section:
    Returns
text:
    self : ColumnTransformer
    This estimator
param_name:
    self
type_string:
    ColumnTransformer

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'tuples', context follows
WARNING:skdoc:--------- context:
function:
    <function make_column_transformer at 0x7f1ea793c280>
function_qualname:
    sklearn.compose.make_column_transformer
group:
    params
section:
    Parameters
text:
    *transformers : tuples
    Tuples of the form (transformer, column(s)) specifying the
    transformer objects to be applied to subsets of the data.
param_name:
    transformers
type_string:
    tuples

WARNING:skdoc:failed to parse type: 'module', context follows
WARNING:skdoc:--------- context:
function:
    <function pyplot at 0x7f1ea793c3a0>
function_qualname:
    sklearn.conftest.pyplot
group:
    ret
section:
    Returns
text:
    pyplot : module
    The ``matplotlib.pyplot`` module.
param_name:
    pyplot
type_string:
    module

WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Conftest.Pytest, sklearn.conftest.pytest): OutsideScope
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: '(ignored)', context follows
WARNING:skdoc:--------- context:
function:
    <bound method GraphicalLasso.fit of GraphicalLasso(alpha=0.01, assume_centered=False, enet_tol=0.0001, max_iter=100,
                   mode='cd', tol=0.0001, verbose=False)>
function_qualname:
    sklearn.covariance.GraphicalLasso.fit
group:
    params
section:
    Parameters
text:
    y : (ignored)
param_name:
    y
type_string:
    (ignored)

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'list positive float', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.covariance._graph_lasso.GraphicalLassoCV'>
function_qualname:
    sklearn.covariance.GraphicalLassoCV.GraphicalLassoCV
group:
    params
section:
    Parameters
text:
    alphas : integer, or list positive float, optional
    If an integer is given, it fixes the number of points on the
    grids of alpha to be used. If a list is given, it gives the
    grid to be used. See the notes in the class docstring for
    more details.
param_name:
    alphas
type_string:
    integer, or list positive float
enum_elts:
    ['integer', 'list positive float']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'list of (objective, dual_gap) pairs', context follows
WARNING:skdoc:--------- context:
function:
    <function graphical_lasso at 0x7f1ea6f845e0>
function_qualname:
    sklearn.covariance.graphical_lasso
group:
    ret
section:
    Returns
text:
    costs : list of (objective, dual_gap) pairs
    The list of values of the objective function and the dual gap at
    each iteration. Returned only if return_costs is True.
param_name:
    costs
type_string:
    list of (objective, dual_gap) pairs

WARNING:skdoc:failed to parse type: '[p, n_components]', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.cross_decomposition._cca.CCA'>
section:
    Attributes
text:
    x_weights_ : array, [p, n_components]
    X block weights vectors.
param_name:
    x_weights_
type_string:
    array, [p, n_components]
enum_elts:
    ['array', '[p, n_components]']

WARNING:skdoc:failed to parse type: '[q, n_components]', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.cross_decomposition._cca.CCA'>
section:
    Attributes
text:
    y_weights_ : array, [q, n_components]
    Y block weights vectors.
param_name:
    y_weights_
type_string:
    array, [q, n_components]
enum_elts:
    ['array', '[q, n_components]']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: '[p, q]', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.cross_decomposition._pls.PLSRegression'>
section:
    Attributes
text:
    coef_ : array, [p, q]
    The coefficients of the linear model: ``Y = X coef_ + Err``
param_name:
    coef_
type_string:
    array, [p, q]
enum_elts:
    ['array', '[p, q]']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'file-like in binary mode', context follows
WARNING:skdoc:--------- context:
function:
    <function dump_svmlight_file at 0x7f1ea6c60820>
function_qualname:
    sklearn.datasets.dump_svmlight_file
group:
    params
section:
    Parameters
text:
    f : string or file-like in binary mode
    If string, specifies the path that will contain the data.
    If file-like, data will be written to f. f should be opened in binary
    mode.
param_name:
    f
type_string:
    string or file-like in binary mode
enum_elts:
    ['string', 'file-like in binary mode']

WARNING:skdoc:no type string found for 'data_home' in 'optional, default: None', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_20newsgroups at 0x7f1ea6c27310>
function_qualname:
    sklearn.datasets.fetch_20newsgroups
group:
    params
section:
    Parameters

WARNING:skdoc:no type string found for 'download_if_missing' in 'optional, True by default', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_20newsgroups at 0x7f1ea6c27310>
function_qualname:
    sklearn.datasets.fetch_20newsgroups
group:
    params
section:
    Parameters

WARNING:skdoc:failed to parse type: 'length [n_samples]', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_20newsgroups at 0x7f1ea6c27310>
function_qualname:
    sklearn.datasets.fetch_20newsgroups
group:
    bunch_fetch
param_name:
    data
line:
    - data: list, length [n_samples]
enum_elts:
    ['list', 'length [n_samples]']

WARNING:skdoc:failed to parse type: 'a description of the dataset', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_20newsgroups at 0x7f1ea6c27310>
function_qualname:
    sklearn.datasets.fetch_20newsgroups
group:
    bunch_fetch
param_name:
    DESCR
line:
    - DESCR: a description of the dataset.

WARNING:skdoc:failed to parse type: 'a list of categories of the returned data', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_20newsgroups at 0x7f1ea6c27310>
function_qualname:
    sklearn.datasets.fetch_20newsgroups
group:
    bunch_fetch
param_name:
    target_names
line:
    - target_names: a list of categories of the returned data,

WARNING:skdoc:no type string found for 'data_home' in 'optional, default: None', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_20newsgroups_vectorized at 0x7f1ea6c37af0>
function_qualname:
    sklearn.datasets.fetch_20newsgroups_vectorized
group:
    params
section:
    Parameters

WARNING:skdoc:no type string found for 'download_if_missing' in 'optional, True by default', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_20newsgroups_vectorized at 0x7f1ea6c37af0>
function_qualname:
    sklearn.datasets.fetch_20newsgroups_vectorized
group:
    params
section:
    Parameters

WARNING:skdoc:no type string found for 'data_home' in 'optional, default: None', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_california_housing at 0x7f1ea63631f0>
function_qualname:
    sklearn.datasets.fetch_california_housing
group:
    params
section:
    Parameters

WARNING:skdoc:no type string found for 'download_if_missing' in 'optional, default=True', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_california_housing at 0x7f1ea63631f0>
function_qualname:
    sklearn.datasets.fetch_california_housing
group:
    params
section:
    Parameters

WARNING:skdoc:no type string found for 'subset' in 'optional, default: 'train'', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_lfw_pairs at 0x7f1ea6e76ee0>
function_qualname:
    sklearn.datasets.fetch_lfw_pairs
group:
    params
section:
    Parameters

WARNING:skdoc:no type string found for 'data_home' in 'optional, default: None', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_lfw_pairs at 0x7f1ea6e76ee0>
function_qualname:
    sklearn.datasets.fetch_lfw_pairs
group:
    params
section:
    Parameters

WARNING:skdoc:no type string found for 'slice_' in 'optional', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_lfw_pairs at 0x7f1ea6e76ee0>
function_qualname:
    sklearn.datasets.fetch_lfw_pairs
group:
    params
section:
    Parameters

WARNING:skdoc:no type string found for 'download_if_missing' in 'optional, True by default', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_lfw_pairs at 0x7f1ea6e76ee0>
function_qualname:
    sklearn.datasets.fetch_lfw_pairs
group:
    params
section:
    Parameters

WARNING:skdoc:no type string found for 'data_home' in 'optional, default: None', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_lfw_people at 0x7f1ea6e76dc0>
function_qualname:
    sklearn.datasets.fetch_lfw_people
group:
    params
section:
    Parameters

WARNING:skdoc:no type string found for 'slice_' in 'optional', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_lfw_people at 0x7f1ea6e76dc0>
function_qualname:
    sklearn.datasets.fetch_lfw_people
group:
    params
section:
    Parameters

WARNING:skdoc:no type string found for 'download_if_missing' in 'optional, True by default', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_lfw_people at 0x7f1ea6e76dc0>
function_qualname:
    sklearn.datasets.fetch_lfw_people
group:
    params
section:
    Parameters

WARNING:skdoc:no type string found for 'data_home' in 'optional, default: None', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_olivetti_faces at 0x7f1ea6c608b0>
function_qualname:
    sklearn.datasets.fetch_olivetti_faces
group:
    params
section:
    Parameters

WARNING:skdoc:no type string found for 'download_if_missing' in 'optional, True by default', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_olivetti_faces at 0x7f1ea6c608b0>
function_qualname:
    sklearn.datasets.fetch_olivetti_faces
group:
    params
section:
    Parameters

WARNING:skdoc:failed to parse type: 'ndarray. Each row corresponds to a ravelled', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_olivetti_faces at 0x7f1ea6c608b0>
function_qualname:
    sklearn.datasets.fetch_olivetti_faces
group:
    bunch_fetch
param_name:
    data
line:
    - data: ndarray, shape (400, 4096). Each row corresponds to a ravelled

WARNING:skdoc:failed to parse type: 'ndarray. Each row is a face image', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_olivetti_faces at 0x7f1ea6c608b0>
function_qualname:
    sklearn.datasets.fetch_olivetti_faces
group:
    bunch_fetch
param_name:
    images
line:
    - images : ndarray, shape (400, 64, 64). Each row is a face image

WARNING:skdoc:failed to parse type: 'ndarray. Labels associated to each face image', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_olivetti_faces at 0x7f1ea6c608b0>
function_qualname:
    sklearn.datasets.fetch_olivetti_faces
group:
    bunch_fetch
param_name:
    target
line:
    - target : ndarray, shape (400,). Labels associated to each face image.

WARNING:skdoc:failed to parse type: 'string. Description of the modified Olivetti Faces Dataset', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_olivetti_faces at 0x7f1ea6c608b0>
function_qualname:
    sklearn.datasets.fetch_olivetti_faces
group:
    bunch_fetch
param_name:
    DESCR
line:
    - DESCR : string. Description of the modified Olivetti Faces Dataset.

WARNING:skdoc:failed to parse type: 'Bunch', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_openml at 0x7f1ea6c5b280>
function_qualname:
    sklearn.datasets.fetch_openml
group:
    bunch_fetch
param_name:
    data
line:
    data : Bunch

WARNING:skdoc:failed to parse type: 'scipy.sparse.csr_matrix of floats', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_openml at 0x7f1ea6c5b280>
function_qualname:
    sklearn.datasets.fetch_openml
group:
    bunch_fetch
param_name:
    data
line:
    data : np.array, scipy.sparse.csr_matrix of floats, or pandas DataFrame
enum_elts:
    ['np.array', 'scipy.sparse.csr_matrix of floats', 'pandas DataFrame']

WARNING:skdoc:failed to parse type: 'pandas DataFrame', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_openml at 0x7f1ea6c5b280>
function_qualname:
    sklearn.datasets.fetch_openml
group:
    bunch_fetch
param_name:
    data
line:
    data : np.array, scipy.sparse.csr_matrix of floats, or pandas DataFrame
enum_elts:
    ['np.array', 'scipy.sparse.csr_matrix of floats', 'pandas DataFrame']

WARNING:skdoc:failed to parse type: 'pandas Series', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_openml at 0x7f1ea6c5b280>
function_qualname:
    sklearn.datasets.fetch_openml
group:
    bunch_fetch
param_name:
    target
line:
    target : np.array, pandas Series or DataFrame
enum_elts:
    ['np.array', 'pandas Series', 'DataFrame']

WARNING:skdoc:failed to parse type: 'dtype np.float64', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_rcv1 at 0x7f1ea6363310>
function_qualname:
    sklearn.datasets.fetch_rcv1
group:
    bunch_fetch
param_name:
    data
line:
    dataset.data : scipy csr array, dtype np.float64, shape (804414, 47236)
enum_elts:
    ['scipy csr array', 'dtype np.float64']

WARNING:skdoc:failed to parse type: 'dtype np.uint8', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_rcv1 at 0x7f1ea6363310>
function_qualname:
    sklearn.datasets.fetch_rcv1
group:
    bunch_fetch
param_name:
    target
line:
    dataset.target : scipy csr array, dtype np.uint8, shape (804414, 103)
enum_elts:
    ['scipy csr array', 'dtype np.uint8']

WARNING:skdoc:failed to parse type: 'dtype np.uint32', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_rcv1 at 0x7f1ea6363310>
function_qualname:
    sklearn.datasets.fetch_rcv1
group:
    bunch_fetch
param_name:
    sample_id
line:
    dataset.sample_id : numpy array, dtype np.uint32, shape (804414,)
enum_elts:
    ['numpy array', 'dtype np.uint32']

WARNING:skdoc:failed to parse type: 'dtype object', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_rcv1 at 0x7f1ea6363310>
function_qualname:
    sklearn.datasets.fetch_rcv1
group:
    bunch_fetch
param_name:
    target_names
line:
    dataset.target_names : numpy array, dtype object, length (103)
enum_elts:
    ['numpy array', 'dtype object', 'length (103)']

WARNING:skdoc:failed to parse type: 'length (103)', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_rcv1 at 0x7f1ea6363310>
function_qualname:
    sklearn.datasets.fetch_rcv1
group:
    bunch_fetch
param_name:
    target_names
line:
    dataset.target_names : numpy array, dtype object, length (103)
enum_elts:
    ['numpy array', 'dtype object', 'length (103)']

WARNING:skdoc:no type string found for 'data_home' in 'optional, default: None', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_species_distributions at 0x7f1ea6363160>
function_qualname:
    sklearn.datasets.fetch_species_distributions
group:
    params
section:
    Parameters

WARNING:skdoc:no type string found for 'download_if_missing' in 'optional, True by default', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_species_distributions at 0x7f1ea6363160>
function_qualname:
    sklearn.datasets.fetch_species_distributions
group:
    params
section:
    Parameters

WARNING:skdoc:failed to parse type: 'Ny : integers', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_species_distributions at 0x7f1ea6363160>
function_qualname:
    sklearn.datasets.fetch_species_distributions
group:
    bunch_fetch
param_name:
    Nx
line:
    Nx, Ny : integers

WARNING:skdoc:failed to parse type: 'y_left_lower_corner : floats', context follows
WARNING:skdoc:--------- context:
function:
    <function fetch_species_distributions at 0x7f1ea6363160>
function_qualname:
    sklearn.datasets.fetch_species_distributions
group:
    bunch_fetch
param_name:
    x_left_lower_corner
line:
    x_left_lower_corner, y_left_lower_corner : floats

WARNING:skdoc:failed to parse type: 'between 0 and 10', context follows
WARNING:skdoc:--------- context:
function:
    <function load_digits at 0x7f1ea6eefaf0>
function_qualname:
    sklearn.datasets.load_digits
group:
    params
section:
    Parameters
text:
    n_class : integer, between 0 and 10, optional (default=10)
    The number of classes to return.
param_name:
    n_class
type_string:
    integer, between 0 and 10
enum_elts:
    ['integer', 'between 0 and 10']

WARNING:skdoc:failed to parse type: 'string or None (', context follows
WARNING:skdoc:--------- context:
function:
    <function load_files at 0x7f1ea6eef820>
function_qualname:
    sklearn.datasets.load_files
group:
    params
section:
    Parameters
text:
    encoding : string or None (default is None)
    If None, do not try to decode the content of the files (e.g. for images
    or other non-text content). If not None, encoding to use to decode text
    files to Unicode if load_content is True.
param_name:
    encoding
type_string:
    string or None (

WARNING:skdoc:failed to parse type: '`china.jpg`', context follows
WARNING:skdoc:--------- context:
function:
    <function load_sample_image at 0x7f1ea6eefdc0>
function_qualname:
    sklearn.datasets.load_sample_image
group:
    params
section:
    Parameters
text:
    image_name : {`china.jpg`, `flower.jpg`}
    The name of the sample image loaded
param_name:
    image_name
type_string:
    {`china.jpg`, `flower.jpg`}
enum_elts:
    ['`china.jpg`', '`flower.jpg`']

WARNING:skdoc:failed to parse type: '`flower.jpg`', context follows
WARNING:skdoc:--------- context:
function:
    <function load_sample_image at 0x7f1ea6eefdc0>
function_qualname:
    sklearn.datasets.load_sample_image
group:
    params
section:
    Parameters
text:
    image_name : {`china.jpg`, `flower.jpg`}
    The name of the sample image loaded
param_name:
    image_name
type_string:
    {`china.jpg`, `flower.jpg`}
enum_elts:
    ['`china.jpg`', '`flower.jpg`']

WARNING:skdoc:failed to parse type: 'file-like', context follows
WARNING:skdoc:--------- context:
function:
    <function load_svmlight_file at 0x7f1ea6c60550>
function_qualname:
    sklearn.datasets.load_svmlight_file
group:
    params
section:
    Parameters
text:
    f : {str, file-like, int}
    (Path to) a file to load. If a path ends in ".gz" or ".bz2", it will
    be uncompressed on the fly. If an integer is passed, it is assumed to
    be a file descriptor. A file-like or file descriptor will not be closed
    by this function. A file-like object must be opened in binary mode.
param_name:
    f
type_string:
    {str, file-like, int}
enum_elts:
    ['str', 'file-like', 'int']

WARNING:skdoc:failed to parse type: 'or', context follows
WARNING:skdoc:--------- context:
function:
    <function load_svmlight_file at 0x7f1ea6c60550>
function_qualname:
    sklearn.datasets.load_svmlight_file
group:
    bunch_fetch
param_name:
    y
line:
    y : ndarray of shape (n_samples,), or, in the multilabel a list of
enum_elts:
    ['ndarray', 'or', 'in the multilabel a list of']

WARNING:skdoc:failed to parse type: 'in the multilabel a list of', context follows
WARNING:skdoc:--------- context:
function:
    <function load_svmlight_file at 0x7f1ea6c60550>
function_qualname:
    sklearn.datasets.load_svmlight_file
group:
    bunch_fetch
param_name:
    y
line:
    y : ndarray of shape (n_samples,), or, in the multilabel a list of
enum_elts:
    ['ndarray', 'or', 'in the multilabel a list of']

WARNING:skdoc:failed to parse type: 'iterable over {str', context follows
WARNING:skdoc:--------- context:
function:
    <function load_svmlight_files at 0x7f1ea6c60700>
function_qualname:
    sklearn.datasets.load_svmlight_files
group:
    params
section:
    Parameters
text:
    files : iterable over {str, file-like, int}
    (Paths of) files to load. If a path ends in ".gz" or ".bz2", it will
    be uncompressed on the fly. If an integer is passed, it is assumed to
    be a file descriptor. File-likes and file descriptors will not be
    closed by this function. File-like objects must be opened in binary
    mode.
param_name:
    files
type_string:
    iterable over {str, file-like, int}
enum_elts:
    ['iterable over {str', 'file-like', 'int}']

WARNING:skdoc:failed to parse type: 'int}', context follows
WARNING:skdoc:--------- context:
function:
    <function load_svmlight_files at 0x7f1ea6c60700>
function_qualname:
    sklearn.datasets.load_svmlight_files
group:
    params
section:
    Parameters
text:
    files : iterable over {str, file-like, int}
    (Paths of) files to load. If a path ends in ".gz" or ".bz2", it will
    be uncompressed on the fly. If an integer is passed, it is assumed to
    be a file descriptor. File-likes and file descriptors will not be
    closed by this function. File-like objects must be opened in binary
    mode.
param_name:
    files
type_string:
    iterable over {str, file-like, int}
enum_elts:
    ['iterable over {str', 'file-like', 'int}']

WARNING:skdoc:failed to parse type: 'array of shape `shape`', context follows
WARNING:skdoc:--------- context:
function:
    <function make_biclusters at 0x7f1ea6c603a0>
function_qualname:
    sklearn.datasets.make_biclusters
group:
    ret
section:
    Returns
text:
    X : array of shape `shape`
    The generated array.
param_name:
    X
type_string:
    array of shape `shape`

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: '[n_iterations]', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.decomposition._factor_analysis.FactorAnalysis'>
section:
    Attributes
text:
    loglike_ : list, [n_iterations]
    The log likelihood at each iteration.
param_name:
    loglike_
type_string:
    list, [n_iterations]
enum_elts:
    ['list', '[n_iterations]']

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'None of an  ndarray', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.decomposition._fastica.FastICA'>
function_qualname:
    sklearn.decomposition.FastICA.FastICA
group:
    params
section:
    Parameters
text:
    w_init : None of an (n_components, n_components) ndarray
    The mixing matrix to be used to initialize the algorithm.
param_name:
    w_init
type_string:
    None of an  ndarray

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:no type string found for 'X_fit_' in '(n_samples, n_features)', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.decomposition._kernel_pca.KernelPCA'>
section:
    Attributes

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:no type string found for 'doc_topic_distr' in 'shape=(n_samples, n_components)', context follows
WARNING:skdoc:--------- context:
function:
    <bound method LatentDirichletAllocation.transform of LatentDirichletAllocation(batch_size=128, doc_topic_prior=None,
                              evaluate_every=-1, learning_decay=0.7,
                              learning_method='batch', learning_offset=10.0,
                              max_doc_update_iter=100, max_iter=10,
                              mean_change_tol=0.001, n_components=10, n_jobs=None,
                              perp_tol=0.1, random_state=None,
                              topic_word_prior=None, total_samples=1000000.0,
                              verbose=0)>
function_qualname:
    sklearn.decomposition.LatentDirichletAllocation.transform
group:
    ret
section:
    Returns

WARNING:skdoc:failed to parse type: '``0.1 *', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.decomposition._dict_learning.MiniBatchDictionaryLearning'>
function_qualname:
    sklearn.decomposition.MiniBatchDictionaryLearning.MiniBatchDictionaryLearning
group:
    params
section:
    Parameters
text:
    transform_n_nonzero_coefs : int, ``0.1 * n_features`` by default
    Number of nonzero coefficients to target in each column of the
    solution. This is only used by `algorithm='lars'` and `algorithm='omp'`
    and is overridden by `alpha` in the `omp` case.
param_name:
    transform_n_nonzero_coefs
type_string:
    int, ``0.1 *
enum_elts:
    ['int', '``0.1 *']

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.decomposition.MiniBatchDictionaryLearning.shuffle, arg 1 != self: (*arrays, random_state=None, n_samples=None)
WARNING:skdoc:method LowerName(Sklearn.Decomposition.MiniBatchDictionaryLearning.shuffle, sklearn.decomposition.MiniBatchDictionaryLearning.shuffle) has complete override spec but there was an error wrapping it: True
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.decomposition.MiniBatchSparsePCA.shuffle, arg 1 != self: (*arrays, random_state=None, n_samples=None)
WARNING:skdoc:method LowerName(Sklearn.Decomposition.MiniBatchSparsePCA.shuffle, sklearn.decomposition.MiniBatchSparsePCA.shuffle) has complete override spec but there was an error wrapping it: True
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.decomposition.NMF.shuffle, arg 1 != self: (*arrays, random_state=None, n_samples=None)
WARNING:skdoc:method LowerName(Sklearn.Decomposition.NMF.shuffle, sklearn.decomposition.NMF.shuffle) has complete override spec but there was an error wrapping it: False
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'int (', context follows
WARNING:skdoc:--------- context:
function:
    <function randomized_svd at 0x7f1eac60eca0>
function_qualname:
    sklearn.decomposition.randomized_svd
group:
    params
section:
    Parameters
text:
    n_oversamples : int (default is 10)
    Additional number of random vectors to sample the range of M so as
    to ensure proper conditioning. The total number of random vectors
    used to find the range of M is n_components + n_oversamples. Smaller
    number can improve speed but can negatively impact the quality of
    approximation of singular vectors and singular values.
param_name:
    n_oversamples
type_string:
    int (

WARNING:skdoc:failed to parse type: 'int or 'auto' (', context follows
WARNING:skdoc:--------- context:
function:
    <function randomized_svd at 0x7f1eac60eca0>
function_qualname:
    sklearn.decomposition.randomized_svd
group:
    params
section:
    Parameters
text:
    n_iter : int or 'auto' (default is 'auto')
    Number of power iterations. It can be used to deal with very noisy
    problems. When 'auto', it is set to 4, unless `n_components` is small
    (< .1 * min(X.shape)) `n_iter` in which case is set to 7.
    This improves precision with few components.
param_name:
    n_iter
type_string:
    int or 'auto' (

WARNING:skdoc:failed to parse type: '0.1 *', context follows
WARNING:skdoc:--------- context:
function:
    <function sparse_encode at 0x7f1ea9012790>
function_qualname:
    sklearn.decomposition.sparse_encode
group:
    params
section:
    Parameters
text:
    n_nonzero_coefs : int, 0.1 * n_features by default
    Number of nonzero coefficients to target in each column of the
    solution. This is only used by `algorithm='lars'` and `algorithm='omp'`
    and is overridden by `alpha` in the `omp` case.
param_name:
    n_nonzero_coefs
type_string:
    int, 0.1 *
enum_elts:
    ['int', '0.1 *']

WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Decomposition.Warnings, sklearn.decomposition.warnings): OutsideScope
WARNING:skdoc:no signature for constructor of sklearn.discriminant_analysis.ChangedBehaviorWarning, disabling ctor
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'array-likes', context follows
WARNING:skdoc:--------- context:
function:
    <function unique_labels at 0x7f1eac867d30>
function_qualname:
    sklearn.discriminant_analysis.unique_labels
group:
    params
section:
    Parameters
text:
    *ys : array-likes
param_name:
    ys
type_string:
    array-likes

WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Discriminant_analysis.Linalg, sklearn.discriminant_analysis.linalg): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Discriminant_analysis.Np, sklearn.discriminant_analysis.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Discriminant_analysis.Warnings, sklearn.discriminant_analysis.warnings): OutsideScope
WARNING:skdoc:failed to parse type: 'list of array', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.dummy.DummyClassifier'>
section:
    Attributes
text:
    classes_ : array or list of array of shape (n_classes,)
    Class labels for each output.
param_name:
    classes_
type_string:
    array or list of array
enum_elts:
    ['array', 'list of array']

WARNING:skdoc:failed to parse type: '{array-like', context follows
WARNING:skdoc:--------- context:
function:
    <bound method DummyClassifier.fit of DummyClassifier(constant=None, random_state=None, strategy='warn')>
function_qualname:
    sklearn.dummy.DummyClassifier.fit
group:
    params
section:
    Parameters
text:
    X : {array-like, object with finite length or shape}
    Training data, requires length = n_samples
param_name:
    X
type_string:
    {array-like, object with finite length or shape}
enum_elts:
    ['{array-like', 'object with finite length', 'shape}']

WARNING:skdoc:failed to parse type: 'object with finite length', context follows
WARNING:skdoc:--------- context:
function:
    <bound method DummyClassifier.fit of DummyClassifier(constant=None, random_state=None, strategy='warn')>
function_qualname:
    sklearn.dummy.DummyClassifier.fit
group:
    params
section:
    Parameters
text:
    X : {array-like, object with finite length or shape}
    Training data, requires length = n_samples
param_name:
    X
type_string:
    {array-like, object with finite length or shape}
enum_elts:
    ['{array-like', 'object with finite length', 'shape}']

WARNING:skdoc:failed to parse type: 'shape}', context follows
WARNING:skdoc:--------- context:
function:
    <bound method DummyClassifier.fit of DummyClassifier(constant=None, random_state=None, strategy='warn')>
function_qualname:
    sklearn.dummy.DummyClassifier.fit
group:
    params
section:
    Parameters
text:
    X : {array-like, object with finite length or shape}
    Training data, requires length = n_samples
param_name:
    X
type_string:
    {array-like, object with finite length or shape}
enum_elts:
    ['{array-like', 'object with finite length', 'shape}']

WARNING:skdoc:failed to parse type: 'list of array-lke', context follows
WARNING:skdoc:--------- context:
function:
    <bound method DummyClassifier.predict_proba of DummyClassifier(constant=None, random_state=None, strategy='warn')>
function_qualname:
    sklearn.dummy.DummyClassifier.predict_proba
group:
    ret
section:
    Returns
text:
    P : array-like or list of array-lke of shape (n_samples, n_classes)
    Returns the probability of the sample for each class in
    the model, where classes are ordered arithmetically, for each
    output.
param_name:
    P
type_string:
    array-like or list of array-lke
enum_elts:
    ['array-like', 'list of array-lke']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding *arrays : Enum([Arr(ArrayLike), UnknownType(tuple of input objects)]) to have type List(PyObject())
WARNING:skdoc:failed to parse type: 'sparse matrix of size', context follows
WARNING:skdoc:--------- context:
function:
    <function class_distribution at 0x7f1eac5fa0d0>
function_qualname:
    sklearn.dummy.class_distribution
group:
    params
section:
    Parameters
text:
    y : array like or sparse matrix of size (n_samples, n_outputs)
    The labels for each example.
param_name:
    y
type_string:
    array like or sparse matrix of size
enum_elts:
    ['array like', 'sparse matrix of size']

WARNING:skdoc:failed to parse type: 'list of size n_outputs of arrays of size', context follows
WARNING:skdoc:--------- context:
function:
    <function class_distribution at 0x7f1eac5fa0d0>
function_qualname:
    sklearn.dummy.class_distribution
group:
    ret
section:
    Returns
text:
    classes : list of size n_outputs of arrays of size (n_classes,)
    List of classes for each column.
param_name:
    classes
type_string:
    list of size n_outputs of arrays of size

WARNING:skdoc:failed to parse type: 'list of integers of size n_outputs', context follows
WARNING:skdoc:--------- context:
function:
    <function class_distribution at 0x7f1eac5fa0d0>
function_qualname:
    sklearn.dummy.class_distribution
group:
    ret
section:
    Returns
text:
    n_classes : list of integers of size n_outputs
    Number of classes in each column
param_name:
    n_classes
type_string:
    list of integers of size n_outputs

WARNING:skdoc:append: caught error building Class UpperName(Sklearn.Dummy.Deprecated, sklearn.dummy.deprecated): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Dummy.Np, sklearn.dummy.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Dummy.Sp, sklearn.dummy.sp): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Dummy.Warnings, sklearn.dummy.warnings): OutsideScope
WARNING:skdoc:failed to parse type: 'list of classifiers', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>
section:
    Attributes
text:
    estimators_ : list of classifiers
    The collection of fitted sub-estimators.
param_name:
    estimators_
type_string:
    list of classifiers

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:yielded value is not a generator (Float()), forcing type to Py.Object.t
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:yielded value is not a generator (Float()), forcing type to Py.Object.t
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'the search for a split does not stop until at least one', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.ensemble._forest.ExtraTreesClassifier'>
function_qualname:
    sklearn.ensemble.ExtraTreesClassifier.ExtraTreesClassifier
group:
    params
section:
    Parameters
text:
    Note: the search for a split does not stop until at least one
    valid partition of the node samples is found, even if it requires to
    effectively inspect more than ``max_features`` features.
param_name:
    Note
type_string:
    the search for a split does not stop until at least one

WARNING:skdoc:failed to parse type: 'term:`Glossary <random_state>` for details', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.ensemble._forest.ExtraTreesClassifier'>
function_qualname:
    sklearn.ensemble.ExtraTreesClassifier.ExtraTreesClassifier
group:
    params
section:
    Parameters
text:
    See :term:`Glossary <random_state>` for details.
param_name:
    See
type_string:
    term:`Glossary <random_state>` for details

WARNING:skdoc:failed to parse type: 'list of dicts', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.ensemble._forest.ExtraTreesClassifier'>
function_qualname:
    sklearn.ensemble.ExtraTreesClassifier.ExtraTreesClassifier
group:
    params
section:
    Parameters
text:
    class_weight : dict, list of dicts, "balanced", "balanced_subsample" or     None, optional (default=None)
    Weights associated with classes in the form ``{class_label: weight}``.
    If not given, all classes are supposed to have weight one. For
    multi-output problems, a list of dicts can be provided in the same
    order as the columns of y.
param_name:
    class_weight
type_string:
    dict, list of dicts, "balanced", "balanced_subsample" or     None
enum_elts:
    ['dict', 'list of dicts', '"balanced"', '"balanced_subsample"', 'None']

WARNING:skdoc:failed to parse type: 'ExtraTreeClassifier', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.ensemble._forest.ExtraTreesClassifier'>
section:
    Attributes
text:
    base_estimator_ : ExtraTreeClassifier
    The child estimator template used to create the collection of fitted
    sub-estimators.
param_name:
    base_estimator_
type_string:
    ExtraTreeClassifier

WARNING:skdoc:failed to parse type: 'list of DecisionTreeClassifier', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.ensemble._forest.ExtraTreesClassifier'>
section:
    Attributes
text:
    estimators_ : list of DecisionTreeClassifier
    The collection of fitted sub-estimators.
param_name:
    estimators_
type_string:
    list of DecisionTreeClassifier

WARNING:skdoc:failed to parse type: 'a list of such arrays', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.ensemble._forest.ExtraTreesClassifier'>
section:
    Attributes
text:
    classes_ : array of shape (n_classes,) or a list of such arrays
    The classes labels (single output problem), or a list of arrays of
    class labels (multi-output problem).
param_name:
    classes_
type_string:
    array  or a list of such arrays
enum_elts:
    ['array', 'a list of such arrays']

WARNING:skdoc:failed to parse type: 'sparse matrix}', context follows
WARNING:skdoc:--------- context:
function:
    <bound method BaseForest.apply of ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                         criterion='gini', max_depth=None, max_features='auto',
                         max_leaf_nodes=None, max_samples=None,
                         min_impurity_decrease=0.0, min_impurity_split=None,
                         min_samples_leaf=1, min_samples_split=2,
                         min_weight_fraction_leaf=0.0, n_estimators=100,
                         n_jobs=None, oob_score=False, random_state=None, verbose=0,
                         warm_start=False)>
function_qualname:
    sklearn.ensemble.ExtraTreesClassifier.apply
group:
    params
section:
    Parameters
text:
    X : {array-like or sparse matrix} of shape (n_samples, n_features)
    The input samples. Internally, its dtype will be converted to
    ``dtype=np.float32``. If a sparse matrix is provided, it will be
    converted into a sparse ``csr_matrix``.
param_name:
    X
type_string:
    {array-like or sparse matrix}
enum_elts:
    ['{array-like', 'sparse matrix}']

WARNING:skdoc:failed to parse type: 'sparse csr array', context follows
WARNING:skdoc:--------- context:
function:
    <bound method BaseForest.decision_path of ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                         criterion='gini', max_depth=None, max_features='auto',
                         max_leaf_nodes=None, max_samples=None,
                         min_impurity_decrease=0.0, min_impurity_split=None,
                         min_samples_leaf=1, min_samples_split=2,
                         min_weight_fraction_leaf=0.0, n_estimators=100,
                         n_jobs=None, oob_score=False, random_state=None, verbose=0,
                         warm_start=False)>
function_qualname:
    sklearn.ensemble.ExtraTreesClassifier.decision_path
group:
    ret
section:
    Returns
text:
    indicator : sparse csr array, shape = [n_samples, n_nodes]
    Return a node indicator matrix where non zero elements
    indicates that the samples goes through the nodes.
param_name:
    indicator
type_string:
    sparse csr array

WARNING:skdoc:failed to parse type: 'array of size (n_estimators + 1, )', context follows
WARNING:skdoc:--------- context:
function:
    <bound method BaseForest.decision_path of ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                         criterion='gini', max_depth=None, max_features='auto',
                         max_leaf_nodes=None, max_samples=None,
                         min_impurity_decrease=0.0, min_impurity_split=None,
                         min_samples_leaf=1, min_samples_split=2,
                         min_weight_fraction_leaf=0.0, n_estimators=100,
                         n_jobs=None, oob_score=False, random_state=None, verbose=0,
                         warm_start=False)>
function_qualname:
    sklearn.ensemble.ExtraTreesClassifier.decision_path
group:
    ret
section:
    Returns
text:
    n_nodes_ptr : array of size (n_estimators + 1, )
    The columns from indicator[n_nodes_ptr[i]:n_nodes_ptr[i+1]]
    gives the indicator value for the i-th estimator.
param_name:
    n_nodes_ptr
type_string:
    array of size (n_estimators + 1, )

WARNING:skdoc:failed to parse type: 'a list of n_outputs', context follows
WARNING:skdoc:--------- context:
function:
    <bound method ForestClassifier.predict_log_proba of ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                         criterion='gini', max_depth=None, max_features='auto',
                         max_leaf_nodes=None, max_samples=None,
                         min_impurity_decrease=0.0, min_impurity_split=None,
                         min_samples_leaf=1, min_samples_split=2,
                         min_weight_fraction_leaf=0.0, n_estimators=100,
                         n_jobs=None, oob_score=False, random_state=None, verbose=0,
                         warm_start=False)>
function_qualname:
    sklearn.ensemble.ExtraTreesClassifier.predict_log_proba
group:
    ret
section:
    Returns
text:
    p : array of shape (n_samples, n_classes), or a list of n_outputs
    such arrays if n_outputs > 1.
    The class probabilities of the input samples. The order of the
    classes corresponds to that in the attribute :term:`classes_`.
param_name:
    p
type_string:
    array , or a list of n_outputs
enum_elts:
    ['array', 'a list of n_outputs']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'ExtraTreeRegressor', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.ensemble._forest.ExtraTreesRegressor'>
section:
    Attributes
text:
    base_estimator_ : ExtraTreeRegressor
    The child estimator template used to create the collection of fitted
    sub-estimators.
param_name:
    base_estimator_
type_string:
    ExtraTreeRegressor

WARNING:skdoc:failed to parse type: 'list of DecisionTreeRegressor', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.ensemble._forest.ExtraTreesRegressor'>
section:
    Attributes
text:
    estimators_ : list of DecisionTreeRegressor
    The collection of fitted sub-estimators.
param_name:
    estimators_
type_string:
    list of DecisionTreeRegressor

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'deprecated', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
function_qualname:
    sklearn.ensemble.GradientBoostingClassifier.GradientBoostingClassifier
group:
    params
section:
    Parameters
text:
    presort : deprecated, default='deprecated'
    This parameter is deprecated and will be removed in v0.24.
param_name:
    presort
type_string:
    deprecated

WARNING:skdoc:failed to parse type: 'ndarray of DecisionTreeRegressor', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.ensemble._gb.GradientBoostingClassifier'>
section:
    Attributes
text:
    estimators_ : ndarray of DecisionTreeRegressor,shape (n_estimators, ``loss_.K``)
    The collection of fitted sub-estimators. ``loss_.K`` is 1 for binary
    classification, otherwise n_classes.
param_name:
    estimators_
type_string:
    ndarray of DecisionTreeRegressor

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'array of DecisionTreeRegressor', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.ensemble._gb.GradientBoostingRegressor'>
section:
    Attributes
text:
    estimators_ : array of DecisionTreeRegressor, shape (n_estimators, 1)
    The collection of fitted sub-estimators.
param_name:
    estimators_
type_string:
    array of DecisionTreeRegressor

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'DecisionTreeClassifier', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.ensemble._forest.RandomForestClassifier'>
section:
    Attributes
text:
    base_estimator_ : DecisionTreeClassifier
    The child estimator template used to create the collection of fitted
    sub-estimators.
param_name:
    base_estimator_
type_string:
    DecisionTreeClassifier

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'DecisionTreeRegressor', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.ensemble._forest.RandomForestRegressor'>
section:
    Attributes
text:
    base_estimator_ : DecisionTreeRegressor
    The child estimator template used to create the collection of fitted
    sub-estimators.
param_name:
    base_estimator_
type_string:
    DecisionTreeRegressor

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: '(n_samples, n_classes * (n_classes-1) / 2)', context follows
WARNING:skdoc:--------- context:
function:
    <function StackingClassifier.decision_function at 0x7f1ea4a114c0>
function_qualname:
    sklearn.ensemble.StackingClassifier.decision_function
group:
    ret
section:
    Returns
text:
    decisions : ndarray of shape (n_samples,), (n_samples, n_classes),             or (n_samples, n_classes * (n_classes-1) / 2)
    The decision function computed the final estimator.
param_name:
    decisions
type_string:
    ndarray ,             or (n_samples, n_classes * (n_classes-1) / 2)
enum_elts:
    ['ndarray', '(n_samples, n_classes * (n_classes-1) / 2)']

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:not wrapping property LowerName(Sklearn.Ensemble.StackingClassifier.named_estimators, sklearn.ensemble.StackingClassifier.named_estimators): <property object at 0x7f1ea62f5b30>
WARNING:skdoc:failed to parse type: 'dict of str -> obj', context follows
WARNING:skdoc:--------- context:
function:
    <function StackingClassifier.predict at 0x7f1ea4a11670>
function_qualname:
    sklearn.ensemble.StackingClassifier.predict
group:
    params
section:
    Parameters
text:
    **predict_params : dict of str -> obj
    Parameters to the `predict` called by the `final_estimator`. Note
    that this may be used to return uncertainties from some estimators
    with `return_std` or `return_cov`. Be aware that it will only
    accounts for uncertainty in the final estimator.
param_name:
    predict_params
type_string:
    dict of str -> obj

WARNING:skdoc:failed to parse type: 'keyword arguments', context follows
WARNING:skdoc:--------- context:
function:
    <function _BaseHeterogeneousEnsemble.set_params at 0x7f1ea62fa790>
function_qualname:
    sklearn.ensemble.StackingClassifier.set_params
group:
    params
section:
    Parameters
text:
    **params : keyword arguments
    Specific parameters using e.g.
    `set_params(parameter_name=new_value)`. In addition, to setting the
    parameters of the stacking estimator, the individual estimator of
    the stacking estimators can also be set, or can be removed by
    setting them to 'drop'.
param_name:
    params
type_string:
    keyword arguments

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:not wrapping property LowerName(Sklearn.Ensemble.StackingRegressor.named_estimators, sklearn.ensemble.StackingRegressor.named_estimators): <property object at 0x7f1ea62f5b30>
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:not wrapping property LowerName(Sklearn.Ensemble.VotingClassifier.named_estimators, sklearn.ensemble.VotingClassifier.named_estimators): <property object at 0x7f1ea62f5b30>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Ensemble.VotingClassifier.predict_proba, sklearn.ensemble.VotingClassifier.predict_proba): <property object at 0x7f1ea62df0e0>
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:not wrapping property LowerName(Sklearn.Ensemble.VotingRegressor.named_estimators, sklearn.ensemble.VotingRegressor.named_estimators): <property object at 0x7f1ea62f5b30>
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:no signature for constructor of sklearn.ensemble.partial_dependence.DTYPE, disabling ctor
WARNING:skdoc:doc_signature() raised an exception: list index out of range
WARNING:skdoc:no signature for float32.as_integer_ratio (<built-in method as_integer_ratio of numpy.float32 object at 0x7f1ea4a3b350>)
WARNING:skdoc:no signature for float32.conj (<built-in method conj of numpy.float32 object at 0x7f1ea4a3b350>)
WARNING:skdoc:no signature for float32.tobytes (<built-in method tobytes of numpy.float32 object at 0x7f1ea4a3b350>)
WARNING:skdoc:failed to parse type: 'ParallelBackendBase instance', context follows
WARNING:skdoc:--------- context:
function:
    <class 'joblib.parallel.Parallel'>
function_qualname:
    sklearn.ensemble.partial_dependence.Parallel.Parallel
group:
    params
section:
    Parameters
text:
    backend: str, ParallelBackendBase instance or None, default: 'loky'
    Specify the parallelization backend implementation.
    Supported backends are:
param_name:
    backend
type_string:
    str, ParallelBackendBase instance or None
enum_elts:
    ['str', 'ParallelBackendBase instance', 'None']

WARNING:skdoc:failed to parse type: '{'all', integer, or expression, as in '3*n_jobs'}', context follows
WARNING:skdoc:--------- context:
function:
    <class 'joblib.parallel.Parallel'>
function_qualname:
    sklearn.ensemble.partial_dependence.Parallel.Parallel
group:
    params
section:
    Parameters
text:
    pre_dispatch: {'all', integer, or expression, as in '3*n_jobs'}
    The number of batches (of tasks) to be pre-dispatched.
    Default is '2*n_jobs'. When batch_size="auto" this is reasonable
    default and the workers should never starve.
param_name:
    pre_dispatch
type_string:
    {'all', integer, or expression, as in '3*n_jobs'}

WARNING:skdoc:append: caught error building Class UpperName(Sklearn.Ensemble.Partial_dependence.Parallel, sklearn.ensemble.partial_dependence.Parallel): OutsideScope
WARNING:skdoc:failed to parse type: 'MaskedArray', context follows
WARNING:skdoc:--------- context:
function:
    <function mquantiles at 0x7f1eacde6670>
function_qualname:
    sklearn.ensemble.partial_dependence.mquantiles
group:
    ret
section:
    Returns
text:
    mquantiles : MaskedArray
    An array containing the calculated quantiles.
param_name:
    mquantiles
type_string:
    MaskedArray

WARNING:skdoc:failed to parse type: 'BaseGradientBoosting', context follows
WARNING:skdoc:--------- context:
function:
    <function partial_dependence at 0x7f1ea62e4670>
function_qualname:
    sklearn.ensemble.partial_dependence.partial_dependence
group:
    params
section:
    Parameters
text:
    gbrt : BaseGradientBoosting
    A fitted gradient boosting model.
param_name:
    gbrt
type_string:
    BaseGradientBoosting

WARNING:skdoc:failed to parse type: 'dtype=int', context follows
WARNING:skdoc:--------- context:
function:
    <function partial_dependence at 0x7f1ea62e4670>
function_qualname:
    sklearn.ensemble.partial_dependence.partial_dependence
group:
    params
section:
    Parameters
text:
    target_variables : array-like, dtype=int
    The target features for which the partial dependency should be
    computed (size should be smaller than 3 for visual renderings).
param_name:
    target_variables
type_string:
    array-like, dtype=int
enum_elts:
    ['array-like', 'dtype=int']

WARNING:skdoc:failed to parse type: '(low, high)', context follows
WARNING:skdoc:--------- context:
function:
    <function partial_dependence at 0x7f1ea62e4670>
function_qualname:
    sklearn.ensemble.partial_dependence.partial_dependence
group:
    params
section:
    Parameters
text:
    percentiles : (low, high), default=(0.05, 0.95)
    The lower and upper percentile used create the extreme values
    for the ``grid``. Only if ``X`` is not None.
param_name:
    percentiles
type_string:
    (low, high)

WARNING:skdoc:failed to parse type: 'seq of ndarray', context follows
WARNING:skdoc:--------- context:
function:
    <function partial_dependence at 0x7f1ea62e4670>
function_qualname:
    sklearn.ensemble.partial_dependence.partial_dependence
group:
    ret
section:
    Returns
text:
    axes : seq of ndarray or None
    The axes with which the grid has been created or None if
    the grid has been given.
param_name:
    axes
type_string:
    seq of ndarray or None
enum_elts:
    ['seq of ndarray', 'None']

WARNING:skdoc:failed to parse type: 'seq of ints, strings, or tuples of ints or strings', context follows
WARNING:skdoc:--------- context:
function:
    <function plot_partial_dependence at 0x7f1ea62e4790>
function_qualname:
    sklearn.ensemble.partial_dependence.plot_partial_dependence
group:
    params
section:
    Parameters
text:
    features : seq of ints, strings, or tuples of ints or strings
    If seq[i] is an int or a tuple with one int value, a one-way
    PDP is created; if seq[i] is a tuple of two ints, a two-way
    PDP is created.
    If feature_names is specified and seq[i] is an int, seq[i]
    must be < len(feature_names).
    If seq[i] is a string, feature_names must be specified, and
    seq[i] must be in feature_names.
param_name:
    features
type_string:
    seq of ints, strings, or tuples of ints or strings

WARNING:skdoc:failed to parse type: 'seq of str', context follows
WARNING:skdoc:--------- context:
function:
    <function plot_partial_dependence at 0x7f1ea62e4790>
function_qualname:
    sklearn.ensemble.partial_dependence.plot_partial_dependence
group:
    params
section:
    Parameters
text:
    feature_names : seq of str
    Name of each feature; feature_names[i] holds
    the name of the feature with index i.
param_name:
    feature_names
type_string:
    seq of str

WARNING:skdoc:failed to parse type: 'Matplotlib axis object', context follows
WARNING:skdoc:--------- context:
function:
    <function plot_partial_dependence at 0x7f1ea62e4790>
function_qualname:
    sklearn.ensemble.partial_dependence.plot_partial_dependence
group:
    params
section:
    Parameters
text:
    ax : Matplotlib axis object, default None
    An axis object onto which the plots will be drawn.
param_name:
    ax
type_string:
    Matplotlib axis object

WARNING:skdoc:failed to parse type: 'figure', context follows
WARNING:skdoc:--------- context:
function:
    <function plot_partial_dependence at 0x7f1ea62e4790>
function_qualname:
    sklearn.ensemble.partial_dependence.plot_partial_dependence
group:
    ret
section:
    Returns
text:
    fig : figure
    The Matplotlib Figure object.
param_name:
    fig
type_string:
    figure

WARNING:skdoc:failed to parse type: 'seq of Axis objects', context follows
WARNING:skdoc:--------- context:
function:
    <function plot_partial_dependence at 0x7f1ea62e4790>
function_qualname:
    sklearn.ensemble.partial_dependence.plot_partial_dependence
group:
    ret
section:
    Returns
text:
    axs : seq of Axis objects
    A seq of Axis objects, one for each subplot.
param_name:
    axs
type_string:
    seq of Axis objects

WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Ensemble.Partial_dependence.Np, sklearn.ensemble.partial_dependence.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Ensemble.Partial_dependence.Numbers, sklearn.ensemble.partial_dependence.numbers): OutsideScope
WARNING:skdoc:no signature for constructor of sklearn.exceptions.ChangedBehaviorWarning, disabling ctor
WARNING:skdoc:no signature for constructor of sklearn.exceptions.ConvergenceWarning, disabling ctor
WARNING:skdoc:no signature for constructor of sklearn.exceptions.DataConversionWarning, disabling ctor
WARNING:skdoc:no signature for constructor of sklearn.exceptions.DataDimensionalityWarning, disabling ctor
WARNING:skdoc:no signature for constructor of sklearn.exceptions.EfficiencyWarning, disabling ctor
WARNING:skdoc:no signature for constructor of sklearn.exceptions.FitFailedWarning, disabling ctor
WARNING:skdoc:no signature for constructor of sklearn.exceptions.NonBLASDotWarning, disabling ctor
WARNING:skdoc:no signature for constructor of sklearn.exceptions.NotFittedError, disabling ctor
WARNING:skdoc:no signature for constructor of sklearn.exceptions.PositiveSpectrumWarning, disabling ctor
WARNING:skdoc:no signature for constructor of sklearn.exceptions.SkipTestWarning, disabling ctor
WARNING:skdoc:no signature for constructor of sklearn.exceptions.UndefinedMetricWarning, disabling ctor
WARNING:skdoc:failed to parse type: 'Mapping', context follows
WARNING:skdoc:--------- context:
function:
    <bound method DictVectorizer.fit of DictVectorizer(dtype=<class 'numpy.float64'>, separator='=', sort=True,
                   sparse=True)>
function_qualname:
    sklearn.feature_extraction.DictVectorizer.fit
group:
    params
section:
    Parameters
text:
    X : Mapping or iterable over Mappings
    Dict(s) or Mapping(s) from feature names (arbitrary Python
    objects) to feature values (strings or convertible to dtype).
param_name:
    X
type_string:
    Mapping or iterable over Mappings
enum_elts:
    ['Mapping', 'iterable over Mappings']

WARNING:skdoc:failed to parse type: 'iterable over Mappings', context follows
WARNING:skdoc:--------- context:
function:
    <bound method DictVectorizer.fit of DictVectorizer(dtype=<class 'numpy.float64'>, separator='=', sort=True,
                   sparse=True)>
function_qualname:
    sklearn.feature_extraction.DictVectorizer.fit
group:
    params
section:
    Parameters
text:
    X : Mapping or iterable over Mappings
    Dict(s) or Mapping(s) from feature names (arbitrary Python
    objects) to feature values (strings or convertible to dtype).
param_name:
    X
type_string:
    Mapping or iterable over Mappings
enum_elts:
    ['Mapping', 'iterable over Mappings']

WARNING:skdoc:failed to parse type: 'list of dict_type objects', context follows
WARNING:skdoc:--------- context:
function:
    <bound method DictVectorizer.inverse_transform of DictVectorizer(dtype=<class 'numpy.float64'>, separator='=', sort=True,
                   sparse=True)>
function_qualname:
    sklearn.feature_extraction.DictVectorizer.inverse_transform
group:
    ret
section:
    Returns
text:
    D : list of dict_type objects, length = n_samples
    Feature mappings for the samples in X.
param_name:
    D
type_string:
    list of dict_type objects, length = n_samples
enum_elts:
    ['list of dict_type objects', 'length = n_samples']

WARNING:skdoc:failed to parse type: 'length = n_samples', context follows
WARNING:skdoc:--------- context:
function:
    <bound method DictVectorizer.inverse_transform of DictVectorizer(dtype=<class 'numpy.float64'>, separator='=', sort=True,
                   sparse=True)>
function_qualname:
    sklearn.feature_extraction.DictVectorizer.inverse_transform
group:
    ret
section:
    Returns
text:
    D : list of dict_type objects, length = n_samples
    Feature mappings for the samples in X.
param_name:
    D
type_string:
    list of dict_type objects, length = n_samples
enum_elts:
    ['list of dict_type objects', 'length = n_samples']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'Mapping or iterable over Mappings, length = n_samples', context follows
WARNING:skdoc:--------- context:
function:
    <bound method DictVectorizer.transform of DictVectorizer(dtype=<class 'numpy.float64'>, separator='=', sort=True,
                   sparse=True)>
function_qualname:
    sklearn.feature_extraction.DictVectorizer.transform
group:
    params
section:
    Parameters
text:
    X : Mapping or iterable over Mappings, length = n_samples
    Dict(s) or Mapping(s) from feature names (arbitrary Python
    objects) to feature values (strings or convertible to dtype).
param_name:
    X
type_string:
    Mapping or iterable over Mappings, length = n_samples

WARNING:skdoc:failed to parse type: 'numpy type', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.feature_extraction._hash.FeatureHasher'>
function_qualname:
    sklearn.feature_extraction.FeatureHasher.FeatureHasher
group:
    params
section:
    Parameters
text:
    dtype : numpy type, optional, default np.float64
    The type of feature values. Passed to scipy.sparse matrix constructors
    as the dtype argument. Do not set this to bool, np.boolean or any
    unsigned integer type.
param_name:
    dtype
type_string:
    numpy type

WARNING:skdoc:failed to parse type: 'FeatureHasher', context follows
WARNING:skdoc:--------- context:
function:
    <bound method FeatureHasher.fit of FeatureHasher(alternate_sign=True, dtype=<class 'numpy.float64'>,
                  input_type='dict', n_features=1048576)>
function_qualname:
    sklearn.feature_extraction.FeatureHasher.fit
group:
    ret
section:
    Returns
text:
    self : FeatureHasher
param_name:
    self
type_string:
    FeatureHasher

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'iterable over iterable over raw features', context follows
WARNING:skdoc:--------- context:
function:
    <bound method FeatureHasher.transform of FeatureHasher(alternate_sign=True, dtype=<class 'numpy.float64'>,
                  input_type='dict', n_features=1048576)>
function_qualname:
    sklearn.feature_extraction.FeatureHasher.transform
group:
    params
section:
    Parameters
text:
    raw_X : iterable over iterable over raw features, length = n_samples
    Samples. Each sample must be iterable an (e.g., a list or tuple)
    containing/generating feature names (and optionally values, see
    the input_type constructor argument) which will be hashed.
    raw_X need not support the len function, so it can be the result
    of a generator; n_samples is determined on the fly.
param_name:
    raw_X
type_string:
    iterable over iterable over raw features, length = n_samples
enum_elts:
    ['iterable over iterable over raw features', 'length = n_samples']

WARNING:skdoc:failed to parse type: 'ndarray of booleans', context follows
WARNING:skdoc:--------- context:
function:
    <function grid_to_graph at 0x7f1ea6ead8b0>
function_qualname:
    sklearn.feature_extraction.grid_to_graph
group:
    params
section:
    Parameters
text:
    mask : ndarray of booleans, optional
    An optional mask of the image, to consider only part of the
    pixels.
param_name:
    mask
type_string:
    ndarray of booleans

WARNING:skdoc:failed to parse type: 'np.ndarray', context follows
WARNING:skdoc:--------- context:
function:
    <function grid_to_graph at 0x7f1ea6ead8b0>
function_qualname:
    sklearn.feature_extraction.grid_to_graph
group:
    params
section:
    Parameters
text:
    return_as : np.ndarray or a sparse matrix class, optional
    The class to use to build the returned adjacency matrix.
param_name:
    return_as
type_string:
    np.ndarray or a sparse matrix class
enum_elts:
    ['np.ndarray', 'a sparse matrix class']

WARNING:skdoc:failed to parse type: 'a sparse matrix class', context follows
WARNING:skdoc:--------- context:
function:
    <function grid_to_graph at 0x7f1ea6ead8b0>
function_qualname:
    sklearn.feature_extraction.grid_to_graph
group:
    params
section:
    Parameters
text:
    return_as : np.ndarray or a sparse matrix class, optional
    The class to use to build the returned adjacency matrix.
param_name:
    return_as
type_string:
    np.ndarray or a sparse matrix class
enum_elts:
    ['np.ndarray', 'a sparse matrix class']

WARNING:skdoc:failed to parse type: '2D', context follows
WARNING:skdoc:--------- context:
function:
    <function img_to_graph at 0x7f1ea6ead820>
function_qualname:
    sklearn.feature_extraction.img_to_graph
group:
    params
section:
    Parameters
text:
    img : ndarray, 2D or 3D
    2D or 3D image
param_name:
    img
type_string:
    ndarray, 2D or 3D
enum_elts:
    ['ndarray', '2D', '3D']

WARNING:skdoc:failed to parse type: '3D', context follows
WARNING:skdoc:--------- context:
function:
    <function img_to_graph at 0x7f1ea6ead820>
function_qualname:
    sklearn.feature_extraction.img_to_graph
group:
    params
section:
    Parameters
text:
    img : ndarray, 2D or 3D
    2D or 3D image
param_name:
    img
type_string:
    ndarray, 2D or 3D
enum_elts:
    ['ndarray', '2D', '3D']

WARNING:skdoc:failed to parse type: 'tuple of ints (patch_height, patch_width)', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.feature_extraction.image.PatchExtractor'>
function_qualname:
    sklearn.feature_extraction.image.PatchExtractor.PatchExtractor
group:
    params
section:
    Parameters
text:
    patch_size : tuple of ints (patch_height, patch_width)
    the dimensions of one patch
param_name:
    patch_size
type_string:
    tuple of ints (patch_height, patch_width)

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'array or', context follows
WARNING:skdoc:--------- context:
function:
    <bound method PatchExtractor.transform of PatchExtractor(max_patches=None, patch_size=None, random_state=None)>
function_qualname:
    sklearn.feature_extraction.image.PatchExtractor.transform
group:
    params
section:
    Parameters
text:
    X : array, shape = (n_samples, image_height, image_width) or
    (n_samples, image_height, image_width, n_channels)
    Array of images from which to extract patches. For color images,
    the last dimension specifies the channel: a RGB image would have
    `n_channels=3`.
param_name:
    X
type_string:
    array or

WARNING:skdoc:failed to parse type: 'sequence of int', context follows
WARNING:skdoc:--------- context:
function:
    <function as_strided at 0x7f1ed3edfaf0>
function_qualname:
    sklearn.feature_extraction.image.as_strided
group:
    params
section:
    Parameters
text:
    shape : sequence of int, optional
    The shape of the new array. Defaults to ``x.shape``.
param_name:
    shape
type_string:
    sequence of int

WARNING:skdoc:failed to parse type: 'strided ndarray', context follows
WARNING:skdoc:--------- context:
function:
    <function extract_patches at 0x7f1ea6eadaf0>
function_qualname:
    sklearn.feature_extraction.image.extract_patches
group:
    ret
section:
    Returns
text:
    patches : strided ndarray
    2n-dimensional array indexing patches on first n dimensions and
    containing patches on the last n dimensions. These dimensions
    are fake, but this way no data is copied. A simple reshape invokes
    a copying operation to obtain a list of patches:
    result.reshape([-1] + list(patch_shape))
param_name:
    patches
type_string:
    strided ndarray

WARNING:skdoc:failed to parse type: 'tuple of ints (image_height, image_width) or', context follows
WARNING:skdoc:--------- context:
function:
    <function reconstruct_from_patches_2d at 0x7f1ea6eadc10>
function_qualname:
    sklearn.feature_extraction.image.reconstruct_from_patches_2d
group:
    params
section:
    Parameters
text:
    image_size : tuple of ints (image_height, image_width) or
    (image_height, image_width, n_channels)
    the size of the image that will be reconstructed
param_name:
    image_size
type_string:
    tuple of ints (image_height, image_width) or

WARNING:skdoc:failed to parse type: 'shape = image_size', context follows
WARNING:skdoc:--------- context:
function:
    <function reconstruct_from_patches_2d at 0x7f1ea6eadc10>
function_qualname:
    sklearn.feature_extraction.image.reconstruct_from_patches_2d
group:
    ret
section:
    Returns
text:
    image : array, shape = image_size
    the reconstructed image
param_name:
    image
type_string:
    array, shape = image_size
enum_elts:
    ['array', 'shape = image_size']

WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Feature_extraction.Image.Np, sklearn.feature_extraction.image.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Feature_extraction.Image.Numbers, sklearn.feature_extraction.image.numbers): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Feature_extraction.Image.Sparse, sklearn.feature_extraction.image.sparse): OutsideScope
WARNING:skdoc:failed to parse type: ''utf-8' by', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.feature_extraction.text.CountVectorizer'>
function_qualname:
    sklearn.feature_extraction.text.CountVectorizer.CountVectorizer
group:
    params
section:
    Parameters
text:
    encoding : string, 'utf-8' by default.
    If bytes or files are given to analyze, this encoding is used to
    decode.
param_name:
    encoding
type_string:
    string, 'utf-8' by
enum_elts:
    ['string', "'utf-8' by"]

WARNING:skdoc:failed to parse type: '{'word'', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.feature_extraction.text.CountVectorizer'>
function_qualname:
    sklearn.feature_extraction.text.CountVectorizer.CountVectorizer
group:
    params
section:
    Parameters
text:
    analyzer : string, {'word', 'char', 'char_wb'} or callable
    Whether the feature should be made of word n-gram or character
    n-grams.
    Option 'char_wb' creates character n-grams only from text inside
    word boundaries; n-grams at the edges of words are padded with space.
param_name:
    analyzer
type_string:
    string, {'word', 'char', 'char_wb'} or callable
enum_elts:
    ['string', "{'word'", "'char'", "'char_wb'}", 'callable']

WARNING:skdoc:failed to parse type: ''char_wb'}', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.feature_extraction.text.CountVectorizer'>
function_qualname:
    sklearn.feature_extraction.text.CountVectorizer.CountVectorizer
group:
    params
section:
    Parameters
text:
    analyzer : string, {'word', 'char', 'char_wb'} or callable
    Whether the feature should be made of word n-gram or character
    n-grams.
    Option 'char_wb' creates character n-grams only from text inside
    word boundaries; n-grams at the edges of words are padded with space.
param_name:
    analyzer
type_string:
    string, {'word', 'char', 'char_wb'} or callable
enum_elts:
    ['string', "{'word'", "'char'", "'char_wb'}", 'callable']

WARNING:skdoc:failed to parse type: 'set', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.feature_extraction.text.CountVectorizer'>
section:
    Attributes
text:
    stop_words_ : set
    Terms that were ignored because they either:
param_name:
    stop_words_
type_string:
    set

WARNING:skdoc:failed to parse type: 'len = n_samples', context follows
WARNING:skdoc:--------- context:
function:
    <bound method CountVectorizer.inverse_transform of CountVectorizer(analyzer='word', binary=False, decode_error='strict',
                    dtype=<class 'numpy.int64'>, encoding='utf-8', input='content',
                    lowercase=True, max_df=1.0, max_features=None, min_df=1,
                    ngram_range=(1, 1), preprocessor=None, stop_words=None,
                    strip_accents=None, token_pattern='(?u)\\b\\w\\w+\\b',
                    tokenizer=None, vocabulary=None)>
function_qualname:
    sklearn.feature_extraction.text.CountVectorizer.inverse_transform
group:
    ret
section:
    Returns
text:
    X_inv : list of arrays, len = n_samples
    List of arrays of terms.
param_name:
    X_inv
type_string:
    list of arrays, len = n_samples
enum_elts:
    ['list of arrays', 'len = n_samples']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'iterable over raw text documents', context follows
WARNING:skdoc:--------- context:
function:
    <bound method HashingVectorizer.fit_transform of HashingVectorizer(alternate_sign=True, analyzer='word', binary=False,
                      decode_error='strict', dtype=<class 'numpy.float64'>,
                      encoding='utf-8', input='content', lowercase=True,
                      n_features=1048576, ngram_range=(1, 1), norm='l2',
                      preprocessor=None, stop_words=None, strip_accents=None,
                      token_pattern='(?u)\\b\\w\\w+\\b', tokenizer=None)>
function_qualname:
    sklearn.feature_extraction.text.HashingVectorizer.fit_transform
group:
    params
section:
    Parameters
text:
    X : iterable over raw text documents, length = n_samples
    Samples. Each sample must be a text document (either bytes or
    unicode strings, file name or file object depending on the
    constructor argument) which will be tokenized and hashed.
param_name:
    X
type_string:
    iterable over raw text documents, length = n_samples
enum_elts:
    ['iterable over raw text documents', 'length = n_samples']

WARNING:skdoc:failed to parse type: 'any', context follows
WARNING:skdoc:--------- context:
function:
    <bound method HashingVectorizer.fit_transform of HashingVectorizer(alternate_sign=True, analyzer='word', binary=False,
                      decode_error='strict', dtype=<class 'numpy.float64'>,
                      encoding='utf-8', input='content', lowercase=True,
                      n_features=1048576, ngram_range=(1, 1), norm='l2',
                      preprocessor=None, stop_words=None, strip_accents=None,
                      token_pattern='(?u)\\b\\w\\w+\\b', tokenizer=None)>
function_qualname:
    sklearn.feature_extraction.text.HashingVectorizer.fit_transform
group:
    params
section:
    Parameters
text:
    y : any
    Ignored. This parameter exists only for compatibility with
    sklearn.pipeline.Pipeline.
param_name:
    y
type_string:
    any

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:append: caught error building Class UpperName(Sklearn.Feature_extraction.Text.VectorizerMixin, sklearn.feature_extraction.text.VectorizerMixin): Deprecated
WARNING:skdoc:doc_sig: could not parse synthetic sig for itemgetter: 'def __dummy_f_doc_sig(item, ...): pass' (def __dummy_f_doc_sig(item, ...): pass)
WARNING:skdoc:no signature for constructor of sklearn.feature_extraction.text.itemgetter, disabling ctor
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Feature_extraction.Text.Array, sklearn.feature_extraction.text.array): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Feature_extraction.Text.Np, sklearn.feature_extraction.text.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Feature_extraction.Text.Numbers, sklearn.feature_extraction.text.numbers): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Feature_extraction.Text.Re, sklearn.feature_extraction.text.re): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Feature_extraction.Text.Sp, sklearn.feature_extraction.text.sp): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Feature_extraction.Text.Unicodedata, sklearn.feature_extraction.text.unicodedata): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Feature_extraction.Text.Warnings, sklearn.feature_extraction.text.warnings): OutsideScope
WARNING:skdoc:failed to parse type: 'int depending on the feature selection mode', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.feature_selection._univariate_selection.GenericUnivariateSelect'>
function_qualname:
    sklearn.feature_selection.GenericUnivariateSelect.GenericUnivariateSelect
group:
    params
section:
    Parameters
text:
    param : float or int depending on the feature selection mode
    Parameter of the corresponding mode.
param_name:
    param
type_string:
    float or int depending on the feature selection mode
enum_elts:
    ['float', 'int depending on the feature selection mode']

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.feature_selection.GenericUnivariateSelect.score_func, arg 1 != self: (X, y)
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.feature_selection.SelectFdr.score_func, arg 1 != self: (X, y)
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.feature_selection.SelectFpr.score_func, arg 1 != self: (X, y)
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'non-zero int', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.feature_selection._from_model.SelectFromModel'>
function_qualname:
    sklearn.feature_selection.SelectFromModel.SelectFromModel
group:
    params
section:
    Parameters
text:
    norm_order : non-zero int, inf, -inf, default 1
    Order of the norm used to filter the vectors of coefficients below
    ``threshold`` in the case where the ``coef_`` attribute of the
    estimator is of dimension 2.
param_name:
    norm_order
type_string:
    non-zero int, inf, -inf
enum_elts:
    ['non-zero int', 'inf', '-inf']

WARNING:skdoc:failed to parse type: 'inf', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.feature_selection._from_model.SelectFromModel'>
function_qualname:
    sklearn.feature_selection.SelectFromModel.SelectFromModel
group:
    params
section:
    Parameters
text:
    norm_order : non-zero int, inf, -inf, default 1
    Order of the norm used to filter the vectors of coefficients below
    ``threshold`` in the case where the ``coef_`` attribute of the
    estimator is of dimension 2.
param_name:
    norm_order
type_string:
    non-zero int, inf, -inf
enum_elts:
    ['non-zero int', 'inf', '-inf']

WARNING:skdoc:failed to parse type: '-inf', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.feature_selection._from_model.SelectFromModel'>
function_qualname:
    sklearn.feature_selection.SelectFromModel.SelectFromModel
group:
    params
section:
    Parameters
text:
    norm_order : non-zero int, inf, -inf, default 1
    Order of the norm used to filter the vectors of coefficients below
    ``threshold`` in the case where the ``coef_`` attribute of the
    estimator is of dimension 2.
param_name:
    norm_order
type_string:
    non-zero int, inf, -inf
enum_elts:
    ['non-zero int', 'inf', '-inf']

WARNING:skdoc:failed to parse type: 'an estimator', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.feature_selection._from_model.SelectFromModel'>
section:
    Attributes
text:
    estimator_ : an estimator
    The base estimator from which the transformer is built.
    This is stored only when a non-fitted estimator is passed to the
    ``SelectFromModel``, i.e when prefit is False.
param_name:
    estimator_
type_string:
    an estimator

WARNING:skdoc:failed to parse type: 'Other estimator specific parameters', context follows
WARNING:skdoc:--------- context:
function:
    <function SelectFromModel.fit at 0x7f1ea6043ca0>
function_qualname:
    sklearn.feature_selection.SelectFromModel.fit
group:
    params
section:
    Parameters
text:
    **fit_params : Other estimator specific parameters
param_name:
    fit_params
type_string:
    Other estimator specific parameters

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.feature_selection.SelectFwe.score_func, arg 1 != self: (X, y)
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.feature_selection.SelectKBest.score_func, arg 1 != self: (X, y)
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.feature_selection.SelectPercentile.score_func, arg 1 != self: (X, y)
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding *args : Enum([Arr(ArrayLike), SparsePyList()]) to have type List(PyObject())
WARNING:skdoc:failed to parse type: 'kernel object', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.gaussian_process._gpc.GaussianProcessClassifier'>
function_qualname:
    sklearn.gaussian_process.GaussianProcessClassifier.GaussianProcessClassifier
group:
    params
section:
    Parameters
text:
    kernel : kernel object
    The kernel specifying the covariance function of the GP. If None is
    passed, the kernel "1.0 * RBF(1.0)" is used as default. Note that
    the kernel's hyperparameters are optimized during fitting.
param_name:
    kernel
type_string:
    kernel object

WARNING:skdoc:failed to parse type: 'sequence', context follows
WARNING:skdoc:--------- context:
function:
    <bound method GaussianProcessClassifier.fit of GaussianProcessClassifier(copy_X_train=True, kernel=None, max_iter_predict=100,
                              multi_class='one_vs_rest', n_jobs=None,
                              n_restarts_optimizer=0, optimizer='fmin_l_bfgs_b',
                              random_state=None, warm_start=False)>
function_qualname:
    sklearn.gaussian_process.GaussianProcessClassifier.fit
group:
    params
section:
    Parameters
text:
    X : sequence of length n_samples
    Feature vectors or other representations of training data.
    Could either be array-like with shape = (n_samples, n_features)
    or a list of objects.
param_name:
    X
type_string:
    sequence

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.gaussian_process.kernels.ABCMeta.register, arg 1 != self: (cls, subclass)
WARNING:skdoc:append: caught error building Class UpperName(Sklearn.Gaussian_process.Kernels.ABCMeta, sklearn.gaussian_process.kernels.ABCMeta): OutsideScope
WARNING:skdoc:failed to parse type: 'list of Kernel objects', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.gaussian_process.kernels.CompoundKernel'>
function_qualname:
    sklearn.gaussian_process.kernels.CompoundKernel.CompoundKernel
group:
    params
section:
    Parameters
text:
    kernels : list of Kernel objects
    The other kernels
param_name:
    kernels
type_string:
    list of Kernel objects

WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.CompoundKernel.bounds, sklearn.gaussian_process.kernels.CompoundKernel.bounds): <property object at 0x7f1ea6067f90>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.CompoundKernel.hyperparameters, sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters): <property object at 0x7f1ea6067c70>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.CompoundKernel.n_dims, sklearn.gaussian_process.kernels.CompoundKernel.n_dims): <property object at 0x7f1ea6067c20>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.CompoundKernel.requires_vector_input, sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input): <property object at 0x7f1ea606d090>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.CompoundKernel.theta, sklearn.gaussian_process.kernels.CompoundKernel.theta): <property object at 0x7f1ea606d040>
WARNING:skdoc:failed to parse type: 'Kernel object', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.gaussian_process.kernels.Exponentiation'>
function_qualname:
    sklearn.gaussian_process.kernels.Exponentiation.Exponentiation
group:
    params
section:
    Parameters
text:
    kernel : Kernel object
    The base kernel
param_name:
    kernel
type_string:
    Kernel object

WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.Exponentiation.bounds, sklearn.gaussian_process.kernels.Exponentiation.bounds): <property object at 0x7f1ea606d4a0>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.Exponentiation.hyperparameters, sklearn.gaussian_process.kernels.Exponentiation.hyperparameters): <property object at 0x7f1ea606d450>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.Exponentiation.n_dims, sklearn.gaussian_process.kernels.Exponentiation.n_dims): <property object at 0x7f1ea6067c20>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.Exponentiation.requires_vector_input, sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input): <property object at 0x7f1ea606d540>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.Exponentiation.theta, sklearn.gaussian_process.kernels.Exponentiation.theta): <property object at 0x7f1ea606d4f0>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.Kernel.bounds, sklearn.gaussian_process.kernels.Kernel.bounds): <property object at 0x7f1ea6067cc0>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.Kernel.hyperparameters, sklearn.gaussian_process.kernels.Kernel.hyperparameters): <property object at 0x7f1ea6067c70>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.Kernel.n_dims, sklearn.gaussian_process.kernels.Kernel.n_dims): <property object at 0x7f1ea6067c20>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.Kernel.requires_vector_input, sklearn.gaussian_process.kernels.Kernel.requires_vector_input): <property object at 0x7f1ea6067db0>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.Kernel.theta, sklearn.gaussian_process.kernels.Kernel.theta): <property object at 0x7f1ea6067d60>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.KernelOperator.bounds, sklearn.gaussian_process.kernels.KernelOperator.bounds): <property object at 0x7f1ea606d180>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.KernelOperator.hyperparameters, sklearn.gaussian_process.kernels.KernelOperator.hyperparameters): <property object at 0x7f1ea606d130>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.KernelOperator.n_dims, sklearn.gaussian_process.kernels.KernelOperator.n_dims): <property object at 0x7f1ea6067c20>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.KernelOperator.requires_vector_input, sklearn.gaussian_process.kernels.KernelOperator.requires_vector_input): <property object at 0x7f1ea606d220>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.KernelOperator.theta, sklearn.gaussian_process.kernels.KernelOperator.theta): <property object at 0x7f1ea606d1d0>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.Product.bounds, sklearn.gaussian_process.kernels.Product.bounds): <property object at 0x7f1ea606d180>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.Product.hyperparameters, sklearn.gaussian_process.kernels.Product.hyperparameters): <property object at 0x7f1ea606d130>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.Product.n_dims, sklearn.gaussian_process.kernels.Product.n_dims): <property object at 0x7f1ea6067c20>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.Product.requires_vector_input, sklearn.gaussian_process.kernels.Product.requires_vector_input): <property object at 0x7f1ea606d220>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.Product.theta, sklearn.gaussian_process.kernels.Product.theta): <property object at 0x7f1ea606d1d0>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.Sum.bounds, sklearn.gaussian_process.kernels.Sum.bounds): <property object at 0x7f1ea606d180>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.Sum.hyperparameters, sklearn.gaussian_process.kernels.Sum.hyperparameters): <property object at 0x7f1ea606d130>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.Sum.n_dims, sklearn.gaussian_process.kernels.Sum.n_dims): <property object at 0x7f1ea6067c20>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.Sum.requires_vector_input, sklearn.gaussian_process.kernels.Sum.requires_vector_input): <property object at 0x7f1ea606d220>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Gaussian_process.Kernels.Sum.theta, sklearn.gaussian_process.kernels.Sum.theta): <property object at 0x7f1ea606d1d0>
WARNING:skdoc:failed to parse type: 'tuple. Deprecated', context follows
WARNING:skdoc:--------- context:
function:
    <function cdist at 0x7f1eceb25f70>
function_qualname:
    sklearn.gaussian_process.kernels.cdist
group:
    params
section:
    Parameters
text:
    *args : tuple. Deprecated.
    Additional arguments should be passed as keyword arguments
param_name:
    args
type_string:
    tuple. Deprecated

WARNING:skdoc:overriding **kwargs=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'array_like of complex', context follows
WARNING:skdoc:--------- context:
function:
    <ufunc 'kv'>
function_qualname:
    sklearn.gaussian_process.kernels.kv
group:
    params
section:
    Parameters
text:
    z : array_like of complex
    Argument at which to evaluate the Bessel functions
param_name:
    z
type_string:
    array_like of complex

WARNING:skdoc:failed to parse type: 'otherwise', context follows
WARNING:skdoc:--------- context:
function:
    <function pairwise_kernels at 0x7f1eabe86310>
function_qualname:
    sklearn.gaussian_process.kernels.pairwise_kernels
group:
    params
section:
    Parameters
text:
    X : array [n_samples_a, n_samples_a] if metric == "precomputed", or,              [n_samples_a, n_features] otherwise
    Array of pairwise kernels between samples, or a feature array.
param_name:
    X
type_string:
    array  or otherwise
enum_elts:
    ['array', 'otherwise']

WARNING:skdoc:failed to parse type: 'keyword parameters', context follows
WARNING:skdoc:--------- context:
function:
    <function pairwise_kernels at 0x7f1eabe86310>
function_qualname:
    sklearn.gaussian_process.kernels.pairwise_kernels
group:
    params
section:
    Parameters
text:
    **kwds : optional keyword parameters
    Any further parameters are passed directly to the kernel function.
param_name:
    kwds
type_string:
    keyword parameters

WARNING:skdoc:overriding **kwargs=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Gaussian_process.Kernels.Math, sklearn.gaussian_process.kernels.math): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Gaussian_process.Kernels.Np, sklearn.gaussian_process.kernels.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Gaussian_process.Kernels.Warnings, sklearn.gaussian_process.kernels.warnings): OutsideScope
WARNING:skdoc:failed to parse type: 'np.nan', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.impute._knn.KNNImputer'>
function_qualname:
    sklearn.impute.KNNImputer.KNNImputer
group:
    params
section:
    Parameters
text:
    missing_values : number, string, np.nan or None, default=`np.nan`
    The placeholder for the missing values. All occurrences of
    `missing_values` will be imputed.
param_name:
    missing_values
type_string:
    number, string, np.nan or None
enum_elts:
    ['number', 'string', 'np.nan', 'None']

WARNING:skdoc:failed to parse type: ':class:`sklearn.impute.MissingIndicator`', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.impute._knn.KNNImputer'>
section:
    Attributes
text:
    indicator_ : :class:`sklearn.impute.MissingIndicator`
    Indicator used to add binary indicators for missing values.
    ``None`` if add_indicator is False.
param_name:
    indicator_
type_string:
    :class:`sklearn.impute.MissingIndicator`

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: '{ndarray', context follows
WARNING:skdoc:--------- context:
function:
    <bound method MissingIndicator.fit_transform of MissingIndicator(error_on_new=True, features='missing-only', missing_values=nan,
                     sparse='auto')>
function_qualname:
    sklearn.impute.MissingIndicator.fit_transform
group:
    ret
section:
    Returns
text:
    Xt : {ndarray or sparse matrix}, shape (n_samples, n_features)         or (n_samples, n_features_with_missing)
    The missing indicator for input data. The data type of ``Xt``
    will be boolean.
param_name:
    Xt
type_string:
    {ndarray or sparse matrix}
enum_elts:
    ['{ndarray', 'sparse matrix}']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'SimpleImputer', context follows
WARNING:skdoc:--------- context:
function:
    <bound method SimpleImputer.fit of SimpleImputer(add_indicator=False, copy=True, fill_value=None,
                  missing_values=nan, strategy='mean', verbose=0)>
function_qualname:
    sklearn.impute.SimpleImputer.fit
group:
    ret
section:
    Returns
text:
    self : SimpleImputer
param_name:
    self
type_string:
    SimpleImputer

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'list of (int,)', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.inspection._partial_dependence.PartialDependenceDisplay'>
function_qualname:
    sklearn.inspection.PartialDependenceDisplay.PartialDependenceDisplay
group:
    params
section:
    Parameters
text:
    features : list of (int,) or list of (int, int)
    Indices of features for a given plot. A tuple of one integer will plot
    a partial dependence curve of one feature. A tuple of two integers will
    plot a two-way partial dependence curve as a contour plot.
param_name:
    features
type_string:
    list of (int,) or list of (int, int)
enum_elts:
    ['list of (int,)', 'list of (int, int)']

WARNING:skdoc:failed to parse type: 'matplotlib Axes', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.inspection._partial_dependence.PartialDependenceDisplay'>
section:
    Attributes
text:
    bounding_ax_ : matplotlib Axes or None
    If `ax` is an axes or None, the `bounding_ax_` is the axes where the
    grid of partial dependence plots are drawn. If `ax` is a list of axes
    or a numpy array of axes, `bounding_ax_` is None.
param_name:
    bounding_ax_
type_string:
    matplotlib Axes or None
enum_elts:
    ['matplotlib Axes', 'None']

WARNING:skdoc:failed to parse type: 'ndarray of matplotlib Axes', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.inspection._partial_dependence.PartialDependenceDisplay'>
section:
    Attributes
text:
    axes_ : ndarray of matplotlib Axes
    If `ax` is an axes or None, `axes_[i, j]` is the axes on the i-th row
    and j-th column. If `ax` is a list of axes, `axes_[i]` is the i-th item
    in `ax`. Elements that are None corresponds to a nonexisting axes in
    that position.
param_name:
    axes_
type_string:
    ndarray of matplotlib Axes

WARNING:skdoc:failed to parse type: 'ndarray of matplotlib Artists', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.inspection._partial_dependence.PartialDependenceDisplay'>
section:
    Attributes
text:
    lines_ : ndarray of matplotlib Artists
    If `ax` is an axes or None, `line_[i, j]` is the partial dependence
    curve on the i-th row and j-th column. If `ax` is a list of axes,
    `lines_[i]` is the partial dependence curve corresponding to the i-th
    item in `ax`. Elements that are None corresponds to a nonexisting axes
    or an axes that does not include a line plot.
param_name:
    lines_
type_string:
    ndarray of matplotlib Artists

WARNING:skdoc:failed to parse type: 'matplotlib Figure', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.inspection._partial_dependence.PartialDependenceDisplay'>
section:
    Attributes
text:
    figure_ : matplotlib Figure
    Figure containing partial dependence plots.
param_name:
    figure_
type_string:
    matplotlib Figure

WARNING:skdoc:failed to parse type: 'Matplotlib axes', context follows
WARNING:skdoc:--------- context:
function:
    <function PartialDependenceDisplay.plot at 0x7f1ea50848b0>
function_qualname:
    sklearn.inspection.PartialDependenceDisplay.plot
group:
    params
section:
    Parameters
text:
    ax : Matplotlib axes or array-like of Matplotlib axes, default=None
    - If a single axis is passed in, it is treated as a bounding axes
    and a grid of partial dependence plots will be drawn within
    these bounds. The `n_cols` parameter controls the number of
    columns in the grid.
param_name:
    ax
type_string:
    Matplotlib axes or array-like of Matplotlib axes
enum_elts:
    ['Matplotlib axes', 'array-like of Matplotlib axes']

WARNING:skdoc:failed to parse type: 'array-like of Matplotlib axes', context follows
WARNING:skdoc:--------- context:
function:
    <function PartialDependenceDisplay.plot at 0x7f1ea50848b0>
function_qualname:
    sklearn.inspection.PartialDependenceDisplay.plot
group:
    params
section:
    Parameters
text:
    ax : Matplotlib axes or array-like of Matplotlib axes, default=None
    - If a single axis is passed in, it is treated as a bounding axes
    and a grid of partial dependence plots will be drawn within
    these bounds. The `n_cols` parameter controls the number of
    columns in the grid.
param_name:
    ax
type_string:
    Matplotlib axes or array-like of Matplotlib axes
enum_elts:
    ['Matplotlib axes', 'array-like of Matplotlib axes']

WARNING:skdoc:failed to parse type: ':class:`~sklearn.inspection.PartialDependenceDisplay`', context follows
WARNING:skdoc:--------- context:
function:
    <function PartialDependenceDisplay.plot at 0x7f1ea50848b0>
function_qualname:
    sklearn.inspection.PartialDependenceDisplay.plot
group:
    ret
section:
    Returns
text:
    display: :class:`~sklearn.inspection.PartialDependenceDisplay`
param_name:
    display
type_string:
    :class:`~sklearn.inspection.PartialDependenceDisplay`

WARNING:skdoc:failed to parse type: 'dataframe}', context follows
WARNING:skdoc:--------- context:
function:
    <function partial_dependence at 0x7f1ea5084670>
function_qualname:
    sklearn.inspection.partial_dependence
group:
    params
section:
    Parameters
text:
    X : {array-like or dataframe} of shape (n_samples, n_features)
    ``X`` is used both to generate a grid of values for the
    ``features``, and to compute the averaged predictions when
    method is 'brute'.
param_name:
    X
type_string:
    {array-like or dataframe}
enum_elts:
    ['{array-like', 'dataframe}']

WARNING:skdoc:failed to parse type: 'array-like of {int', context follows
WARNING:skdoc:--------- context:
function:
    <function partial_dependence at 0x7f1ea5084670>
function_qualname:
    sklearn.inspection.partial_dependence
group:
    params
section:
    Parameters
text:
    features : array-like of {int, str}
    The feature (e.g. `[0]`) or pair of interacting features
    (e.g. `[(0, 1)]`) for which the partial dependency should be computed.
param_name:
    features
type_string:
    array-like of {int, str}
enum_elts:
    ['array-like of {int', 'str}']

WARNING:skdoc:failed to parse type: 'str}', context follows
WARNING:skdoc:--------- context:
function:
    <function partial_dependence at 0x7f1ea5084670>
function_qualname:
    sklearn.inspection.partial_dependence
group:
    params
section:
    Parameters
text:
    features : array-like of {int, str}
    The feature (e.g. `[0]`) or pair of interacting features
    (e.g. `[(0, 1)]`) for which the partial dependency should be computed.
param_name:
    features
type_string:
    array-like of {int, str}
enum_elts:
    ['array-like of {int', 'str}']

WARNING:skdoc:failed to parse type: 'tuple of float', context follows
WARNING:skdoc:--------- context:
function:
    <function partial_dependence at 0x7f1ea5084670>
function_qualname:
    sklearn.inspection.partial_dependence
group:
    params
section:
    Parameters
text:
    percentiles : tuple of float, optional (default=(0.05, 0.95))
    The lower and upper percentile used to create the extreme values
    for the grid. Must be in [0, 1].
param_name:
    percentiles
type_string:
    tuple of float

WARNING:skdoc:failed to parse type: 'seq of 1d ndarrays', context follows
WARNING:skdoc:--------- context:
function:
    <function partial_dependence at 0x7f1ea5084670>
function_qualname:
    sklearn.inspection.partial_dependence
group:
    ret
section:
    Returns
text:
    values : seq of 1d ndarrays
    The values with which the grid has been created. The generated grid
    is a cartesian product of the arrays in ``values``. ``len(values) ==
    len(features)``. The size of each array ``values[j]`` is either
    ``grid_resolution``, or the number of unique values in ``X[:, j]``,
    whichever is smaller.
param_name:
    values
type_string:
    seq of 1d ndarrays

WARNING:skdoc:failed to parse type: 'list of {int', context follows
WARNING:skdoc:--------- context:
function:
    <function plot_partial_dependence at 0x7f1ea5084700>
function_qualname:
    sklearn.inspection.plot_partial_dependence
group:
    params
section:
    Parameters
text:
    features : list of {int, str, pair of int, pair of str}
    The target features for which to create the PDPs.
    If features[i] is an int or a string, a one-way PDP is created; if
    features[i] is a tuple, a two-way PDP is created. Each tuple must be
    of size 2.
    if any entry is a string, then it must be in ``feature_names``.
param_name:
    features
type_string:
    list of {int, str, pair of int, pair of str}
enum_elts:
    ['list of {int', 'str', 'pair of int', 'pair of str}']

WARNING:skdoc:failed to parse type: 'pair of int', context follows
WARNING:skdoc:--------- context:
function:
    <function plot_partial_dependence at 0x7f1ea5084700>
function_qualname:
    sklearn.inspection.plot_partial_dependence
group:
    params
section:
    Parameters
text:
    features : list of {int, str, pair of int, pair of str}
    The target features for which to create the PDPs.
    If features[i] is an int or a string, a one-way PDP is created; if
    features[i] is a tuple, a two-way PDP is created. Each tuple must be
    of size 2.
    if any entry is a string, then it must be in ``feature_names``.
param_name:
    features
type_string:
    list of {int, str, pair of int, pair of str}
enum_elts:
    ['list of {int', 'str', 'pair of int', 'pair of str}']

WARNING:skdoc:failed to parse type: 'pair of str}', context follows
WARNING:skdoc:--------- context:
function:
    <function plot_partial_dependence at 0x7f1ea5084700>
function_qualname:
    sklearn.inspection.plot_partial_dependence
group:
    params
section:
    Parameters
text:
    features : list of {int, str, pair of int, pair of str}
    The target features for which to create the PDPs.
    If features[i] is an int or a string, a one-way PDP is created; if
    features[i] is a tuple, a two-way PDP is created. Each tuple must be
    of size 2.
    if any entry is a string, then it must be in ``feature_names``.
param_name:
    features
type_string:
    list of {int, str, pair of int, pair of str}
enum_elts:
    ['list of {int', 'str', 'pair of int', 'pair of str}']

WARNING:skdoc:failed to parse type: 'dtype=str', context follows
WARNING:skdoc:--------- context:
function:
    <function plot_partial_dependence at 0x7f1ea5084700>
function_qualname:
    sklearn.inspection.plot_partial_dependence
group:
    params
section:
    Parameters
text:
    feature_names : array-like of shape (n_features,), dtype=str, default=None
    Name of each feature; feature_names[i] holds the name of the feature
    with index i.
    By default, the name of the feature corresponds to their numerical
    index for NumPy array and their column name for pandas dataframe.
param_name:
    feature_names
type_string:
    array-like , dtype=str
enum_elts:
    ['array-like', 'dtype=str']

WARNING:skdoc:failed to parse type: 'Matplotlib figure object', context follows
WARNING:skdoc:--------- context:
function:
    <function plot_partial_dependence at 0x7f1ea5084700>
function_qualname:
    sklearn.inspection.plot_partial_dependence
group:
    params
section:
    Parameters
text:
    fig : Matplotlib figure object, optional (default=None)
    A figure object onto which the plots will be drawn, after the figure
    has been cleared. By default, a new one is created.
param_name:
    fig
type_string:
    Matplotlib figure object

WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Inspection.Warnings, sklearn.inspection.warnings): OutsideScope
WARNING:skdoc:no type string found for 'y_min' in 'optional, default: None', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.isotonic.IsotonicRegression'>
function_qualname:
    sklearn.isotonic.IsotonicRegression.IsotonicRegression
group:
    params
section:
    Parameters

WARNING:skdoc:no type string found for 'y_max' in 'optional, default: None', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.isotonic.IsotonicRegression'>
function_qualname:
    sklearn.isotonic.IsotonicRegression.IsotonicRegression
group:
    params
section:
    Parameters

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding *arrays : Enum([Arr(ArrayLike), UnknownType(tuple of input objects)]) to have type List(PyObject())
WARNING:skdoc:failed to parse type: 'iterable of floats', context follows
WARNING:skdoc:--------- context:
function:
    <function isotonic_regression at 0x7f1ea86934c0>
function_qualname:
    sklearn.isotonic.isotonic_regression
group:
    params
section:
    Parameters
text:
    y : iterable of floats
    The data.
param_name:
    y
type_string:
    iterable of floats

WARNING:skdoc:no type string found for 'y_min' in 'optional, default: None', context follows
WARNING:skdoc:--------- context:
function:
    <function isotonic_regression at 0x7f1ea86934c0>
function_qualname:
    sklearn.isotonic.isotonic_regression
group:
    params
section:
    Parameters

WARNING:skdoc:no type string found for 'y_max' in 'optional, default: None', context follows
WARNING:skdoc:--------- context:
function:
    <function isotonic_regression at 0x7f1ea86934c0>
function_qualname:
    sklearn.isotonic.isotonic_regression
group:
    params
section:
    Parameters

WARNING:skdoc:failed to parse type: 'ndarray (2-D square)', context follows
WARNING:skdoc:--------- context:
function:
    <function spearmanr at 0x7f1eacdf9b80>
function_qualname:
    sklearn.isotonic.spearmanr
group:
    ret
section:
    Returns
text:
    correlation : float or ndarray (2-D square)
    Spearman correlation matrix or correlation coefficient (if only 2
    variables are given as parameters. Correlation matrix is square with
    length equal to total number of variables (columns or rows) in ``a``
    and ``b`` combined.
param_name:
    correlation
type_string:
    float or ndarray (2-D square)
enum_elts:
    ['float', 'ndarray (2-D square)']

WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Isotonic.Interpolate, sklearn.isotonic.interpolate): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Isotonic.Math, sklearn.isotonic.math): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Isotonic.Np, sklearn.isotonic.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Isotonic.Warnings, sklearn.isotonic.warnings): OutsideScope
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Kernel_approximation.Np, sklearn.kernel_approximation.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Kernel_approximation.Sp, sklearn.kernel_approximation.sp): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Kernel_approximation.Warnings, sklearn.kernel_approximation.warnings): OutsideScope
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Kernel_ridge.Np, sklearn.kernel_ridge.np): OutsideScope
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: '{array-like}', context follows
WARNING:skdoc:--------- context:
function:
    <function enet_path at 0x7f1eaa50ec10>
function_qualname:
    sklearn.linear_model.ElasticNet.path
group:
    params
section:
    Parameters
text:
    X : {array-like}, shape (n_samples, n_features)
    Training data. Pass directly as Fortran-contiguous data to avoid
    unnecessary memory duplication. If ``y`` is mono-output then ``X``
    can be sparse.
param_name:
    X
type_string:
    {array-like}

WARNING:skdoc:failed to parse type: 'kwargs', context follows
WARNING:skdoc:--------- context:
function:
    <function enet_path at 0x7f1eaa50ec10>
function_qualname:
    sklearn.linear_model.ElasticNet.path
group:
    params
section:
    Parameters
text:
    **params : kwargs
    Keyword arguments passed to the coordinate descent solver.
param_name:
    params
type_string:
    kwargs

WARNING:skdoc:ignoring method sklearn.linear_model.ElasticNet.path, arg 1 != self: (X, y, l1_ratio=0.5, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, check_input=True, **params)
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.linear_model.ElasticNetCV.path, arg 1 != self: (X, y, l1_ratio=0.5, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, check_input=True, **params)
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:no signature for constructor of sklearn.linear_model.Hinge, disabling ctor
WARNING:skdoc:no signature for Hinge.dloss (<built-in method dloss of sklearn.linear_model._sgd_fast.Hinge object at 0x7f1ea48516b0>)
WARNING:skdoc:no signature for constructor of sklearn.linear_model.Huber, disabling ctor
WARNING:skdoc:no signature for LossFunction.dloss (<method 'dloss' of 'sklearn.linear_model._sgd_fast.LossFunction' objects>)
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'list of n_targets such             arrays', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.linear_model._least_angle.Lars'>
section:
    Attributes
text:
    alphas_ : array-like of shape (n_alphas + 1,) | list of n_targets such             arrays
    Maximum of covariances (in absolute value) at each iteration.         ``n_alphas`` is either ``n_nonzero_coefs`` or ``n_features``,         whichever is smaller.
param_name:
    alphas_
type_string:
    array-like  | list of n_targets such             arrays
enum_elts:
    ['array-like', 'list of n_targets such             arrays']

WARNING:skdoc:failed to parse type: 'length = n_alphas', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.linear_model._least_angle.Lars'>
section:
    Attributes
text:
    active_ : list, length = n_alphas | list of n_targets such lists
    Indices of active variables at the end of the path.
param_name:
    active_
type_string:
    list, length = n_alphas | list of n_targets such lists
enum_elts:
    ['length = n_alphas', 'list of n_targets such lists']

WARNING:skdoc:failed to parse type: 'list of n_targets such lists', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.linear_model._least_angle.Lars'>
section:
    Attributes
text:
    active_ : list, length = n_alphas | list of n_targets such lists
    Indices of active variables at the end of the path.
param_name:
    active_
type_string:
    list, length = n_alphas | list of n_targets such lists
enum_elts:
    ['length = n_alphas', 'list of n_targets such lists']

WARNING:skdoc:failed to parse type: 'list of n_targets such arrays', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.linear_model._least_angle.Lars'>
section:
    Attributes
text:
    coef_path_ : array-like of shape (n_features, n_alphas + 1)         | list of n_targets such arrays
    The varying values of the coefficients along the path. It is not
    present if the ``fit_path`` parameter is ``False``.
param_name:
    coef_path_
type_string:
    array-like          | list of n_targets such arrays
enum_elts:
    ['array-like', 'list of n_targets such arrays']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.linear_model.Lasso.path, arg 1 != self: (X, y, l1_ratio=0.5, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, check_input=True, **params)
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.linear_model.LassoCV.path, arg 1 != self: (X, y, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, **params)
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:no signature for constructor of sklearn.linear_model.Log, disabling ctor
WARNING:skdoc:no signature for Log.dloss (<built-in method dloss of sklearn.linear_model._sgd_fast.Log object at 0x7f1ea47c8750>)
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: ''auto', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.linear_model._logistic.LogisticRegressionCV'>
function_qualname:
    sklearn.linear_model.LogisticRegressionCV.LogisticRegressionCV
group:
    params
section:
    Parameters
text:
    multi_class : {'auto, 'ovr', 'multinomial'}, default='auto'
    If the option chosen is 'ovr', then a binary problem is fit for each
    label. For 'multinomial' the loss minimised is the multinomial loss fit
    across the entire probability distribution, *even when the data is
    binary*. 'multinomial' is unavailable when solver='liblinear'.
    'auto' selects 'ovr' if the data is binary, or if solver='liblinear',
    and otherwise selects 'multinomial'.
param_name:
    multi_class
type_string:
    {'auto, 'ovr', 'multinomial'}
enum_elts:
    ["'auto", "'ovr'", "'multinomial'"]

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:no signature for constructor of sklearn.linear_model.ModifiedHuber, disabling ctor
WARNING:skdoc:no signature for ModifiedHuber.dloss (<built-in method dloss of sklearn.linear_model._sgd_fast.ModifiedHuber object at 0x7f1ea47c8f50>)
WARNING:skdoc:ignoring method sklearn.linear_model.MultiTaskElasticNet.path, arg 1 != self: (X, y, l1_ratio=0.5, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, check_input=True, **params)
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.linear_model.MultiTaskElasticNetCV.path, arg 1 != self: (X, y, l1_ratio=0.5, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, check_input=True, **params)
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.linear_model.MultiTaskLasso.path, arg 1 != self: (X, y, l1_ratio=0.5, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, check_input=True, **params)
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.linear_model.MultiTaskLassoCV.path, arg 1 != self: (X, y, eps=0.001, n_alphas=100, alphas=None, precompute='auto', Xy=None, copy_X=True, coef_init=None, verbose=False, return_n_iter=False, positive=False, **params)
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'dict, {class_label: weight} or "balanced" or None', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.linear_model._passive_aggressive.PassiveAggressiveClassifier'>
function_qualname:
    sklearn.linear_model.PassiveAggressiveClassifier.PassiveAggressiveClassifier
group:
    params
section:
    Parameters
text:
    class_weight : dict, {class_label: weight} or "balanced" or None, optional
    Preset for the class_weight fit parameter.
param_name:
    class_weight
type_string:
    dict, {class_label: weight} or "balanced" or None

WARNING:skdoc:overriding **kwargs=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.linear_model.PassiveAggressiveClassifier.shuffle, arg 1 != self: (*arrays, random_state=None, n_samples=None)
WARNING:skdoc:method LowerName(Sklearn.Linear_model.PassiveAggressiveClassifier.shuffle, sklearn.linear_model.PassiveAggressiveClassifier.shuffle) has complete override spec but there was an error wrapping it: True
WARNING:skdoc:overriding **kwargs=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.linear_model.PassiveAggressiveRegressor.shuffle, arg 1 != self: (*arrays, random_state=None, n_samples=None)
WARNING:skdoc:method LowerName(Sklearn.Linear_model.PassiveAggressiveRegressor.shuffle, sklearn.linear_model.PassiveAggressiveRegressor.shuffle) has complete override spec but there was an error wrapping it: True
WARNING:skdoc:failed to parse type: '{class_label: weight}', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.linear_model._perceptron.Perceptron'>
function_qualname:
    sklearn.linear_model.Perceptron.Perceptron
group:
    params
section:
    Parameters
text:
    class_weight : dict, {class_label: weight} or "balanced", default=None
    Preset for the class_weight fit parameter.
param_name:
    class_weight
type_string:
    dict, {class_label: weight} or "balanced"
enum_elts:
    ['dict', '{class_label: weight}', '"balanced"']

WARNING:skdoc:failed to parse type: 'Returns an instance of self', context follows
WARNING:skdoc:--------- context:
function:
    <bound method BaseSGDClassifier.fit of Perceptron(alpha=0.0001, class_weight=None, early_stopping=False, eta0=1.0,
               fit_intercept=True, max_iter=1000, n_iter_no_change=5, n_jobs=None,
               penalty=None, random_state=0, shuffle=True, tol=0.001,
               validation_fraction=0.1, verbose=0, warm_start=False)>
function_qualname:
    sklearn.linear_model.Perceptron.fit
group:
    ret
section:
    Returns
text:
    self :
    Returns an instance of self.
param_name:
    self
type_string:
    Returns an instance of self

WARNING:skdoc:overriding **kwargs=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.linear_model.Perceptron.shuffle, arg 1 != self: (*arrays, random_state=None, n_samples=None)
WARNING:skdoc:method LowerName(Sklearn.Linear_model.Perceptron.shuffle, sklearn.linear_model.Perceptron.shuffle) has complete override spec but there was an error wrapping it: True
WARNING:skdoc:failed to parse type: 'float ([0, 1])', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.linear_model._ransac.RANSACRegressor'>
function_qualname:
    sklearn.linear_model.RANSACRegressor.RANSACRegressor
group:
    params
section:
    Parameters
text:
    min_samples : int (>= 1) or float ([0, 1]), optional
    Minimum number of samples chosen randomly from original data. Treated
    as an absolute number of samples for `min_samples >= 1`, treated as a
    relative number `ceil(min_samples * X.shape[0]`) for
    `min_samples < 1`. This is typically chosen as the minimal number of
    samples necessary to estimate the given `base_estimator`. By default a
    ``sklearn.linear_model.LinearRegression()`` estimator is assumed and
    `min_samples` is chosen as ``X.shape[1] + 1``.
param_name:
    min_samples
type_string:
    int (>= 1) or float ([0, 1])
enum_elts:
    ['int', 'float ([0, 1])']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'ndarray  or', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.linear_model._ridge.RidgeCV'>
section:
    Attributes
text:
    cv_values_ : ndarray of shape (n_samples, n_alphas) or         shape (n_samples, n_targets, n_alphas), optional
    Cross-validation values for each alpha (if ``store_cv_values=True``        and ``cv=None``). After ``fit()`` has been called, this attribute         will contain the mean squared errors (by default) or the values         of the ``{loss,score}_func`` function (if provided in the constructor).
param_name:
    cv_values_
type_string:
    ndarray  or

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **kwargs=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.linear_model.SGDClassifier.shuffle, arg 1 != self: (*arrays, random_state=None, n_samples=None)
WARNING:skdoc:method LowerName(Sklearn.Linear_model.SGDClassifier.shuffle, sklearn.linear_model.SGDClassifier.shuffle) has complete override spec but there was an error wrapping it: True
WARNING:skdoc:overriding **kwargs=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.linear_model.SGDRegressor.shuffle, arg 1 != self: (*arrays, random_state=None, n_samples=None)
WARNING:skdoc:method LowerName(Sklearn.Linear_model.SGDRegressor.shuffle, sklearn.linear_model.SGDRegressor.shuffle) has complete override spec but there was an error wrapping it: True
WARNING:skdoc:no signature for constructor of sklearn.linear_model.SquaredLoss, disabling ctor
WARNING:skdoc:no signature for SquaredLoss.dloss (<built-in method dloss of sklearn.linear_model._sgd_fast.SquaredLoss object at 0x7f1ea470b090>)
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'LinearOperator', context follows
WARNING:skdoc:--------- context:
function:
    <function ridge_regression at 0x7f1ea9945430>
function_qualname:
    sklearn.linear_model.ridge_regression
group:
    params
section:
    Parameters
text:
    X : {ndarray, sparse matrix, LinearOperator} of shape         (n_samples, n_features)
    Training data
param_name:
    X
type_string:
    {ndarray, sparse matrix, LinearOperator}
enum_elts:
    ['ndarray', 'sparse matrix', 'LinearOperator']

WARNING:skdoc:failed to parse type: 'sklearn.neighbors.NearestNeighbors instance', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.manifold._isomap.Isomap'>
section:
    Attributes
text:
    nbrs_ : sklearn.neighbors.NearestNeighbors instance
    Stores nearest neighbors instance, including BallTree or KDtree
    if applicable.
param_name:
    nbrs_
type_string:
    sklearn.neighbors.NearestNeighbors instance

WARNING:skdoc:failed to parse type: 'sparse graph', context follows
WARNING:skdoc:--------- context:
function:
    <bound method Isomap.fit of Isomap(eigen_solver='auto', max_iter=None, metric='minkowski',
           metric_params=None, n_components=2, n_jobs=None, n_neighbors=5,
           neighbors_algorithm='auto', p=2, path_method='auto', tol=0)>
function_qualname:
    sklearn.manifold.Isomap.fit
group:
    params
section:
    Parameters
text:
    X : {array-like, sparse graph, BallTree, KDTree, NearestNeighbors}
    Sample data, shape = (n_samples, n_features), in the form of a
    numpy array, sparse graph, precomputed tree, or NearestNeighbors
    object.
param_name:
    X
type_string:
    {array-like, sparse graph, BallTree, KDTree, NearestNeighbors}
enum_elts:
    ['array-like', 'sparse graph', 'BallTree', 'KDTree', 'NearestNeighbors']

WARNING:skdoc:failed to parse type: 'BallTree', context follows
WARNING:skdoc:--------- context:
function:
    <bound method Isomap.fit of Isomap(eigen_solver='auto', max_iter=None, metric='minkowski',
           metric_params=None, n_components=2, n_jobs=None, n_neighbors=5,
           neighbors_algorithm='auto', p=2, path_method='auto', tol=0)>
function_qualname:
    sklearn.manifold.Isomap.fit
group:
    params
section:
    Parameters
text:
    X : {array-like, sparse graph, BallTree, KDTree, NearestNeighbors}
    Sample data, shape = (n_samples, n_features), in the form of a
    numpy array, sparse graph, precomputed tree, or NearestNeighbors
    object.
param_name:
    X
type_string:
    {array-like, sparse graph, BallTree, KDTree, NearestNeighbors}
enum_elts:
    ['array-like', 'sparse graph', 'BallTree', 'KDTree', 'NearestNeighbors']

WARNING:skdoc:failed to parse type: 'KDTree', context follows
WARNING:skdoc:--------- context:
function:
    <bound method Isomap.fit of Isomap(eigen_solver='auto', max_iter=None, metric='minkowski',
           metric_params=None, n_components=2, n_jobs=None, n_neighbors=5,
           neighbors_algorithm='auto', p=2, path_method='auto', tol=0)>
function_qualname:
    sklearn.manifold.Isomap.fit
group:
    params
section:
    Parameters
text:
    X : {array-like, sparse graph, BallTree, KDTree, NearestNeighbors}
    Sample data, shape = (n_samples, n_features), in the form of a
    numpy array, sparse graph, precomputed tree, or NearestNeighbors
    object.
param_name:
    X
type_string:
    {array-like, sparse graph, BallTree, KDTree, NearestNeighbors}
enum_elts:
    ['array-like', 'sparse graph', 'BallTree', 'KDTree', 'NearestNeighbors']

WARNING:skdoc:failed to parse type: 'NearestNeighbors', context follows
WARNING:skdoc:--------- context:
function:
    <bound method Isomap.fit of Isomap(eigen_solver='auto', max_iter=None, metric='minkowski',
           metric_params=None, n_components=2, n_jobs=None, n_neighbors=5,
           neighbors_algorithm='auto', p=2, path_method='auto', tol=0)>
function_qualname:
    sklearn.manifold.Isomap.fit
group:
    params
section:
    Parameters
text:
    X : {array-like, sparse graph, BallTree, KDTree, NearestNeighbors}
    Sample data, shape = (n_samples, n_features), in the form of a
    numpy array, sparse graph, precomputed tree, or NearestNeighbors
    object.
param_name:
    X
type_string:
    {array-like, sparse graph, BallTree, KDTree, NearestNeighbors}
enum_elts:
    ['array-like', 'sparse graph', 'BallTree', 'KDTree', 'NearestNeighbors']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'use arnoldi iteration in shift-invert mode', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.manifold._locally_linear.LocallyLinearEmbedding'>
function_qualname:
    sklearn.manifold.LocallyLinearEmbedding.LocallyLinearEmbedding
group:
    params
section:
    Parameters
text:
    arpack : use arnoldi iteration in shift-invert mode.
    For this method, M may be a dense matrix, sparse matrix,
    or general linear operator.
    Warning: ARPACK can be unstable for some problems.  It is
    best to try several random seeds in order to check results.
param_name:
    arpack
type_string:
    use arnoldi iteration in shift-invert mode

WARNING:skdoc:failed to parse type: 'use standard dense matrix operations for the eigenvalue', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.manifold._locally_linear.LocallyLinearEmbedding'>
function_qualname:
    sklearn.manifold.LocallyLinearEmbedding.LocallyLinearEmbedding
group:
    params
section:
    Parameters
text:
    dense  : use standard dense matrix operations for the eigenvalue
    decomposition.  For this method, M must be an array
    or matrix type.  This method should be avoided for
    large problems.
param_name:
    dense
type_string:
    use standard dense matrix operations for the eigenvalue

WARNING:skdoc:failed to parse type: 'string ('standard', 'hessian', 'modified' or 'ltsa')', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.manifold._locally_linear.LocallyLinearEmbedding'>
function_qualname:
    sklearn.manifold.LocallyLinearEmbedding.LocallyLinearEmbedding
group:
    params
section:
    Parameters
text:
    method : string ('standard', 'hessian', 'modified' or 'ltsa')
    standard : use the standard locally linear embedding algorithm.  see
    reference [1]
param_name:
    method
type_string:
    string ('standard', 'hessian', 'modified' or 'ltsa')

WARNING:skdoc:failed to parse type: 'use the Hessian eigenmap method. This method requires', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.manifold._locally_linear.LocallyLinearEmbedding'>
function_qualname:
    sklearn.manifold.LocallyLinearEmbedding.LocallyLinearEmbedding
group:
    params
section:
    Parameters
text:
    hessian  : use the Hessian eigenmap method. This method requires
    ``n_neighbors > n_components * (1 + (n_components + 1) / 2``
    see reference [2]
param_name:
    hessian
type_string:
    use the Hessian eigenmap method. This method requires

WARNING:skdoc:failed to parse type: 'use the modified locally linear embedding algorithm', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.manifold._locally_linear.LocallyLinearEmbedding'>
function_qualname:
    sklearn.manifold.LocallyLinearEmbedding.LocallyLinearEmbedding
group:
    params
section:
    Parameters
text:
    modified : use the modified locally linear embedding algorithm.
    see reference [3]
param_name:
    modified
type_string:
    use the modified locally linear embedding algorithm

WARNING:skdoc:failed to parse type: 'use local tangent space alignment algorithm', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.manifold._locally_linear.LocallyLinearEmbedding'>
function_qualname:
    sklearn.manifold.LocallyLinearEmbedding.LocallyLinearEmbedding
group:
    params
section:
    Parameters
text:
    ltsa     : use local tangent space alignment algorithm
    see reference [4]
param_name:
    ltsa
type_string:
    use local tangent space alignment algorithm

WARNING:skdoc:failed to parse type: 'NearestNeighbors object', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.manifold._locally_linear.LocallyLinearEmbedding'>
section:
    Attributes
text:
    nbrs_ : NearestNeighbors object
    Stores nearest neighbors instance, including BallTree or KDtree
    if applicable.
param_name:
    nbrs_
type_string:
    NearestNeighbors object

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'use the Hessian eigenmap method.  This method requires', context follows
WARNING:skdoc:--------- context:
function:
    <function locally_linear_embedding at 0x7f1ea8698af0>
function_qualname:
    sklearn.manifold.locally_linear_embedding
group:
    params
section:
    Parameters
text:
    hessian  : use the Hessian eigenmap method.  This method requires
    n_neighbors > n_components * (1 + (n_components + 1) / 2.
    see reference [2]_
param_name:
    hessian
type_string:
    use the Hessian eigenmap method.  This method requires

WARNING:skdoc:failed to parse type: 'matplotlib AxesImage', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay'>
section:
    Attributes
text:
    im_ : matplotlib AxesImage
    Image representing the confusion matrix.
param_name:
    im_
type_string:
    matplotlib AxesImage

WARNING:skdoc:failed to parse type: 'dtype=matplotlib Text', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay'>
section:
    Attributes
text:
    text_ : ndarray of shape (n_classes, n_classes), dtype=matplotlib Text,             or None
    Array of matplotlib axes. `None` if `include_values` is false.
param_name:
    text_
type_string:
    ndarray , dtype=matplotlib Text,             or None
enum_elts:
    ['ndarray', 'dtype=matplotlib Text', 'None']

WARNING:skdoc:failed to parse type: 'matplotlib Colormap', context follows
WARNING:skdoc:--------- context:
function:
    <function ConfusionMatrixDisplay.plot at 0x7f1eabe9a4c0>
function_qualname:
    sklearn.metrics.ConfusionMatrixDisplay.plot
group:
    params
section:
    Parameters
text:
    cmap : str or matplotlib Colormap, default='viridis'
    Colormap recognized by matplotlib.
param_name:
    cmap
type_string:
    str or matplotlib Colormap
enum_elts:
    ['str', 'matplotlib Colormap']

WARNING:skdoc:failed to parse type: 'matplotlib axes', context follows
WARNING:skdoc:--------- context:
function:
    <function ConfusionMatrixDisplay.plot at 0x7f1eabe9a4c0>
function_qualname:
    sklearn.metrics.ConfusionMatrixDisplay.plot
group:
    params
section:
    Parameters
text:
    ax : matplotlib axes, default=None
    Axes object to plot on. If `None`, a new figure and axes is
    created.
param_name:
    ax
type_string:
    matplotlib axes

WARNING:skdoc:failed to parse type: ':class:`~sklearn.metrics.ConfusionMatrixDisplay`', context follows
WARNING:skdoc:--------- context:
function:
    <function ConfusionMatrixDisplay.plot at 0x7f1eabe9a4c0>
function_qualname:
    sklearn.metrics.ConfusionMatrixDisplay.plot
group:
    ret
section:
    Returns
text:
    display : :class:`~sklearn.metrics.ConfusionMatrixDisplay`
param_name:
    display
type_string:
    :class:`~sklearn.metrics.ConfusionMatrixDisplay`

WARNING:skdoc:failed to parse type: 'matplotlib Artist', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.metrics._plot.precision_recall_curve.PrecisionRecallDisplay'>
section:
    Attributes
text:
    line_ : matplotlib Artist
    Precision recall curve.
param_name:
    line_
type_string:
    matplotlib Artist

WARNING:skdoc:failed to parse type: 'Matplotlib Axes', context follows
WARNING:skdoc:--------- context:
function:
    <function PrecisionRecallDisplay.plot at 0x7f1eabe9a280>
function_qualname:
    sklearn.metrics.PrecisionRecallDisplay.plot
group:
    params
section:
    Parameters
text:
    ax : Matplotlib Axes, default=None
    Axes object to plot on. If `None`, a new figure and axes is
    created.
param_name:
    ax
type_string:
    Matplotlib Axes

WARNING:skdoc:overriding **kwargs=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: ':class:`~sklearn.metrics.PrecisionRecallDisplay`', context follows
WARNING:skdoc:--------- context:
function:
    <function PrecisionRecallDisplay.plot at 0x7f1eabe9a280>
function_qualname:
    sklearn.metrics.PrecisionRecallDisplay.plot
group:
    ret
section:
    Returns
text:
    display : :class:`~sklearn.metrics.PrecisionRecallDisplay`
    Object that stores computed values.
param_name:
    display
type_string:
    :class:`~sklearn.metrics.PrecisionRecallDisplay`

WARNING:skdoc:failed to parse type: ':class:`~sklearn.metrics.plot.RocCurveDisplay`', context follows
WARNING:skdoc:--------- context:
function:
    <function RocCurveDisplay.plot at 0x7f1eabe9a040>
function_qualname:
    sklearn.metrics.RocCurveDisplay.plot
group:
    ret
section:
    Returns
text:
    display : :class:`~sklearn.metrics.plot.RocCurveDisplay`
    Object that stores computed values.
param_name:
    display
type_string:
    :class:`~sklearn.metrics.plot.RocCurveDisplay`

WARNING:skdoc:failed to parse type: 'estimator object implementing 'fit'', context follows
WARNING:skdoc:--------- context:
function:
    <function check_scoring at 0x7f1eabe8dca0>
function_qualname:
    sklearn.metrics.check_scoring
group:
    params
section:
    Parameters
text:
    estimator : estimator object implementing 'fit'
    The object to use to fit the data.
param_name:
    estimator
type_string:
    estimator object implementing 'fit'

WARNING:skdoc:failed to parse type: 'string / dict', context follows
WARNING:skdoc:--------- context:
function:
    <function classification_report at 0x7f1eabe6ac10>
function_qualname:
    sklearn.metrics.classification_report
group:
    ret
section:
    Returns
text:
    report : string / dict
    Text summary of the precision, recall, F1 score for each class.
    Dictionary returned if output_dict is True. Dictionary has the
    following structure::
param_name:
    report
type_string:
    string / dict

WARNING:skdoc:failed to parse type: '(rows, columns)', context follows
WARNING:skdoc:--------- context:
function:
    <function consensus_score at 0x7f1eabe869d0>
function_qualname:
    sklearn.metrics.consensus_score
group:
    params
section:
    Parameters
text:
    a : (rows, columns)
    Tuple of row and column indicators for a set of biclusters.
param_name:
    a
type_string:
    (rows, columns)

WARNING:skdoc:failed to parse type: 'additional arguments', context follows
WARNING:skdoc:--------- context:
function:
    <function make_scorer at 0x7f1eabe8ddc0>
function_qualname:
    sklearn.metrics.make_scorer
group:
    params
section:
    Parameters
text:
    **kwargs : additional arguments
    Additional parameters to be passed to score_func.
param_name:
    kwargs
type_string:
    additional arguments

WARNING:skdoc:overriding **kwargs=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: ':class:`~sklearn.metrics.RocCurveDisplay`', context follows
WARNING:skdoc:--------- context:
function:
    <function plot_roc_curve at 0x7f1eabe8de50>
function_qualname:
    sklearn.metrics.plot_roc_curve
group:
    ret
section:
    Returns
text:
    display : :class:`~sklearn.metrics.RocCurveDisplay`
    Object that stores computed values.
param_name:
    display
type_string:
    :class:`~sklearn.metrics.RocCurveDisplay`

WARNING:skdoc:failed to parse type: 'tuple or set, for internal use', context follows
WARNING:skdoc:--------- context:
function:
    <function precision_recall_fscore_support at 0x7f1eabe6a9d0>
function_qualname:
    sklearn.metrics.precision_recall_fscore_support
group:
    params
section:
    Parameters
text:
    warn_for : tuple or set, for internal use
    This determines which warnings will be made in the case that this
    function is being used to return only one of its metrics.
param_name:
    warn_for
type_string:
    tuple or set, for internal use

WARNING:skdoc:failed to parse type: 'float and <= 1', context follows
WARNING:skdoc:--------- context:
function:
    <function roc_auc_score at 0x7f1eac11c5e0>
function_qualname:
    sklearn.metrics.roc_auc_score
group:
    params
section:
    Parameters
text:
    max_fpr : float > 0 and <= 1, default=None
    If not ``None``, the standardized partial AUC [2]_ over the range
    [0, max_fpr] is returned. For the multiclass case, ``max_fpr``,
    should be either equal to ``None`` or ``1.0`` as AUC ROC partial
    computation currently is not supported for multiclass.
param_name:
    max_fpr
type_string:
    float > 0 and <= 1

WARNING:skdoc:failed to parse type: 'sparse', context follows
WARNING:skdoc:--------- context:
function:
    <function contingency_matrix at 0x7f1eabe6c3a0>
function_qualname:
    sklearn.metrics.cluster.contingency_matrix
group:
    ret
section:
    Returns
text:
    contingency : {array-like, sparse}, shape=[n_classes_true, n_classes_pred]
    Matrix :math:`C` such that :math:`C_{i, j}` is the number of samples in
    true class :math:`i` and in predicted class :math:`j`. If
    ``eps is None``, the dtype of this array will be integer. If ``eps`` is
    given, the dtype will be float.
    Will be a ``scipy.sparse.csr_matrix`` if ``sparse=True``.
param_name:
    contingency
type_string:
    {array-like, sparse}
enum_elts:
    ['array-like', 'sparse']

WARNING:skdoc:no signature for expected_mutual_information (<built-in function expected_mutual_information>)
WARNING:skdoc:append: caught error building Class UpperName(Sklearn.Metrics.Pairwise.Parallel, sklearn.metrics.pairwise.Parallel): OutsideScope
WARNING:skdoc:failed to parse type: '2-tuple', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'scipy.sparse.csr.csr_matrix'>
section:
    Attributes
text:
    shape : 2-tuple
    Shape of the matrix
param_name:
    shape
type_string:
    2-tuple

WARNING:skdoc:failed to parse type: '-2', context follows
WARNING:skdoc:--------- context:
function:
    <function _minmax_mixin.argmax at 0x7f1eb1441790>
function_qualname:
    sklearn.metrics.pairwise.csr_matrix.argmax
group:
    params
section:
    Parameters
text:
    axis : {-2, -1, 0, 1, None}, optional
    Axis along which the argmax is computed. If None (default), index
    of the maximum element in the flatten data is returned.
param_name:
    axis
type_string:
    {-2, -1, 0, 1, None}
enum_elts:
    ['-2', '-1', '0', '1', 'None']

WARNING:skdoc:failed to parse type: '-1', context follows
WARNING:skdoc:--------- context:
function:
    <function _minmax_mixin.argmax at 0x7f1eb1441790>
function_qualname:
    sklearn.metrics.pairwise.csr_matrix.argmax
group:
    params
section:
    Parameters
text:
    axis : {-2, -1, 0, 1, None}, optional
    Axis along which the argmax is computed. If None (default), index
    of the maximum element in the flatten data is returned.
param_name:
    axis
type_string:
    {-2, -1, 0, 1, None}
enum_elts:
    ['-2', '-1', '0', '1', 'None']

WARNING:skdoc:failed to parse type: 'This matrix in the passed format', context follows
WARNING:skdoc:--------- context:
function:
    <function spmatrix.asformat at 0x7f1eb1a40ca0>
function_qualname:
    sklearn.metrics.pairwise.csr_matrix.asformat
group:
    ret
section:
    Returns
text:
    A : This matrix in the passed format.
param_name:
    A
type_string:
    This matrix in the passed format

WARNING:skdoc:failed to parse type: 'The element-wise complex conjugate', context follows
WARNING:skdoc:--------- context:
function:
    <function _data_matrix.conj at 0x7f1eb14be5e0>
function_qualname:
    sklearn.metrics.pairwise.csr_matrix.conj
group:
    ret
section:
    Returns
text:
    A : The element-wise complex conjugate.
param_name:
    A
type_string:
    The element-wise complex conjugate

WARNING:skdoc:not wrapping property LowerName(Sklearn.Metrics.Pairwise.Csr_matrix.has_canonical_format, sklearn.metrics.pairwise.csr_matrix.has_canonical_format): <property object at 0x7f1eb14bb900>
WARNING:skdoc:failed to parse type: 'coo_matrix', context follows
WARNING:skdoc:--------- context:
function:
    <function _minmax_mixin.max at 0x7f1eb1441670>
function_qualname:
    sklearn.metrics.pairwise.csr_matrix.max
group:
    ret
section:
    Returns
text:
    amax : coo_matrix or scalar
    Maximum of `a`. If `axis` is None, the result is a scalar value.
    If `axis` is given, the result is a sparse.coo_matrix of dimension
    ``a.ndim - 1``.
param_name:
    amax
type_string:
    coo_matrix or scalar
enum_elts:
    ['coo_matrix', 'scalar']

WARNING:skdoc:failed to parse type: 'n is a scalar', context follows
WARNING:skdoc:--------- context:
function:
    <function _data_matrix.power at 0x7f1eb14be790>
function_qualname:
    sklearn.metrics.pairwise.csr_matrix.power
group:
    params
section:
    Parameters
text:
    n : n is a scalar
param_name:
    n
type_string:
    n is a scalar

WARNING:skdoc:failed to parse type: 'If dtype is not specified', context follows
WARNING:skdoc:--------- context:
function:
    <function _data_matrix.power at 0x7f1eb14be790>
function_qualname:
    sklearn.metrics.pairwise.csr_matrix.power
group:
    params
section:
    Parameters
text:
    dtype : If dtype is not specified, the current dtype will be preserved.
param_name:
    dtype
type_string:
    If dtype is not specified, the current dtype will be preserved
enum_elts:
    ['If dtype is not specified', 'the current dtype will be preserved']

WARNING:skdoc:failed to parse type: 'the current dtype will be preserved', context follows
WARNING:skdoc:--------- context:
function:
    <function _data_matrix.power at 0x7f1eb14be790>
function_qualname:
    sklearn.metrics.pairwise.csr_matrix.power
group:
    params
section:
    Parameters
text:
    dtype : If dtype is not specified, the current dtype will be preserved.
param_name:
    dtype
type_string:
    If dtype is not specified, the current dtype will be preserved
enum_elts:
    ['If dtype is not specified', 'the current dtype will be preserved']

WARNING:skdoc:failed to parse type: 'length-2 tuple of ints', context follows
WARNING:skdoc:--------- context:
function:
    <function spmatrix.reshape at 0x7f1eb1a404c0>
function_qualname:
    sklearn.metrics.pairwise.csr_matrix.reshape
group:
    params
section:
    Parameters
text:
    shape : length-2 tuple of ints
    The new shape should be compatible with the original shape.
param_name:
    shape
type_string:
    length-2 tuple of ints

WARNING:skdoc:failed to parse type: '`self` with the dimensions reversed', context follows
WARNING:skdoc:--------- context:
function:
    <function csr_matrix.transpose at 0x7f1eb144d550>
function_qualname:
    sklearn.metrics.pairwise.csr_matrix.transpose
group:
    ret
section:
    Returns
text:
    p : `self` with the dimensions reversed.
param_name:
    p
type_string:
    `self` with the dimensions reversed

WARNING:skdoc:failed to parse type: 'any type', context follows
WARNING:skdoc:--------- context:
function:
    <function is_scalar_nan at 0x7f1eac85db80>
function_qualname:
    sklearn.metrics.pairwise.is_scalar_nan
group:
    params
section:
    Parameters
text:
    x : any type
param_name:
    x
type_string:
    any type

WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Metrics.Pairwise.Distance, sklearn.metrics.pairwise.distance): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Metrics.Pairwise.Itertools, sklearn.metrics.pairwise.itertools): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Metrics.Pairwise.Np, sklearn.metrics.pairwise.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Metrics.Pairwise.Warnings, sklearn.metrics.pairwise.warnings): OutsideScope
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'list of dictionaries', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.model_selection._search.GridSearchCV'>
function_qualname:
    sklearn.model_selection.GridSearchCV.GridSearchCV
group:
    params
section:
    Parameters
text:
    param_grid : dict or list of dictionaries
    Dictionary with parameters names (string) as keys and lists of
    parameter settings to try as values, or a list of such
    dictionaries, in which case the grids spanned by each dictionary
    in the list are explored. This enables searching over any sequence
    of parameter settings.
param_name:
    param_grid
type_string:
    dict or list of dictionaries
enum_elts:
    ['dict', 'list of dictionaries']

WARNING:skdoc:failed to parse type: 'list/tuple', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.model_selection._search.GridSearchCV'>
function_qualname:
    sklearn.model_selection.GridSearchCV.GridSearchCV
group:
    params
section:
    Parameters
text:
    scoring : string, callable, list/tuple, dict or None, default: None
    A single string (see :ref:`scoring_parameter`) or a callable
    (see :ref:`scoring`) to evaluate the predictions on the test set.
param_name:
    scoring
type_string:
    string, callable, list/tuple, dict or None
enum_elts:
    ['string', 'callable', 'list/tuple', 'dict', 'None']

WARNING:skdoc:failed to parse type: 'length n_samples', context follows
WARNING:skdoc:--------- context:
function:
    <function BaseSearchCV.decision_function at 0x7f1ea45e1280>
function_qualname:
    sklearn.model_selection.GridSearchCV.decision_function
group:
    params
section:
    Parameters
text:
    X : indexable, length n_samples
    Must fulfill the input assumptions of the
    underlying estimator.
param_name:
    X
type_string:
    indexable, length n_samples
enum_elts:
    ['indexable', 'length n_samples']

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.model_selection.GroupKFold.shuffle, arg 1 != self: (*arrays, random_state=None, n_samples=None)
WARNING:skdoc:method LowerName(Sklearn.Model_selection.GroupKFold.shuffle, sklearn.model_selection.GroupKFold.shuffle) has complete override spec but there was an error wrapping it: False
WARNING:skdoc:ignoring method sklearn.model_selection.KFold.shuffle, arg 1 != self: (*arrays, random_state=None, n_samples=None)
WARNING:skdoc:method LowerName(Sklearn.Model_selection.KFold.shuffle, sklearn.model_selection.KFold.shuffle) has complete override spec but there was an error wrapping it: False
WARNING:skdoc:failed to parse type: 'dict of string to sequence', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.model_selection._search.ParameterGrid'>
function_qualname:
    sklearn.model_selection.ParameterGrid.ParameterGrid
group:
    params
section:
    Parameters
text:
    param_grid : dict of string to sequence, or sequence of such
    The parameter grid to explore, as a dictionary mapping estimator
    parameters to sequences of allowed values.
param_name:
    param_grid
type_string:
    dict of string to sequence, or sequence of such
enum_elts:
    ['dict of string to sequence', 'sequence of such']

WARNING:skdoc:failed to parse type: 'sequence of such', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.model_selection._search.ParameterGrid'>
function_qualname:
    sklearn.model_selection.ParameterGrid.ParameterGrid
group:
    params
section:
    Parameters
text:
    param_grid : dict of string to sequence, or sequence of such
    The parameter grid to explore, as a dictionary mapping estimator
    parameters to sequences of allowed values.
param_name:
    param_grid
type_string:
    dict of string to sequence, or sequence of such
enum_elts:
    ['dict of string to sequence', 'sequence of such']

WARNING:skdoc:failed to parse type: 'dict of string to any', context follows
WARNING:skdoc:--------- context:
function:
    <function ParameterGrid.__getitem__ at 0x7f1eab9d0790>
function_qualname:
    sklearn.model_selection.ParameterGrid.__getitem__
group:
    ret
section:
    Returns
text:
    params : dict of string to any
    Equal to list(self)[ind]
param_name:
    params
type_string:
    dict of string to any

WARNING:skdoc:failed to parse type: 'iterator over dict of string to any', context follows
WARNING:skdoc:--------- context:
function:
    <function ParameterGrid.__iter__ at 0x7f1eab9d0280>
function_qualname:
    sklearn.model_selection.ParameterGrid.__iter__
group:
    ret
section:
    Returns
text:
    params : iterator over dict of string to any
    Yields dictionaries mapping each estimator parameter to one of its
    allowed values.
param_name:
    params
type_string:
    iterator over dict of string to any

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.model_selection.StratifiedKFold.shuffle, arg 1 != self: (*arrays, random_state=None, n_samples=None)
WARNING:skdoc:method LowerName(Sklearn.Model_selection.StratifiedKFold.shuffle, sklearn.model_selection.StratifiedKFold.shuffle) has complete override spec but there was an error wrapping it: False
WARNING:skdoc:ignoring method sklearn.model_selection.TimeSeriesSplit.shuffle, arg 1 != self: (*arrays, random_state=None, n_samples=None)
WARNING:skdoc:method LowerName(Sklearn.Model_selection.TimeSeriesSplit.shuffle, sklearn.model_selection.TimeSeriesSplit.shuffle) has complete override spec but there was an error wrapping it: False
WARNING:skdoc:failed to parse type: 'estimator object implementing 'fit' and 'predict'', context follows
WARNING:skdoc:--------- context:
function:
    <function cross_val_predict at 0x7f1eabe9a670>
function_qualname:
    sklearn.model_selection.cross_val_predict
group:
    params
section:
    Parameters
text:
    estimator : estimator object implementing 'fit' and 'predict'
    The object to use to fit the data.
param_name:
    estimator
type_string:
    estimator object implementing 'fit' and 'predict'

WARNING:skdoc:failed to parse type: 'dtype int', context follows
WARNING:skdoc:--------- context:
function:
    <function fit_grid_point at 0x7f1eab9d01f0>
function_qualname:
    sklearn.model_selection.fit_grid_point
group:
    params
section:
    Parameters
text:
    train : ndarray, dtype int or bool
    Boolean mask or indices for training set.
param_name:
    train
type_string:
    ndarray, dtype int or bool
enum_elts:
    ['ndarray', 'dtype int', 'bool']

WARNING:skdoc:failed to parse type: 'object type that implements the "fit" and "predict" methods', context follows
WARNING:skdoc:--------- context:
function:
    <function learning_curve at 0x7f1eabe9aa60>
function_qualname:
    sklearn.model_selection.learning_curve
group:
    params
section:
    Parameters
text:
    estimator : object type that implements the "fit" and "predict" methods
    An object of that type which is cloned for each validation.
param_name:
    estimator
type_string:
    object type that implements the "fit" and "predict" methods

WARNING:skdoc:failed to parse type: 'dtype float', context follows
WARNING:skdoc:--------- context:
function:
    <function learning_curve at 0x7f1eabe9aa60>
function_qualname:
    sklearn.model_selection.learning_curve
group:
    params
section:
    Parameters
text:
    train_sizes : array-like, shape (n_ticks,), dtype float or int
    Relative or absolute numbers of training examples that will be used to
    generate the learning curve. If the dtype is float, it is regarded as a
    fraction of the maximum size of the training set (that is determined
    by the selected validation method), i.e. it has to be within (0, 1].
    Otherwise it is interpreted as absolute sizes of the training sets.
    Note that for classification the number of samples usually have to
    be big enough to contain at least one sample from each class.
    (default: np.linspace(0.1, 1.0, 5))
param_name:
    train_sizes
type_string:
    array-like, dtype float or int
enum_elts:
    ['array-like', 'dtype float', 'int']

WARNING:skdoc:failed to parse type: 'length=2 * len(arrays)', context follows
WARNING:skdoc:--------- context:
function:
    <function train_test_split at 0x7f1eac602310>
function_qualname:
    sklearn.model_selection.train_test_split
group:
    ret
section:
    Returns
text:
    splitting : list, length=2 * len(arrays)
    List containing train-test split of inputs.
param_name:
    splitting
type_string:
    list, length=2 * len(arrays)
enum_elts:
    ['list', 'length=2 * len(arrays)']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'list of ``n_classes *  / 2`` estimators', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.multiclass.OneVsOneClassifier'>
section:
    Attributes
text:
    estimators_ : list of ``n_classes * (n_classes - 1) / 2`` estimators
    Estimators used for predictions.
param_name:
    estimators_
type_string:
    list of ``n_classes *  / 2`` estimators

WARNING:skdoc:failed to parse type: 'length = ``len(estimators_)``', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.multiclass.OneVsOneClassifier'>
section:
    Attributes
text:
    pairwise_indices_ : list, length = ``len(estimators_)``, or ``None``
    Indices of samples used when training the estimators.
    ``None`` when ``estimator`` does not have ``_pairwise`` attribute.
param_name:
    pairwise_indices_
type_string:
    list, length = ``len(estimators_)``, or ``None``
enum_elts:
    ['list', 'length = ``len(estimators_)``', '``None``']

WARNING:skdoc:failed to parse type: '``None``', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.multiclass.OneVsOneClassifier'>
section:
    Attributes
text:
    pairwise_indices_ : list, length = ``len(estimators_)``, or ``None``
    Indices of samples used when training the estimators.
    ``None`` when ``estimator`` does not have ``_pairwise`` attribute.
param_name:
    pairwise_indices_
type_string:
    list, length = ``len(estimators_)``, or ``None``
enum_elts:
    ['list', 'length = ``len(estimators_)``', '``None``']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'list of `n_classes` estimators', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.multiclass.OneVsRestClassifier'>
section:
    Attributes
text:
    estimators_ : list of `n_classes` estimators
    Estimators used for predictions.
param_name:
    estimators_
type_string:
    list of `n_classes` estimators

WARNING:skdoc:failed to parse type: 'LabelBinarizer object', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.multiclass.OneVsRestClassifier'>
section:
    Attributes
text:
    label_binarizer_ : LabelBinarizer object
    Object used to transform multiclass labels to binary labels and
    vice-versa.
param_name:
    label_binarizer_
type_string:
    LabelBinarizer object

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'list of `int` estimators', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.multiclass.OutputCodeClassifier'>
section:
    Attributes
text:
    estimators_ : list of `int(n_classes * code_size)` estimators
    Estimators used for predictions.
param_name:
    estimators_
type_string:
    list of `int` estimators

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:append: caught error building Class UpperName(Sklearn.Multiclass.Parallel, sklearn.multiclass.Parallel): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Multiclass.Array, sklearn.multiclass.array): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Multiclass.Itertools, sklearn.multiclass.itertools): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Multiclass.Np, sklearn.multiclass.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Multiclass.Sp, sklearn.multiclass.sp): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Multiclass.Warnings, sklearn.multiclass.warnings): OutsideScope
WARNING:skdoc:ignoring method sklearn.multioutput.ABCMeta.register, arg 1 != self: (cls, subclass)
WARNING:skdoc:append: caught error building Class UpperName(Sklearn.Multioutput.ABCMeta, sklearn.multioutput.ABCMeta): OutsideScope
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'list of ``n_output`` estimators', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.multioutput.MultiOutputClassifier'>
section:
    Attributes
text:
    estimators_ : list of ``n_output`` estimators
    Estimators used for predictions.
param_name:
    estimators_
type_string:
    list of ``n_output`` estimators

WARNING:skdoc:not wrapping property LowerName(Sklearn.Multioutput.MultiOutputClassifier.predict_proba, sklearn.multioutput.MultiOutputClassifier.predict_proba): <property object at 0x7f1ea50ae0e0>
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Multioutput.Np, sklearn.multioutput.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Multioutput.Sp, sklearn.multioutput.sp): OutsideScope
WARNING:skdoc:ignoring method sklearn.naive_bayes.ABCMeta.register, arg 1 != self: (cls, subclass)
WARNING:skdoc:append: caught error building Class UpperName(Sklearn.Naive_bayes.ABCMeta, sklearn.naive_bayes.ABCMeta): OutsideScope
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'size=', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.naive_bayes.BernoulliNB'>
function_qualname:
    sklearn.naive_bayes.BernoulliNB.BernoulliNB
group:
    params
section:
    Parameters
text:
    class_prior : array-like, size=[n_classes,], optional (default=None)
    Prior probabilities of the classes. If specified the priors are not
    adjusted according to the data.
param_name:
    class_prior
type_string:
    array-like, size=
enum_elts:
    ['array-like', 'size=']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'size', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.naive_bayes.CategoricalNB'>
function_qualname:
    sklearn.naive_bayes.CategoricalNB.CategoricalNB
group:
    params
section:
    Parameters
text:
    class_prior : array-like, size (n_classes,), optional (default=None)
    Prior probabilities of the classes. If specified the priors are not
    adjusted according to the data.
param_name:
    class_prior
type_string:
    array-like, size
enum_elts:
    ['array-like', 'size']

WARNING:skdoc:failed to parse type: 'len n_features', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.naive_bayes.CategoricalNB'>
section:
    Attributes
text:
    category_count_ : list of arrays, len n_features
    Holds arrays of shape (n_classes, n_categories of respective feature)
    for each feature. Each array provides the number of samples
    encountered for each class and category of the specific feature.
param_name:
    category_count_
type_string:
    list of arrays, len n_features
enum_elts:
    ['list of arrays', 'len n_features']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Naive_bayes.Np, sklearn.naive_bayes.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Naive_bayes.Warnings, sklearn.naive_bayes.warnings): OutsideScope
WARNING:skdoc:no signature for constructor of sklearn.neighbors.BallTree, disabling ctor
WARNING:skdoc:failed to parse type: 'memory view', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.neighbors._ball_tree.BallTree'>
section:
    Attributes
text:
    data : memory view
    The training data
param_name:
    data
type_string:
    memory view

WARNING:skdoc:no signature for BinaryTree.get_arrays (<method 'get_arrays' of 'sklearn.neighbors._ball_tree.BinaryTree' objects>)
WARNING:skdoc:no signature for BinaryTree.get_n_calls (<method 'get_n_calls' of 'sklearn.neighbors._ball_tree.BinaryTree' objects>)
WARNING:skdoc:no signature for BinaryTree.get_tree_stats (<method 'get_tree_stats' of 'sklearn.neighbors._ball_tree.BinaryTree' objects>)
WARNING:skdoc:ignoring method sklearn.neighbors.BallTree.query, arg 1 != self: (X, k=1, return_distance=True, dualtree=False, breadth_first=False)
WARNING:skdoc:failed to parse type: 'distance within which neighbors are returned', context follows
WARNING:skdoc:--------- context:
function:
    <method 'query_radius' of 'sklearn.neighbors._ball_tree.BinaryTree' objects>
function_qualname:
    sklearn.neighbors.BallTree.query_radius
group:
    params
section:
    Parameters
text:
    r : distance within which neighbors are returned
    r can be a single value, or an array of values of shape
    x.shape[:-1] if different radii are desired for each point.
param_name:
    r
type_string:
    distance within which neighbors are returned

WARNING:skdoc:failed to parse type: 'if count_only == True', context follows
WARNING:skdoc:--------- context:
function:
    <method 'query_radius' of 'sklearn.neighbors._ball_tree.BinaryTree' objects>
function_qualname:
    sklearn.neighbors.BallTree.query_radius
group:
    ret
section:
    Returns
text:
    count       : if count_only == True
    ind         : if count_only == False and return_distance == False
    (ind, dist) : if count_only == False and return_distance == True
param_name:
    count
type_string:
    if count_only == True

WARNING:skdoc:failed to parse type: 'shape = X', context follows
WARNING:skdoc:--------- context:
function:
    <method 'query_radius' of 'sklearn.neighbors._ball_tree.BinaryTree' objects>
function_qualname:
    sklearn.neighbors.BallTree.query_radius
group:
    ret
section:
    Returns
text:
    count : array of integers, shape = X.shape[:-1]
    each entry gives the number of neighbors within
    a distance r of the corresponding point.
param_name:
    count
type_string:
    array of integers, shape = X
enum_elts:
    ['array of integers', 'shape = X']

WARNING:skdoc:failed to parse type: 'array of objects', context follows
WARNING:skdoc:--------- context:
function:
    <method 'query_radius' of 'sklearn.neighbors._ball_tree.BinaryTree' objects>
function_qualname:
    sklearn.neighbors.BallTree.query_radius
group:
    ret
section:
    Returns
text:
    ind : array of objects, shape = X.shape[:-1]
    each element is a numpy integer array listing the indices of
    neighbors of the corresponding point.  Note that unlike
    the results of a k-neighbors query, the returned neighbors
    are not sorted by distance by default.
param_name:
    ind
type_string:
    array of objects, shape = X
enum_elts:
    ['array of objects', 'shape = X']

WARNING:skdoc:no signature for BinaryTree.reset_n_calls (<method 'reset_n_calls' of 'sklearn.neighbors._ball_tree.BinaryTree' objects>)
WARNING:skdoc:no signature for BinaryTree.two_point_correlation (<method 'two_point_correlation' of 'sklearn.neighbors._ball_tree.BinaryTree' objects>)
WARNING:skdoc:no signature for constructor of sklearn.neighbors.DistanceMetric, disabling ctor
WARNING:skdoc:no signature for DistanceMetric.dist_to_rdist (<method 'dist_to_rdist' of 'sklearn.neighbors._dist_metrics.DistanceMetric' objects>)
WARNING:skdoc:no signature for DistanceMetric.get_metric (<built-in method get_metric of type object at 0x7f1eaae5b460>)
WARNING:skdoc:no signature for DistanceMetric.pairwise (<method 'pairwise' of 'sklearn.neighbors._dist_metrics.DistanceMetric' objects>)
WARNING:skdoc:no signature for DistanceMetric.rdist_to_dist (<method 'rdist_to_dist' of 'sklearn.neighbors._dist_metrics.DistanceMetric' objects>)
WARNING:skdoc:no signature for constructor of sklearn.neighbors.KDTree, disabling ctor
WARNING:skdoc:no signature for BinaryTree.get_arrays (<method 'get_arrays' of 'sklearn.neighbors._kd_tree.BinaryTree' objects>)
WARNING:skdoc:no signature for BinaryTree.get_n_calls (<method 'get_n_calls' of 'sklearn.neighbors._kd_tree.BinaryTree' objects>)
WARNING:skdoc:no signature for BinaryTree.get_tree_stats (<method 'get_tree_stats' of 'sklearn.neighbors._kd_tree.BinaryTree' objects>)
WARNING:skdoc:ignoring method sklearn.neighbors.KDTree.query, arg 1 != self: (X, k=1, return_distance=True, dualtree=False, breadth_first=False)
WARNING:skdoc:no signature for BinaryTree.reset_n_calls (<method 'reset_n_calls' of 'sklearn.neighbors._kd_tree.BinaryTree' objects>)
WARNING:skdoc:no signature for BinaryTree.two_point_correlation (<method 'two_point_correlation' of 'sklearn.neighbors._kd_tree.BinaryTree' objects>)
WARNING:skdoc:failed to parse type: 'callble', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.neighbors._classification.KNeighborsClassifier'>
section:
    Attributes
text:
    effective_metric_ : string or callble
    The distance metric used. It will be same as the `metric` parameter
    or a synonym of it, e.g. 'euclidean' if the `metric` parameter set to
    'minkowski' and `p` parameter set to 2.
param_name:
    effective_metric_
type_string:
    string or callble
enum_elts:
    ['string', 'callble']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'CSR sparse graph', context follows
WARNING:skdoc:--------- context:
function:
    <bound method KNeighborsTransformer.fit_transform of KNeighborsTransformer(algorithm='auto', leaf_size=30, metric='minkowski',
                          metric_params=None, mode='distance', n_jobs=1,
                          n_neighbors=5, p=2)>
function_qualname:
    sklearn.neighbors.KNeighborsTransformer.fit_transform
group:
    ret
section:
    Returns
text:
    Xt : CSR sparse graph of shape (n_samples, n_samples)
    Xt[i, j] is assigned the weight of edge that connects i to j.
    Only the neighbors have an explicit value.
    The diagonal is always explicit.
param_name:
    Xt
type_string:
    CSR sparse graph

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'array of arrays', context follows
WARNING:skdoc:--------- context:
function:
    <bound method RadiusNeighborsMixin.radius_neighbors of NearestNeighbors(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,
                     radius=1.0)>
function_qualname:
    sklearn.neighbors.NearestNeighbors.radius_neighbors
group:
    ret
section:
    Returns
text:
    neigh_dist : array, shape (n_samples,) of arrays
    Array representing the distances to each point, only present if
    return_distance=True. The distance values are computed according
    to the ``metric`` constructor parameter.
param_name:
    neigh_dist
type_string:
    array of arrays

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'numpy.RandomState', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.neighbors._nca.NeighborhoodComponentsAnalysis'>
function_qualname:
    sklearn.neighbors.NeighborhoodComponentsAnalysis.NeighborhoodComponentsAnalysis
group:
    params
section:
    Parameters
text:
    random_state : int or numpy.RandomState or None, optional (default=None)
    A pseudo random number generator object or a seed for it if int. If
    ``init='random'``, ``random_state`` is used to initialize the random
    transformation. If ``init='pca'``, ``random_state`` is passed as an
    argument to PCA when initializing the transformation.
param_name:
    random_state
type_string:
    int or numpy.RandomState or None
enum_elts:
    ['int', 'numpy.RandomState', 'None']

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'manual label', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.neighbors._classification.RadiusNeighborsClassifier'>
function_qualname:
    sklearn.neighbors.RadiusNeighborsClassifier.RadiusNeighborsClassifier
group:
    params
section:
    Parameters
text:
    outlier_label : {manual label, 'most_frequent'}, optional (default = None)
    label for outlier samples (samples with no neighbors in given radius).
param_name:
    outlier_label
type_string:
    {manual label, 'most_frequent'}
enum_elts:
    ['manual label', "'most_frequent'"]

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'BernoulliRBM', context follows
WARNING:skdoc:--------- context:
function:
    <bound method BernoulliRBM.fit of BernoulliRBM(batch_size=10, learning_rate=0.1, n_components=256, n_iter=10,
                 random_state=None, verbose=0)>
function_qualname:
    sklearn.neural_network.BernoulliRBM.fit
group:
    ret
section:
    Returns
text:
    self : BernoulliRBM
    The fitted model.
param_name:
    self
type_string:
    BernoulliRBM

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'length = n_layers - 2', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
function_qualname:
    sklearn.neural_network.MLPClassifier.MLPClassifier
group:
    params
section:
    Parameters
text:
    hidden_layer_sizes : tuple, length = n_layers - 2, default=(100,)
    The ith element represents the number of neurons in the ith
    hidden layer.
param_name:
    hidden_layer_sizes
type_string:
    tuple, length = n_layers - 2
enum_elts:
    ['tuple', 'length = n_layers - 2']

WARNING:skdoc:failed to parse type: 'The', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
function_qualname:
    sklearn.neural_network.MLPClassifier.MLPClassifier
group:
    params
section:
    Parameters
text:
    Note: The default solver 'adam' works pretty well on relatively
    large datasets (with thousands of training samples or more) in terms of
    both training time and validation score.
    For small datasets, however, 'lbfgs' can converge faster and perform
    better.
param_name:
    Note
type_string:
    The

WARNING:skdoc:failed to parse type: 'length n_layers - 1', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>
section:
    Attributes
text:
    coefs_ : list, length n_layers - 1
    The ith element in the list represents the weight matrix corresponding
    to layer i.
param_name:
    coefs_
type_string:
    list, length n_layers - 1
enum_elts:
    ['list', 'length n_layers - 1']

WARNING:skdoc:failed to parse type: 'returns a trained MLP model', context follows
WARNING:skdoc:--------- context:
function:
    <bound method MLPClassifier.fit of MLPClassifier(activation='relu', alpha=0.0001, batch_size='auto', beta_1=0.9,
                  beta_2=0.999, early_stopping=False, epsilon=1e-08,
                  hidden_layer_sizes=(100,), learning_rate='constant',
                  learning_rate_init=0.001, max_fun=15000, max_iter=200,
                  momentum=0.9, n_iter_no_change=10, nesterovs_momentum=True,
                  power_t=0.5, random_state=None, shuffle=True, solver='adam',
                  tol=0.0001, validation_fraction=0.1, verbose=False,
                  warm_start=False)>
function_qualname:
    sklearn.neural_network.MLPClassifier.fit
group:
    ret
section:
    Returns
text:
    self : returns a trained MLP model.
param_name:
    self
type_string:
    returns a trained MLP model

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.neural_network.MLPClassifier.shuffle, arg 1 != self: (*arrays, random_state=None, n_samples=None)
WARNING:skdoc:method LowerName(Sklearn.Neural_network.MLPClassifier.shuffle, sklearn.neural_network.MLPClassifier.shuffle) has complete override spec but there was an error wrapping it: True
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:ignoring method sklearn.neural_network.MLPRegressor.shuffle, arg 1 != self: (*arrays, random_state=None, n_samples=None)
WARNING:skdoc:method LowerName(Sklearn.Neural_network.MLPRegressor.shuffle, sklearn.neural_network.MLPRegressor.shuffle) has complete override spec but there was an error wrapping it: True
WARNING:skdoc:failed to parse type: 'iterable or array-like, depending on transformers', context follows
WARNING:skdoc:--------- context:
function:
    <function FeatureUnion.fit at 0x7f1ea793a280>
function_qualname:
    sklearn.pipeline.FeatureUnion.fit
group:
    params
section:
    Parameters
text:
    X : iterable or array-like, depending on transformers
    Input data, used to fit transformers.
param_name:
    X
type_string:
    iterable or array-like, depending on transformers

WARNING:skdoc:append: caught error building Class UpperName(Sklearn.Pipeline.Parallel, sklearn.pipeline.Parallel): OutsideScope
WARNING:skdoc:failed to parse type: 'bunch object', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.pipeline.Pipeline'>
section:
    Attributes
text:
    named_steps : bunch object, a dictionary with attribute access
    Read-only attribute to access any step parameter by user given name.
    Keys are step names and values are steps parameters.
param_name:
    named_steps
type_string:
    bunch object, a dictionary with attribute access
enum_elts:
    ['bunch object', 'a dictionary with attribute access']

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **predict_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:not wrapping property LowerName(Sklearn.Pipeline.Pipeline.transform, sklearn.pipeline.Pipeline.transform): <property object at 0x7f1ea7934d10>
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Pipeline.Np, sklearn.pipeline.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Pipeline.Sparse, sklearn.pipeline.sparse): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Pipeline.Warnings, sklearn.pipeline.warnings): OutsideScope
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'array of labels', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.preprocessing._label.MultiLabelBinarizer'>
section:
    Attributes
text:
    classes_ : array of labels
    A copy of the `classes` parameter where provided,
    or otherwise, the sorted set of classes found when fitting.
param_name:
    classes_
type_string:
    array of labels

WARNING:skdoc:failed to parse type: 'returns this MultiLabelBinarizer instance', context follows
WARNING:skdoc:--------- context:
function:
    <bound method MultiLabelBinarizer.fit of MultiLabelBinarizer(classes=None, sparse_output=False)>
function_qualname:
    sklearn.preprocessing.MultiLabelBinarizer.fit
group:
    ret
section:
    Returns
text:
    self : returns this MultiLabelBinarizer instance
param_name:
    self
type_string:
    returns this MultiLabelBinarizer instance

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'a list of array-like', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.preprocessing._encoders.OneHotEncoder'>
function_qualname:
    sklearn.preprocessing.OneHotEncoder.OneHotEncoder
group:
    params
section:
    Parameters
text:
    categories : 'auto' or a list of array-like, default='auto'
    Categories (unique values) per feature:
param_name:
    categories
type_string:
    'auto' or a list of array-like
enum_elts:
    ["'auto'", 'a list of array-like']

WARNING:skdoc:failed to parse type: 'a array-like', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.preprocessing._encoders.OneHotEncoder'>
function_qualname:
    sklearn.preprocessing.OneHotEncoder.OneHotEncoder
group:
    params
section:
    Parameters
text:
    drop : 'first' or a array-like of shape (n_features,), default=None
    Specifies a methodology to use to drop one of the categories per
    feature. This is useful in situations where perfectly collinear
    features cause problems, such as when feeding the resulting data
    into a neural network or an unregularized regression.
param_name:
    drop
type_string:
    'first' or a array-like
enum_elts:
    ["'first'", 'a array-like']

WARNING:skdoc:failed to parse type: 'number type', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.preprocessing._encoders.OneHotEncoder'>
function_qualname:
    sklearn.preprocessing.OneHotEncoder.OneHotEncoder
group:
    params
section:
    Parameters
text:
    dtype : number type, default=np.float
    Desired dtype of output.
param_name:
    dtype
type_string:
    number type

WARNING:skdoc:failed to parse type: 'sparse matrix if sparse=True else a 2-d array', context follows
WARNING:skdoc:--------- context:
function:
    <bound method OneHotEncoder.fit_transform of OneHotEncoder(categories='auto', drop=None, dtype=<class 'numpy.float64'>,
                  handle_unknown='error', sparse=True)>
function_qualname:
    sklearn.preprocessing.OneHotEncoder.fit_transform
group:
    ret
section:
    Returns
text:
    X_out : sparse matrix if sparse=True else a 2-d array
    Transformed input.
param_name:
    X_out
type_string:
    sparse matrix if sparse=True else a 2-d array

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'a 2-d array', context follows
WARNING:skdoc:--------- context:
function:
    <bound method OrdinalEncoder.transform of OrdinalEncoder(categories='auto', dtype=<class 'numpy.float64'>)>
function_qualname:
    sklearn.preprocessing.OrdinalEncoder.transform
group:
    ret
section:
    Returns
text:
    X_out : sparse matrix or a 2-d array
    Transformed input.
param_name:
    X_out
type_string:
    sparse matrix or a 2-d array
enum_elts:
    ['sparse matrix', 'a 2-d array']

WARNING:skdoc:failed to parse type: 'instance', context follows
WARNING:skdoc:--------- context:
function:
    <bound method PolynomialFeatures.fit of PolynomialFeatures(degree=2, include_bias=True, interaction_only=False,
                       order='C')>
function_qualname:
    sklearn.preprocessing.PolynomialFeatures.fit
group:
    ret
section:
    Returns
text:
    self : instance
param_name:
    self
type_string:
    instance

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'length n_features', context follows
WARNING:skdoc:--------- context:
function:
    <bound method PolynomialFeatures.get_feature_names of PolynomialFeatures(degree=2, include_bias=True, interaction_only=False,
                       order='C')>
function_qualname:
    sklearn.preprocessing.PolynomialFeatures.get_feature_names
group:
    params
section:
    Parameters
text:
    input_features : list of string, length n_features, optional
    String names for input features if available. By default,
    "x0", "x1", ... "xn_features" is used.
param_name:
    input_features
type_string:
    list of string, length n_features
enum_elts:
    ['list of string', 'length n_features']

WARNING:skdoc:failed to parse type: 'length n_output_features', context follows
WARNING:skdoc:--------- context:
function:
    <bound method PolynomialFeatures.get_feature_names of PolynomialFeatures(degree=2, include_bias=True, interaction_only=False,
                       order='C')>
function_qualname:
    sklearn.preprocessing.PolynomialFeatures.get_feature_names
group:
    ret
section:
    Returns
text:
    output_feature_names : list of string, length n_output_features
param_name:
    output_feature_names
type_string:
    list of string, length n_output_features
enum_elts:
    ['list of string', 'length n_output_features']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'CSR/CSC sparse matrix', context follows
WARNING:skdoc:--------- context:
function:
    <bound method PolynomialFeatures.transform of PolynomialFeatures(degree=2, include_bias=True, interaction_only=False,
                       order='C')>
function_qualname:
    sklearn.preprocessing.PolynomialFeatures.transform
group:
    params
section:
    Parameters
text:
    X : array-like or CSR/CSC sparse matrix, shape [n_samples, n_features]
    The data to transform, row by row.
param_name:
    X
type_string:
    array-like or CSR/CSC sparse matrix
enum_elts:
    ['array-like', 'CSR/CSC sparse matrix']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'tuple (q_min, q_max)', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.preprocessing._data.RobustScaler'>
function_qualname:
    sklearn.preprocessing.RobustScaler.RobustScaler
group:
    params
section:
    Parameters
text:
    quantile_range : tuple (q_min, q_max), 0.0 < q_min < q_max < 100.0
    Default: (25.0, 75.0) = (1st quantile, 3rd quantile) = IQR
    Quantile range used to calculate ``scale_``.
param_name:
    quantile_range
type_string:
    tuple (q_min, q_max), 0.0 < q_min < q_max < 100.0
enum_elts:
    ['tuple (q_min, q_max)', '0.0 < q_min < q_max < 100.0']

WARNING:skdoc:failed to parse type: '0.0 < q_min < q_max < 100.0', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.preprocessing._data.RobustScaler'>
function_qualname:
    sklearn.preprocessing.RobustScaler.RobustScaler
group:
    params
section:
    Parameters
text:
    quantile_range : tuple (q_min, q_max), 0.0 < q_min < q_max < 100.0
    Default: (25.0, 75.0) = (1st quantile, 3rd quantile) = IQR
    Quantile range used to calculate ``scale_``.
param_name:
    quantile_range
type_string:
    tuple (q_min, q_max), 0.0 < q_min < q_max < 100.0
enum_elts:
    ['tuple (q_min, q_max)', '0.0 < q_min < q_max < 100.0']

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'scipy sparse', context follows
WARNING:skdoc:--------- context:
function:
    <function BaseRandomProjection.transform at 0x7f1ea4e27ee0>
function_qualname:
    sklearn.random_projection.BaseRandomProjection.transform
group:
    ret
section:
    Returns
text:
    X_new : numpy array or scipy sparse of shape [n_samples, n_components]
    Projected array.
param_name:
    X_new
type_string:
    numpy array or scipy sparse
enum_elts:
    ['numpy array', 'scipy sparse']

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'float in range 0.0 - 1.0', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.random_projection.SparseRandomProjection'>
section:
    Attributes
text:
    density_ : float in range 0.0 - 1.0
    Concrete density computed from when density = "auto".
param_name:
    density_
type_string:
    float in range 0.0 - 1.0

WARNING:skdoc:overriding **fit_params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:no signature for sample_without_replacement (<built-in function sample_without_replacement>)
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Random_projection.Np, sklearn.random_projection.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Random_projection.Sp, sklearn.random_projection.sp): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Random_projection.Warnings, sklearn.random_projection.warnings): OutsideScope
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Setup.Os, sklearn.setup.os): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Setup.Sys, sklearn.setup.sys): OutsideScope
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'dtype=int32', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.svm._classes.NuSVC'>
section:
    Attributes
text:
    n_support_ : array-like, dtype=int32, shape = [n_class]
    Number of support vectors for each class.
param_name:
    n_support_
type_string:
    array-like, dtype=int32
enum_elts:
    ['array-like', 'dtype=int32']

WARNING:skdoc:failed to parse type: 'tuple of int', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.svm._classes.NuSVC'>
section:
    Attributes
text:
    shape_fit_ : tuple of int of shape (n_dimensions_of_X,)
    Array dimensions of training vector ``X``.
param_name:
    shape_fit_
type_string:
    tuple of int

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'list of dict', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.tree._classes.DecisionTreeClassifier'>
function_qualname:
    sklearn.tree.DecisionTreeClassifier.DecisionTreeClassifier
group:
    params
section:
    Parameters
text:
    class_weight : dict, list of dict or "balanced", default=None
    Weights associated with classes in the form ``{class_label: weight}``.
    If None, all classes are supposed to have weight one. For
    multi-output problems, a list of dicts can be provided in the same
    order as the columns of y.
param_name:
    class_weight
type_string:
    dict, list of dict or "balanced"
enum_elts:
    ['dict', 'list of dict', '"balanced"']

WARNING:skdoc:failed to parse type: 'list of int', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.tree._classes.DecisionTreeClassifier'>
section:
    Attributes
text:
    n_classes_ : int or list of int
    The number of classes (for single output problems),
    or a list containing the number of classes for each
    output (for multi-output problems).
param_name:
    n_classes_
type_string:
    int or list of int
enum_elts:
    ['int', 'list of int']

WARNING:skdoc:failed to parse type: 'Tree', context follows
WARNING:skdoc:--------- context:
klass:
    <class 'sklearn.tree._classes.DecisionTreeClassifier'>
section:
    Attributes
text:
    tree_ : Tree
    The underlying Tree object. Please refer to
    ``help(sklearn.tree._tree.Tree)`` for attributes of Tree object and
    :ref:`sphx_glr_auto_examples_tree_plot_unveil_tree_structure.py`
    for basic usage of these attributes.
param_name:
    tree_
type_string:
    Tree

WARNING:skdoc:failed to parse type: 'list of n_outputs             such arrays if n_outputs > 1', context follows
WARNING:skdoc:--------- context:
function:
    <bound method DecisionTreeClassifier.predict_log_proba of DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                           max_depth=None, max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_impurity_split=None,
                           min_samples_leaf=1, min_samples_split=2,
                           min_weight_fraction_leaf=0.0, presort='deprecated',
                           random_state=None, splitter='best')>
function_qualname:
    sklearn.tree.DecisionTreeClassifier.predict_log_proba
group:
    ret
section:
    Returns
text:
    proba : ndarray of shape (n_samples, n_classes) or list of n_outputs             such arrays if n_outputs > 1
    The class log-probabilities of the input samples. The order of the
    classes corresponds to that in the attribute :term:`classes_`.
param_name:
    proba
type_string:
    ndarray  or list of n_outputs             such arrays if n_outputs > 1
enum_elts:
    ['ndarray', 'list of n_outputs             such arrays if n_outputs > 1']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: '{"auto"', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.tree._classes.ExtraTreeClassifier'>
function_qualname:
    sklearn.tree.ExtraTreeClassifier.ExtraTreeClassifier
group:
    params
section:
    Parameters
text:
    max_features : int, float, {"auto", "sqrt", "log2"} or None, default="auto"
    The number of features to consider when looking for the best split:
param_name:
    max_features
type_string:
    int, float, {"auto", "sqrt", "log2"} or None
enum_elts:
    ['int', 'float', '{"auto"', '"sqrt"', '"log2"}', 'None']

WARNING:skdoc:failed to parse type: '"log2"}', context follows
WARNING:skdoc:--------- context:
function:
    <class 'sklearn.tree._classes.ExtraTreeClassifier'>
function_qualname:
    sklearn.tree.ExtraTreeClassifier.ExtraTreeClassifier
group:
    params
section:
    Parameters
text:
    max_features : int, float, {"auto", "sqrt", "log2"} or None, default="auto"
    The number of features to consider when looking for the best split:
param_name:
    max_features
type_string:
    int, float, {"auto", "sqrt", "log2"} or None
enum_elts:
    ['int', 'float', '{"auto"', '"sqrt"', '"log2"}', 'None']

WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:overriding **params=<class 'inspect._empty'> : Dict() to have type (string * Py.Object.t) list
WARNING:skdoc:failed to parse type: 'file object', context follows
WARNING:skdoc:--------- context:
function:
    <function export_graphviz at 0x7f1ea87245e0>
function_qualname:
    sklearn.tree.export_graphviz
group:
    params
section:
    Parameters
text:
    out_file : file object or string, optional (default=None)
    Handle or name of the output file. If ``None``, the result is
    returned as a string.
param_name:
    out_file
type_string:
    file object or string
enum_elts:
    ['file object', 'string']

WARNING:skdoc:failed to parse type: 'decision tree regressor', context follows
WARNING:skdoc:--------- context:
function:
    <function plot_tree at 0x7f1ea871a820>
function_qualname:
    sklearn.tree.plot_tree
group:
    params
section:
    Parameters
text:
    decision_tree : decision tree regressor or classifier
    The decision tree to be plotted.
param_name:
    decision_tree
type_string:
    decision tree regressor or classifier
enum_elts:
    ['decision tree regressor', 'classifier']

WARNING:skdoc:failed to parse type: 'classifier', context follows
WARNING:skdoc:--------- context:
function:
    <function plot_tree at 0x7f1ea871a820>
function_qualname:
    sklearn.tree.plot_tree
group:
    params
section:
    Parameters
text:
    decision_tree : decision tree regressor or classifier
    The decision tree to be plotted.
param_name:
    decision_tree
type_string:
    decision tree regressor or classifier
enum_elts:
    ['decision tree regressor', 'classifier']

WARNING:skdoc:failed to parse type: 'matplotlib axis', context follows
WARNING:skdoc:--------- context:
function:
    <function plot_tree at 0x7f1ea871a820>
function_qualname:
    sklearn.tree.plot_tree
group:
    params
section:
    Parameters
text:
    ax : matplotlib axis, optional (default=None)
    Axes to plot to. If None, use current axis. Any previous content
    is cleared.
param_name:
    ax
type_string:
    matplotlib axis

WARNING:skdoc:failed to parse type: 'list of artists', context follows
WARNING:skdoc:--------- context:
function:
    <function plot_tree at 0x7f1ea871a820>
function_qualname:
    sklearn.tree.plot_tree
group:
    ret
section:
    Returns
text:
    annotations : list of artists
    List containing the artists for the annotation boxes making up the
    tree.
param_name:
    annotations
type_string:
    list of artists

WARNING:skdoc:no signature for constructor of sklearn.utils.DataConversionWarning, disabling ctor
WARNING:skdoc:append: caught error building Class UpperName(Sklearn.Utils.Memory, sklearn.utils.Memory): Deprecated
WARNING:skdoc:append: caught error building Class UpperName(Sklearn.Utils.Parallel, sklearn.utils.Parallel): Deprecated
WARNING:skdoc:overriding *arrays : Enum([Arr(ArrayLike), UnknownType(tuple of input objects)]) to have type List(PyObject())
WARNING:skdoc:append: caught error building Class UpperName(Sklearn.Utils.Deprecated, sklearn.utils.deprecated): OutsideScope
WARNING:skdoc:overriding *iterables : Enum([SparsePyList(), ArrPyList(), PyObject()]) to have type List(PyObject())
WARNING:skdoc:failed to parse type: '1d boolean nd-array', context follows
WARNING:skdoc:--------- context:
function:
    <function indices_to_mask at 0x7f1eac85d8b0>
function_qualname:
    sklearn.utils.indices_to_mask
group:
    ret
section:
    Returns
text:
    mask : 1d boolean nd-array
    Boolean array that is True where indices are present, else False.
param_name:
    mask
type_string:
    1d boolean nd-array

WARNING:skdoc:doc_sig: could not parse synthetic sig for itemgetter: 'def __dummy_f_doc_sig(item, ...): pass' (def __dummy_f_doc_sig(item, ...): pass)
WARNING:skdoc:no signature for constructor of sklearn.utils.itemgetter, disabling ctor
WARNING:skdoc:no signature for murmurhash3_32 (<built-in function murmurhash3_32>)
WARNING:skdoc:failed to parse type: 'sequence of indexable data-structures', context follows
WARNING:skdoc:--------- context:
function:
    <function resample at 0x7f1eac85d430>
function_qualname:
    sklearn.utils.resample
group:
    params
section:
    Parameters
text:
    *arrays : sequence of indexable data-structures
    Indexable data-structures can be arrays, lists, dataframes or scipy
    sparse matrices with consistent first dimension.
param_name:
    arrays
type_string:
    sequence of indexable data-structures

WARNING:skdoc:failed to parse type: 'pandas.DataFrame', context follows
WARNING:skdoc:--------- context:
function:
    <function safe_indexing at 0x7f1eac85d280>
function_qualname:
    sklearn.utils.safe_indexing
group:
    params
section:
    Parameters
text:
    X : array-like, sparse-matrix, list, pandas.DataFrame, pandas.Series
    Data from which to sample rows, items or columns. `list` are only
    supported when `axis=0`.
param_name:
    X
type_string:
    array-like, sparse-matrix, list, pandas.DataFrame, pandas.Series
enum_elts:
    ['array-like', 'sparse-matrix', 'list', 'pandas.DataFrame', 'pandas.Series']

WARNING:skdoc:failed to parse type: 'pandas.Series', context follows
WARNING:skdoc:--------- context:
function:
    <function safe_indexing at 0x7f1eac85d280>
function_qualname:
    sklearn.utils.safe_indexing
group:
    params
section:
    Parameters
text:
    X : array-like, sparse-matrix, list, pandas.DataFrame, pandas.Series
    Data from which to sample rows, items or columns. `list` are only
    supported when `axis=0`.
param_name:
    X
type_string:
    array-like, sparse-matrix, list, pandas.DataFrame, pandas.Series
enum_elts:
    ['array-like', 'sparse-matrix', 'list', 'pandas.DataFrame', 'pandas.Series']

WARNING:skdoc:no signature for min_pos (<built-in function min_pos>)
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Arrayfuncs.Np, sklearn.utils.arrayfuncs.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Class_weight.Np, sklearn.utils.class_weight.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Deprecation.Functools, sklearn.utils.deprecation.functools): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Deprecation.Sys, sklearn.utils.deprecation.sys): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Deprecation.Warnings, sklearn.utils.deprecation.warnings): OutsideScope
WARNING:skdoc:no signature for csr_row_norms (<built-in function csr_row_norms>)
WARNING:skdoc:failed to parse type: ':', context follows
WARNING:skdoc:--------- context:
function:
    <function log_logistic at 0x7f1eac60eee0>
function_qualname:
    sklearn.utils.extmath.log_logistic
group:
    params
section:
    Parameters
text:
    out : array-like, shape: (M, N) or (M, ), optional:
    Preallocated output array.
param_name:
    out
type_string:
    array-like,:
enum_elts:
    ['array-like', ':']

WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Extmath.Linalg, sklearn.utils.extmath.linalg): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Extmath.Np, sklearn.utils.extmath.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Extmath.Sparse, sklearn.utils.extmath.sparse): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Extmath.Warnings, sklearn.utils.extmath.warnings): OutsideScope
WARNING:skdoc:failed to parse type: '{var}', context follows
WARNING:skdoc:--------- context:
function:
    <bound method MaskedArray.argmax of masked_array(data=None,
                 mask=False,
           fill_value='?',
                dtype=object)>
function_qualname:
    sklearn.utils.fixes.MaskedArray.argmax
group:
    params
section:
    Parameters
text:
    fill_value : {var}, optional
    Value used to fill in the masked values.  If None, the output of
    maximum_fill_value(self._data) is used instead.
param_name:
    fill_value
type_string:
    {var}

WARNING:skdoc:failed to parse type: '{integer_array}', context follows
WARNING:skdoc:--------- context:
function:
    <bound method MaskedArray.argmax of masked_array(data=None,
                 mask=False,
           fill_value='?',
                dtype=object)>
function_qualname:
    sklearn.utils.fixes.MaskedArray.argmax
group:
    ret
section:
    Returns
text:
    index_array : {integer_array}
param_name:
    index_array
type_string:
    {integer_array}

WARNING:skdoc:failed to parse type: 'var', context follows
WARNING:skdoc:--------- context:
function:
    <bound method MaskedArray.compress of masked_array(data=None,
                 mask=False,
           fill_value='?',
                dtype=object)>
function_qualname:
    sklearn.utils.fixes.MaskedArray.compress
group:
    params
section:
    Parameters
text:
    condition : var
    Boolean 1-d array selecting which entries to return. If len(condition)
    is less than the size of a along the axis, then output is truncated
    to length of condition array.
param_name:
    condition
type_string:
    var

WARNING:skdoc:no type string found for 'out' in '{None, ndarray}, optional', context follows
WARNING:skdoc:--------- context:
function:
    <bound method MaskedArray.compress of masked_array(data=None,
                 mask=False,
           fill_value='?',
                dtype=object)>
function_qualname:
    sklearn.utils.fixes.MaskedArray.compress
group:
    params
section:
    Parameters

WARNING:skdoc:doc_signature() raised an exception: list index out of range
WARNING:skdoc:no signature for MaskedArray.conj (<built-in method conj of MaskedArray object at 0x7f1ea4267890>)
WARNING:skdoc:failed to parse type: 'masked_array_like', context follows
WARNING:skdoc:--------- context:
function:
    <bound method MaskedArray.dot of masked_array(data=None,
                 mask=False,
           fill_value='?',
                dtype=object)>
function_qualname:
    sklearn.utils.fixes.MaskedArray.dot
group:
    params
section:
    Parameters
text:
    b : masked_array_like
    Inputs array.
param_name:
    b
type_string:
    masked_array_like

WARNING:skdoc:failed to parse type: 'masked_array', context follows
WARNING:skdoc:--------- context:
function:
    <bound method MaskedArray.dot of masked_array(data=None,
                 mask=False,
           fill_value='?',
                dtype=object)>
function_qualname:
    sklearn.utils.fixes.MaskedArray.dot
group:
    params
section:
    Parameters
text:
    out : masked_array, optional
    Output argument. This must have the exact kind that would be
    returned if it was not used. In particular, it must have the
    right type, must be C-contiguous, and its dtype must be the
    dtype that would be returned for `ma.dot(a,b)`. This is a
    performance feature. Therefore, if these conditions are not
    met, an exception is raised, instead of attempting to be
    flexible.
param_name:
    out
type_string:
    masked_array

WARNING:skdoc:failed to parse type: 'Path', context follows
WARNING:skdoc:--------- context:
function:
    <built-in method dump of MaskedArray object at 0x7f1ea4267890>
function_qualname:
    sklearn.utils.fixes.MaskedArray.dump
group:
    params
section:
    Parameters
text:
    file : str or Path
    A string naming the dump file.
param_name:
    file
type_string:
    str or Path
enum_elts:
    ['str', 'Path']

WARNING:skdoc:doc_signature() raised an exception: list index out of range
WARNING:skdoc:no signature for MaskedArray.dumps (<built-in method dumps of MaskedArray object at 0x7f1ea4267890>)
WARNING:skdoc:failed to parse type: 'Standard Python scalar object', context follows
WARNING:skdoc:--------- context:
function:
    <built-in method item of MaskedArray object at 0x7f1ea4267890>
function_qualname:
    sklearn.utils.fixes.MaskedArray.item
group:
    ret
section:
    Returns
text:
    z : Standard Python scalar object
    A copy of the specified element of the array as a suitable
    Python scalar
param_name:
    z
type_string:
    Standard Python scalar object

WARNING:skdoc:failed to parse type: '1-D array_like', context follows
WARNING:skdoc:--------- context:
function:
    <bound method MaskedArray.put of masked_array(data=None,
                 mask=False,
           fill_value='?',
                dtype=object)>
function_qualname:
    sklearn.utils.fixes.MaskedArray.put
group:
    params
section:
    Parameters
text:
    indices : 1-D array_like
    Target indices, interpreted as integers.
param_name:
    indices
type_string:
    1-D array_like

WARNING:skdoc:failed to parse type: '`n` ints', context follows
WARNING:skdoc:--------- context:
function:
    <bound method _arraymethod.<locals>.wrapped_method of masked_array(data=None,
                 mask=False,
           fill_value='?',
                dtype=object)>
function_qualname:
    sklearn.utils.fixes.MaskedArray.transpose
group:
    params
section:
    Parameters
text:
    axes : None, tuple of ints, or `n` ints
param_name:
    axes
type_string:
    None, tuple of ints, or `n` ints
enum_elts:
    ['None', 'tuple of ints', '`n` ints']

WARNING:skdoc:failed to parse type: 'ndarray sub-class', context follows
WARNING:skdoc:--------- context:
function:
    <bound method MaskedArray.view of masked_array(data=None,
                 mask=False,
           fill_value='?',
                dtype=object)>
function_qualname:
    sklearn.utils.fixes.MaskedArray.view
group:
    params
section:
    Parameters
text:
    dtype : data-type or ndarray sub-class, optional
    Data-type descriptor of the returned view, e.g., float32 or int16.
    The default, None, results in the view having the same data-type
    as `a`. As with ``ndarray.view``, dtype can also be specified as
    an ndarray sub-class, which then specifies the type of the
    returned object (this is equivalent to setting the ``type``
    parameter).
param_name:
    dtype
type_string:
    data-type or ndarray sub-class
enum_elts:
    ['data-type', 'ndarray sub-class']

WARNING:skdoc:failed to parse type: 'Python type', context follows
WARNING:skdoc:--------- context:
function:
    <bound method MaskedArray.view of masked_array(data=None,
                 mask=False,
           fill_value='?',
                dtype=object)>
function_qualname:
    sklearn.utils.fixes.MaskedArray.view
group:
    params
section:
    Parameters
text:
    type : Python type, optional
    Type of the returned view, either ndarray or a subclass.  The
    default None results in type preservation.
param_name:
    type
type_string:
    Python type

WARNING:skdoc:failed to parse type: 'dense matrix', context follows
WARNING:skdoc:--------- context:
function:
    <function lobpcg at 0x7f1eca0c74c0>
function_qualname:
    sklearn.utils.fixes.lobpcg
group:
    params
section:
    Parameters
text:
    A : {sparse matrix, dense matrix, LinearOperator}
    The symmetric linear operator of the problem, usually a
    sparse matrix.  Often called the "stiffness matrix".
param_name:
    A
type_string:
    {sparse matrix, dense matrix, LinearOperator}
enum_elts:
    ['sparse matrix', 'dense matrix', 'LinearOperator']

WARNING:skdoc:failed to parse type: 'float32', context follows
WARNING:skdoc:--------- context:
function:
    <function lobpcg at 0x7f1eca0c74c0>
function_qualname:
    sklearn.utils.fixes.lobpcg
group:
    params
section:
    Parameters
text:
    X : ndarray, float32 or float64
    Initial approximation to the ``k`` eigenvectors (non-sparse). If `A`
    has ``shape=(n,n)`` then `X` should have shape ``shape=(n,k)``.
param_name:
    X
type_string:
    ndarray, float32 or float64
enum_elts:
    ['ndarray', 'float32', 'float64']

WARNING:skdoc:failed to parse type: 'float64', context follows
WARNING:skdoc:--------- context:
function:
    <function lobpcg at 0x7f1eca0c74c0>
function_qualname:
    sklearn.utils.fixes.lobpcg
group:
    params
section:
    Parameters
text:
    X : ndarray, float32 or float64
    Initial approximation to the ``k`` eigenvectors (non-sparse). If `A`
    has ``shape=(n,n)`` then `X` should have shape ``shape=(n,k)``.
param_name:
    X
type_string:
    ndarray, float32 or float64
enum_elts:
    ['ndarray', 'float32', 'float64']

WARNING:skdoc:failed to parse type: 'ndarray of float', context follows
WARNING:skdoc:--------- context:
function:
    <function lsqr at 0x7f1eca1263a0>
function_qualname:
    sklearn.utils.fixes.sparse_lsqr
group:
    ret
section:
    Returns
text:
    x : ndarray of float
    The final solution.
param_name:
    x
type_string:
    ndarray of float

WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Fixes.Np, sklearn.utils.fixes.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Fixes.Sp, sklearn.utils.fixes.sp): OutsideScope
WARNING:skdoc:no signature for graph_shortest_path (<built-in function graph_shortest_path>)
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Graph.Sparse, sklearn.utils.graph.sparse): OutsideScope
WARNING:skdoc:doc_signature() raised an exception: list index out of range
WARNING:skdoc:no signature for float64.as_integer_ratio (<built-in method as_integer_ratio of numpy.float64 object at 0x7f1ea41d80d0>)
WARNING:skdoc:no signature for float64.conj (<built-in method conj of numpy.float64 object at 0x7f1ea41d80d0>)
WARNING:skdoc:no signature for float64.tobytes (<built-in method tobytes of numpy.float64 object at 0x7f1ea41d80d0>)
WARNING:skdoc:no signature for constructor of sklearn.utils.graph_shortest_path.ITYPE, disabling ctor
WARNING:skdoc:no signature for int32.conj (<built-in method conj of numpy.int32 object at 0x7f1ea41d88f0>)
WARNING:skdoc:no signature for int32.tobytes (<built-in method tobytes of numpy.int32 object at 0x7f1ea41d88f0>)
WARNING:skdoc:no signature for graph_shortest_path (<built-in function graph_shortest_path>)
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Graph_shortest_path.Np, sklearn.utils.graph_shortest_path.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Inspect, sklearn.utils.inspect): OutsideScope
WARNING:skdoc:doc_sig: could not parse synthetic sig for attrgetter: 'def __dummy_f_doc_sig(attr, ...): pass' (def __dummy_f_doc_sig(attr, ...): pass)
WARNING:skdoc:no signature for constructor of sklearn.utils.metaestimators.attrgetter, disabling ctor
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Metaestimators.Np, sklearn.utils.metaestimators.np): OutsideScope
WARNING:skdoc:not wrapping property LowerName(Sklearn.Utils.Multiclass.Spmatrix.nnz, sklearn.utils.multiclass.spmatrix.nnz): <property object at 0x7f1eb1a11ef0>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Utils.Multiclass.Spmatrix.shape, sklearn.utils.multiclass.spmatrix.shape): <property object at 0x7f1eb1fa7e00>
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Multiclass.Np, sklearn.utils.multiclass.np): OutsideScope
WARNING:skdoc:no signature for murmurhash3_32 (<built-in function murmurhash3_32>)
WARNING:skdoc:no signature for murmurhash3_bytes_array_s32 (<built-in function murmurhash3_bytes_array_s32>)
WARNING:skdoc:no signature for murmurhash3_bytes_array_u32 (<built-in function murmurhash3_bytes_array_u32>)
WARNING:skdoc:no signature for murmurhash3_bytes_s32 (<built-in function murmurhash3_bytes_s32>)
WARNING:skdoc:no signature for murmurhash3_bytes_u32 (<built-in function murmurhash3_bytes_u32>)
WARNING:skdoc:no signature for murmurhash3_int_s32 (<built-in function murmurhash3_int_s32>)
WARNING:skdoc:no signature for murmurhash3_int_u32 (<built-in function murmurhash3_int_u32>)
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Murmurhash.Np, sklearn.utils.murmurhash.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Np, sklearn.utils.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Numbers, sklearn.utils.numbers): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Optimize.Np, sklearn.utils.optimize.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Optimize.Warnings, sklearn.utils.optimize.warnings): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Pkgutil, sklearn.utils.pkgutil): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Platform, sklearn.utils.platform): OutsideScope
WARNING:skdoc:no signature for sample_without_replacement (<built-in function sample_without_replacement>)
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Random.Array, sklearn.utils.random.array): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Random.Np, sklearn.utils.random.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Random.Sp, sklearn.utils.random.sp): OutsideScope
WARNING:skdoc:failed to parse type: 'float array', context follows
WARNING:skdoc:--------- context:
function:
    <function incr_mean_variance_axis at 0x7f1eac625940>
function_qualname:
    sklearn.utils.sparsefuncs.incr_mean_variance_axis
group:
    params
section:
    Parameters
text:
    last_mean : float array with shape (n_features,)
    Array of feature-wise means to update with the new data X.
param_name:
    last_mean
type_string:
    float array

WARNING:skdoc:failed to parse type: 'scipy.sparse.csc_matrix', context follows
WARNING:skdoc:--------- context:
function:
    <function inplace_swap_row_csc at 0x7f1eac625af0>
function_qualname:
    sklearn.utils.sparsefuncs.inplace_swap_row_csc
group:
    params
section:
    Parameters
text:
    X : scipy.sparse.csc_matrix, shape=(n_samples, n_features)
    Matrix whose two rows are to be swapped.
param_name:
    X
type_string:
    scipy.sparse.csc_matrix

WARNING:skdoc:failed to parse type: 'scipy.sparse.csr_matrix', context follows
WARNING:skdoc:--------- context:
function:
    <function inplace_swap_row_csr at 0x7f1eac625b80>
function_qualname:
    sklearn.utils.sparsefuncs.inplace_swap_row_csr
group:
    params
section:
    Parameters
text:
    X : scipy.sparse.csr_matrix, shape=(n_samples, n_features)
    Matrix whose two rows are to be swapped.
param_name:
    X
type_string:
    scipy.sparse.csr_matrix

WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Sparsefuncs.Np, sklearn.utils.sparsefuncs.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Sparsefuncs.Sp, sklearn.utils.sparsefuncs.sp): OutsideScope
WARNING:skdoc:no signature for csc_mean_variance_axis0 (<built-in function csc_mean_variance_axis0>)
WARNING:skdoc:no signature for csr_mean_variance_axis0 (<built-in function csr_mean_variance_axis0>)
WARNING:skdoc:no signature for csr_row_norms (<built-in function csr_row_norms>)
WARNING:skdoc:no signature for incr_mean_variance_axis0 (<built-in function incr_mean_variance_axis0>)
WARNING:skdoc:no signature for inplace_csr_row_normalize_l1 (<built-in function inplace_csr_row_normalize_l1>)
WARNING:skdoc:no signature for inplace_csr_row_normalize_l2 (<built-in function inplace_csr_row_normalize_l2>)
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Sparsefuncs_fast.Np, sklearn.utils.sparsefuncs_fast.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Sparsefuncs_fast.Sp, sklearn.utils.sparsefuncs_fast.sp): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Stats.Np, sklearn.utils.stats.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Struct, sklearn.utils.struct): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Timeit, sklearn.utils.timeit): OutsideScope
WARNING:skdoc:no signature for constructor of sklearn.utils.validation.ComplexWarning, disabling ctor
WARNING:skdoc:not wrapping property LowerName(Sklearn.Utils.Validation.Parameter.annotation, sklearn.utils.validation.Parameter.annotation): <property object at 0x7f1ed46cd4a0>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Utils.Validation.Parameter.default, sklearn.utils.validation.Parameter.default): <property object at 0x7f1ed46cd450>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Utils.Validation.Parameter.kind, sklearn.utils.validation.Parameter.kind): <property object at 0x7f1ed46cd4f0>
WARNING:skdoc:not wrapping property LowerName(Sklearn.Utils.Validation.Parameter.name, sklearn.utils.validation.Parameter.name): <property object at 0x7f1ed46cd2c0>
WARNING:skdoc:overriding *arrays : Enum([Arr(ArrayLike), UnknownType(tuple of input objects)]) to have type List(PyObject())
WARNING:skdoc:overriding *iterables : Enum([SparsePyList(), ArrPyList(), PyObject()]) to have type List(PyObject())
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Validation.Joblib, sklearn.utils.validation.joblib): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Validation.Np, sklearn.utils.validation.np): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Validation.Numbers, sklearn.utils.validation.numbers): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Validation.Sp, sklearn.utils.validation.sp): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Validation.Warnings, sklearn.utils.validation.warnings): OutsideScope
WARNING:skdoc:append: caught error building Module UpperName(Sklearn.Utils.Warnings, sklearn.utils.warnings): OutsideScope
INFO:skdoc:writing package sklearn to .
WARNING:skdoc:overrides: keys not triggered: {'^NearestCentroid\\.fit$', '^SpectralBiclustering$'}
WARNING:skdoc:skdoc.py:0:type BaseEstimator: was emitted under 2 names:
WARNING:skdoc:- sklearn.base.BaseEstimator / Sklearn.Base.BaseEstimator
WARNING:skdoc:- sklearn.base.BaseEstimator.BaseEstimator / Sklearn.Base.BaseEstimator.create
WARNING:skdoc:skdoc.py:0:type BiclusterMixin: was emitted under 2 names:
WARNING:skdoc:- sklearn.base.BiclusterMixin / Sklearn.Base.BiclusterMixin
WARNING:skdoc:- sklearn.base.BiclusterMixin.BiclusterMixin / Sklearn.Base.BiclusterMixin.create
WARNING:skdoc:skdoc.py:0:type ClassifierMixin: was emitted under 2 names:
WARNING:skdoc:- sklearn.base.ClassifierMixin / Sklearn.Base.ClassifierMixin
WARNING:skdoc:- sklearn.base.ClassifierMixin.ClassifierMixin / Sklearn.Base.ClassifierMixin.create
WARNING:skdoc:skdoc.py:0:type ClusterMixin: was emitted under 2 names:
WARNING:skdoc:- sklearn.base.ClusterMixin / Sklearn.Base.ClusterMixin
WARNING:skdoc:- sklearn.base.ClusterMixin.ClusterMixin / Sklearn.Base.ClusterMixin.create
WARNING:skdoc:skdoc.py:0:type DensityMixin: was emitted under 2 names:
WARNING:skdoc:- sklearn.base.DensityMixin / Sklearn.Base.DensityMixin
WARNING:skdoc:- sklearn.base.DensityMixin.DensityMixin / Sklearn.Base.DensityMixin.create
WARNING:skdoc:skdoc.py:0:type MetaEstimatorMixin: was emitted under 2 names:
WARNING:skdoc:- sklearn.base.MetaEstimatorMixin / Sklearn.Base.MetaEstimatorMixin
WARNING:skdoc:- sklearn.base.MetaEstimatorMixin.MetaEstimatorMixin / Sklearn.Base.MetaEstimatorMixin.create
WARNING:skdoc:skdoc.py:0:type MultiOutputMixin: was emitted under 2 names:
WARNING:skdoc:- sklearn.base.MultiOutputMixin / Sklearn.Base.MultiOutputMixin
WARNING:skdoc:- sklearn.base.MultiOutputMixin.MultiOutputMixin / Sklearn.Base.MultiOutputMixin.create
WARNING:skdoc:skdoc.py:0:type OutlierMixin: was emitted under 2 names:
WARNING:skdoc:- sklearn.base.OutlierMixin / Sklearn.Base.OutlierMixin
WARNING:skdoc:- sklearn.base.OutlierMixin.OutlierMixin / Sklearn.Base.OutlierMixin.create
WARNING:skdoc:skdoc.py:0:type RegressorMixin: was emitted under 2 names:
WARNING:skdoc:- sklearn.base.RegressorMixin / Sklearn.Base.RegressorMixin
WARNING:skdoc:- sklearn.base.RegressorMixin.RegressorMixin / Sklearn.Base.RegressorMixin.create
WARNING:skdoc:skdoc.py:0:type TransformerMixin: was emitted under 2 names:
WARNING:skdoc:- sklearn.base.TransformerMixin / Sklearn.Base.TransformerMixin
WARNING:skdoc:- sklearn.base.TransformerMixin.TransformerMixin / Sklearn.Base.TransformerMixin.create
WARNING:skdoc:skdoc.py:0:type defaultdict: was emitted under 2 names:
WARNING:skdoc:- sklearn.base.defaultdict / Sklearn.Base.Defaultdict
WARNING:skdoc:- sklearn.base.defaultdict.defaultdict / Sklearn.Base.Defaultdict.defaultdict
WARNING:skdoc:skdoc.py:0:function is_regressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.base.is_regressor / Sklearn.Base.is_regressor
WARNING:skdoc:- sklearn.multiclass.is_regressor / Sklearn.Multiclass.is_regressor
WARNING:skdoc:skdoc.py:0:type CalibratedClassifierCV: was emitted under 2 names:
WARNING:skdoc:- sklearn.calibration.CalibratedClassifierCV / Sklearn.Calibration.CalibratedClassifierCV
WARNING:skdoc:- sklearn.calibration.CalibratedClassifierCV.CalibratedClassifierCV / Sklearn.Calibration.CalibratedClassifierCV.create
WARNING:skdoc:skdoc.py:0:type LabelEncoder: was emitted under 2 names:
WARNING:skdoc:- sklearn.calibration.LabelEncoder / Sklearn.Calibration.LabelEncoder
WARNING:skdoc:- sklearn.calibration.LabelEncoder.LabelEncoder / Sklearn.Calibration.LabelEncoder.create
WARNING:skdoc:skdoc.py:0:function check_cv: was emitted under 2 names:
WARNING:skdoc:- sklearn.calibration.check_cv / Sklearn.Calibration.check_cv
WARNING:skdoc:- sklearn.model_selection.check_cv / Sklearn.Model_selection.check_cv
WARNING:skdoc:skdoc.py:0:ufunc expit: was emitted under 2 names:
WARNING:skdoc:- sklearn.calibration.expit / Sklearn.Calibration.expit
WARNING:skdoc:- sklearn.discriminant_analysis.expit / Sklearn.Discriminant_analysis.expit
WARNING:skdoc:skdoc.py:0:type AffinityPropagation: was emitted under 2 names:
WARNING:skdoc:- sklearn.cluster.AffinityPropagation / Sklearn.Cluster.AffinityPropagation
WARNING:skdoc:- sklearn.cluster.AffinityPropagation.AffinityPropagation / Sklearn.Cluster.AffinityPropagation.create
WARNING:skdoc:skdoc.py:0:type AgglomerativeClustering: was emitted under 2 names:
WARNING:skdoc:- sklearn.cluster.AgglomerativeClustering / Sklearn.Cluster.AgglomerativeClustering
WARNING:skdoc:- sklearn.cluster.AgglomerativeClustering.AgglomerativeClustering / Sklearn.Cluster.AgglomerativeClustering.create
WARNING:skdoc:skdoc.py:0:type Birch: was emitted under 2 names:
WARNING:skdoc:- sklearn.cluster.Birch / Sklearn.Cluster.Birch
WARNING:skdoc:- sklearn.cluster.Birch.Birch / Sklearn.Cluster.Birch.create
WARNING:skdoc:skdoc.py:0:type DBSCAN: was emitted under 2 names:
WARNING:skdoc:- sklearn.cluster.DBSCAN / Sklearn.Cluster.DBSCAN
WARNING:skdoc:- sklearn.cluster.DBSCAN.DBSCAN / Sklearn.Cluster.DBSCAN.create
WARNING:skdoc:skdoc.py:0:type FeatureAgglomeration: was emitted under 2 names:
WARNING:skdoc:- sklearn.cluster.FeatureAgglomeration / Sklearn.Cluster.FeatureAgglomeration
WARNING:skdoc:- sklearn.cluster.FeatureAgglomeration.FeatureAgglomeration / Sklearn.Cluster.FeatureAgglomeration.create
WARNING:skdoc:skdoc.py:0:type KMeans: was emitted under 2 names:
WARNING:skdoc:- sklearn.cluster.KMeans / Sklearn.Cluster.KMeans
WARNING:skdoc:- sklearn.cluster.KMeans.KMeans / Sklearn.Cluster.KMeans.create
WARNING:skdoc:skdoc.py:0:type MeanShift: was emitted under 2 names:
WARNING:skdoc:- sklearn.cluster.MeanShift / Sklearn.Cluster.MeanShift
WARNING:skdoc:- sklearn.cluster.MeanShift.MeanShift / Sklearn.Cluster.MeanShift.create
WARNING:skdoc:skdoc.py:0:type MiniBatchKMeans: was emitted under 2 names:
WARNING:skdoc:- sklearn.cluster.MiniBatchKMeans / Sklearn.Cluster.MiniBatchKMeans
WARNING:skdoc:- sklearn.cluster.MiniBatchKMeans.MiniBatchKMeans / Sklearn.Cluster.MiniBatchKMeans.create
WARNING:skdoc:skdoc.py:0:type OPTICS: was emitted under 2 names:
WARNING:skdoc:- sklearn.cluster.OPTICS / Sklearn.Cluster.OPTICS
WARNING:skdoc:- sklearn.cluster.OPTICS.OPTICS / Sklearn.Cluster.OPTICS.create
WARNING:skdoc:skdoc.py:0:ABCMeta SpectralBiclustering: was emitted under 2 names:
WARNING:skdoc:- sklearn.cluster.SpectralBiclustering / Sklearn.Cluster.SpectralBiclustering
WARNING:skdoc:- sklearn.cluster.SpectralBiclustering.SpectralBiclustering / Sklearn.Cluster.SpectralBiclustering.create
WARNING:skdoc:skdoc.py:0:type SpectralClustering: was emitted under 2 names:
WARNING:skdoc:- sklearn.cluster.SpectralClustering / Sklearn.Cluster.SpectralClustering
WARNING:skdoc:- sklearn.cluster.SpectralClustering.SpectralClustering / Sklearn.Cluster.SpectralClustering.create
WARNING:skdoc:skdoc.py:0:ABCMeta SpectralCoclustering: was emitted under 2 names:
WARNING:skdoc:- sklearn.cluster.SpectralCoclustering / Sklearn.Cluster.SpectralCoclustering
WARNING:skdoc:- sklearn.cluster.SpectralCoclustering.SpectralCoclustering / Sklearn.Cluster.SpectralCoclustering.create
WARNING:skdoc:skdoc.py:0:ABCMeta ColumnTransformer: was emitted under 2 names:
WARNING:skdoc:- sklearn.compose.ColumnTransformer / Sklearn.Compose.ColumnTransformer
WARNING:skdoc:- sklearn.compose.ColumnTransformer.ColumnTransformer / Sklearn.Compose.ColumnTransformer.create
WARNING:skdoc:skdoc.py:0:type TransformedTargetRegressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.compose.TransformedTargetRegressor / Sklearn.Compose.TransformedTargetRegressor
WARNING:skdoc:- sklearn.compose.TransformedTargetRegressor.TransformedTargetRegressor / Sklearn.Compose.TransformedTargetRegressor.create
WARNING:skdoc:skdoc.py:0:type make_column_selector: was emitted under 2 names:
WARNING:skdoc:- sklearn.compose.make_column_selector / Sklearn.Compose.Make_column_selector
WARNING:skdoc:- sklearn.compose.make_column_selector.make_column_selector / Sklearn.Compose.Make_column_selector.create
WARNING:skdoc:skdoc.py:0:type EllipticEnvelope: was emitted under 2 names:
WARNING:skdoc:- sklearn.covariance.EllipticEnvelope / Sklearn.Covariance.EllipticEnvelope
WARNING:skdoc:- sklearn.covariance.EllipticEnvelope.EllipticEnvelope / Sklearn.Covariance.EllipticEnvelope.create
WARNING:skdoc:skdoc.py:0:type EmpiricalCovariance: was emitted under 2 names:
WARNING:skdoc:- sklearn.covariance.EmpiricalCovariance / Sklearn.Covariance.EmpiricalCovariance
WARNING:skdoc:- sklearn.covariance.EmpiricalCovariance.EmpiricalCovariance / Sklearn.Covariance.EmpiricalCovariance.create
WARNING:skdoc:skdoc.py:0:type GraphicalLasso: was emitted under 2 names:
WARNING:skdoc:- sklearn.covariance.GraphicalLasso / Sklearn.Covariance.GraphicalLasso
WARNING:skdoc:- sklearn.covariance.GraphicalLasso.GraphicalLasso / Sklearn.Covariance.GraphicalLasso.create
WARNING:skdoc:skdoc.py:0:type GraphicalLassoCV: was emitted under 2 names:
WARNING:skdoc:- sklearn.covariance.GraphicalLassoCV / Sklearn.Covariance.GraphicalLassoCV
WARNING:skdoc:- sklearn.covariance.GraphicalLassoCV.GraphicalLassoCV / Sklearn.Covariance.GraphicalLassoCV.create
WARNING:skdoc:skdoc.py:0:type LedoitWolf: was emitted under 2 names:
WARNING:skdoc:- sklearn.covariance.LedoitWolf / Sklearn.Covariance.LedoitWolf
WARNING:skdoc:- sklearn.covariance.LedoitWolf.LedoitWolf / Sklearn.Covariance.LedoitWolf.create
WARNING:skdoc:skdoc.py:0:type MinCovDet: was emitted under 2 names:
WARNING:skdoc:- sklearn.covariance.MinCovDet / Sklearn.Covariance.MinCovDet
WARNING:skdoc:- sklearn.covariance.MinCovDet.MinCovDet / Sklearn.Covariance.MinCovDet.create
WARNING:skdoc:skdoc.py:0:type OAS: was emitted under 2 names:
WARNING:skdoc:- sklearn.covariance.OAS / Sklearn.Covariance.OAS
WARNING:skdoc:- sklearn.covariance.OAS.OAS / Sklearn.Covariance.OAS.create
WARNING:skdoc:skdoc.py:0:type ShrunkCovariance: was emitted under 2 names:
WARNING:skdoc:- sklearn.covariance.ShrunkCovariance / Sklearn.Covariance.ShrunkCovariance
WARNING:skdoc:- sklearn.covariance.ShrunkCovariance.ShrunkCovariance / Sklearn.Covariance.ShrunkCovariance.create
WARNING:skdoc:skdoc.py:0:function empirical_covariance: was emitted under 2 names:
WARNING:skdoc:- sklearn.covariance.empirical_covariance / Sklearn.Covariance.empirical_covariance
WARNING:skdoc:- sklearn.discriminant_analysis.empirical_covariance / Sklearn.Discriminant_analysis.empirical_covariance
WARNING:skdoc:skdoc.py:0:function ledoit_wolf: was emitted under 2 names:
WARNING:skdoc:- sklearn.covariance.ledoit_wolf / Sklearn.Covariance.ledoit_wolf
WARNING:skdoc:- sklearn.discriminant_analysis.ledoit_wolf / Sklearn.Discriminant_analysis.ledoit_wolf
WARNING:skdoc:skdoc.py:0:function shrunk_covariance: was emitted under 2 names:
WARNING:skdoc:- sklearn.covariance.shrunk_covariance / Sklearn.Covariance.shrunk_covariance
WARNING:skdoc:- sklearn.discriminant_analysis.shrunk_covariance / Sklearn.Discriminant_analysis.shrunk_covariance
WARNING:skdoc:skdoc.py:0:ABCMeta CCA: was emitted under 2 names:
WARNING:skdoc:- sklearn.cross_decomposition.CCA / Sklearn.Cross_decomposition.CCA
WARNING:skdoc:- sklearn.cross_decomposition.CCA.CCA / Sklearn.Cross_decomposition.CCA.create
WARNING:skdoc:skdoc.py:0:ABCMeta PLSCanonical: was emitted under 2 names:
WARNING:skdoc:- sklearn.cross_decomposition.PLSCanonical / Sklearn.Cross_decomposition.PLSCanonical
WARNING:skdoc:- sklearn.cross_decomposition.PLSCanonical.PLSCanonical / Sklearn.Cross_decomposition.PLSCanonical.create
WARNING:skdoc:skdoc.py:0:ABCMeta PLSRegression: was emitted under 2 names:
WARNING:skdoc:- sklearn.cross_decomposition.PLSRegression / Sklearn.Cross_decomposition.PLSRegression
WARNING:skdoc:- sklearn.cross_decomposition.PLSRegression.PLSRegression / Sklearn.Cross_decomposition.PLSRegression.create
WARNING:skdoc:skdoc.py:0:type PLSSVD: was emitted under 2 names:
WARNING:skdoc:- sklearn.cross_decomposition.PLSSVD / Sklearn.Cross_decomposition.PLSSVD
WARNING:skdoc:- sklearn.cross_decomposition.PLSSVD.PLSSVD / Sklearn.Cross_decomposition.PLSSVD.create
WARNING:skdoc:skdoc.py:0:type DictionaryLearning: was emitted under 2 names:
WARNING:skdoc:- sklearn.decomposition.DictionaryLearning / Sklearn.Decomposition.DictionaryLearning
WARNING:skdoc:- sklearn.decomposition.DictionaryLearning.DictionaryLearning / Sklearn.Decomposition.DictionaryLearning.create
WARNING:skdoc:skdoc.py:0:type FactorAnalysis: was emitted under 2 names:
WARNING:skdoc:- sklearn.decomposition.FactorAnalysis / Sklearn.Decomposition.FactorAnalysis
WARNING:skdoc:- sklearn.decomposition.FactorAnalysis.FactorAnalysis / Sklearn.Decomposition.FactorAnalysis.create
WARNING:skdoc:skdoc.py:0:type FastICA: was emitted under 2 names:
WARNING:skdoc:- sklearn.decomposition.FastICA / Sklearn.Decomposition.FastICA
WARNING:skdoc:- sklearn.decomposition.FastICA.FastICA / Sklearn.Decomposition.FastICA.create
WARNING:skdoc:skdoc.py:0:ABCMeta IncrementalPCA: was emitted under 2 names:
WARNING:skdoc:- sklearn.decomposition.IncrementalPCA / Sklearn.Decomposition.IncrementalPCA
WARNING:skdoc:- sklearn.decomposition.IncrementalPCA.IncrementalPCA / Sklearn.Decomposition.IncrementalPCA.create
WARNING:skdoc:skdoc.py:0:type KernelPCA: was emitted under 2 names:
WARNING:skdoc:- sklearn.decomposition.KernelPCA / Sklearn.Decomposition.KernelPCA
WARNING:skdoc:- sklearn.decomposition.KernelPCA.KernelPCA / Sklearn.Decomposition.KernelPCA.create
WARNING:skdoc:skdoc.py:0:type LatentDirichletAllocation: was emitted under 2 names:
WARNING:skdoc:- sklearn.decomposition.LatentDirichletAllocation / Sklearn.Decomposition.LatentDirichletAllocation
WARNING:skdoc:- sklearn.decomposition.LatentDirichletAllocation.LatentDirichletAllocation / Sklearn.Decomposition.LatentDirichletAllocation.create
WARNING:skdoc:skdoc.py:0:type MiniBatchDictionaryLearning: was emitted under 2 names:
WARNING:skdoc:- sklearn.decomposition.MiniBatchDictionaryLearning / Sklearn.Decomposition.MiniBatchDictionaryLearning
WARNING:skdoc:- sklearn.decomposition.MiniBatchDictionaryLearning.MiniBatchDictionaryLearning / Sklearn.Decomposition.MiniBatchDictionaryLearning.create
WARNING:skdoc:skdoc.py:0:type MiniBatchSparsePCA: was emitted under 2 names:
WARNING:skdoc:- sklearn.decomposition.MiniBatchSparsePCA / Sklearn.Decomposition.MiniBatchSparsePCA
WARNING:skdoc:- sklearn.decomposition.MiniBatchSparsePCA.MiniBatchSparsePCA / Sklearn.Decomposition.MiniBatchSparsePCA.create
WARNING:skdoc:skdoc.py:0:type NMF: was emitted under 2 names:
WARNING:skdoc:- sklearn.decomposition.NMF / Sklearn.Decomposition.NMF
WARNING:skdoc:- sklearn.decomposition.NMF.NMF / Sklearn.Decomposition.NMF.create
WARNING:skdoc:skdoc.py:0:ABCMeta PCA: was emitted under 2 names:
WARNING:skdoc:- sklearn.decomposition.PCA / Sklearn.Decomposition.PCA
WARNING:skdoc:- sklearn.decomposition.PCA.PCA / Sklearn.Decomposition.PCA.create
WARNING:skdoc:skdoc.py:0:type SparseCoder: was emitted under 2 names:
WARNING:skdoc:- sklearn.decomposition.SparseCoder / Sklearn.Decomposition.SparseCoder
WARNING:skdoc:- sklearn.decomposition.SparseCoder.SparseCoder / Sklearn.Decomposition.SparseCoder.create
WARNING:skdoc:skdoc.py:0:type SparsePCA: was emitted under 2 names:
WARNING:skdoc:- sklearn.decomposition.SparsePCA / Sklearn.Decomposition.SparsePCA
WARNING:skdoc:- sklearn.decomposition.SparsePCA.SparsePCA / Sklearn.Decomposition.SparsePCA.create
WARNING:skdoc:skdoc.py:0:type TruncatedSVD: was emitted under 2 names:
WARNING:skdoc:- sklearn.decomposition.TruncatedSVD / Sklearn.Decomposition.TruncatedSVD
WARNING:skdoc:- sklearn.decomposition.TruncatedSVD.TruncatedSVD / Sklearn.Decomposition.TruncatedSVD.create
WARNING:skdoc:skdoc.py:0:function randomized_svd: was emitted under 2 names:
WARNING:skdoc:- sklearn.decomposition.randomized_svd / Sklearn.Decomposition.randomized_svd
WARNING:skdoc:- sklearn.utils.extmath.randomized_svd / Sklearn.Utils.Extmath.randomized_svd
WARNING:skdoc:skdoc.py:0:type LinearClassifierMixin: was emitted under 2 names:
WARNING:skdoc:- sklearn.discriminant_analysis.LinearClassifierMixin / Sklearn.Discriminant_analysis.LinearClassifierMixin
WARNING:skdoc:- sklearn.discriminant_analysis.LinearClassifierMixin.LinearClassifierMixin / Sklearn.Discriminant_analysis.LinearClassifierMixin.create
WARNING:skdoc:skdoc.py:0:type LinearDiscriminantAnalysis: was emitted under 2 names:
WARNING:skdoc:- sklearn.discriminant_analysis.LinearDiscriminantAnalysis / Sklearn.Discriminant_analysis.LinearDiscriminantAnalysis
WARNING:skdoc:- sklearn.discriminant_analysis.LinearDiscriminantAnalysis.LinearDiscriminantAnalysis / Sklearn.Discriminant_analysis.LinearDiscriminantAnalysis.create
WARNING:skdoc:skdoc.py:0:type QuadraticDiscriminantAnalysis: was emitted under 2 names:
WARNING:skdoc:- sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis / Sklearn.Discriminant_analysis.QuadraticDiscriminantAnalysis
WARNING:skdoc:- sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.QuadraticDiscriminantAnalysis / Sklearn.Discriminant_analysis.QuadraticDiscriminantAnalysis.create
WARNING:skdoc:skdoc.py:0:function softmax: was emitted under 2 names:
WARNING:skdoc:- sklearn.discriminant_analysis.softmax / Sklearn.Discriminant_analysis.softmax
WARNING:skdoc:- sklearn.utils.extmath.softmax / Sklearn.Utils.Extmath.softmax
WARNING:skdoc:skdoc.py:0:function unique_labels: was emitted under 2 names:
WARNING:skdoc:- sklearn.discriminant_analysis.unique_labels / Sklearn.Discriminant_analysis.unique_labels
WARNING:skdoc:- sklearn.utils.multiclass.unique_labels / Sklearn.Utils.Multiclass.unique_labels
WARNING:skdoc:skdoc.py:0:type DummyClassifier: was emitted under 2 names:
WARNING:skdoc:- sklearn.dummy.DummyClassifier / Sklearn.Dummy.DummyClassifier
WARNING:skdoc:- sklearn.dummy.DummyClassifier.DummyClassifier / Sklearn.Dummy.DummyClassifier.create
WARNING:skdoc:skdoc.py:0:type DummyRegressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.dummy.DummyRegressor / Sklearn.Dummy.DummyRegressor
WARNING:skdoc:- sklearn.dummy.DummyRegressor.DummyRegressor / Sklearn.Dummy.DummyRegressor.create
WARNING:skdoc:skdoc.py:0:function class_distribution: was emitted under 2 names:
WARNING:skdoc:- sklearn.dummy.class_distribution / Sklearn.Dummy.class_distribution
WARNING:skdoc:- sklearn.utils.multiclass.class_distribution / Sklearn.Utils.Multiclass.class_distribution
WARNING:skdoc:skdoc.py:0:ABCMeta AdaBoostClassifier: was emitted under 2 names:
WARNING:skdoc:- sklearn.ensemble.AdaBoostClassifier / Sklearn.Ensemble.AdaBoostClassifier
WARNING:skdoc:- sklearn.ensemble.AdaBoostClassifier.AdaBoostClassifier / Sklearn.Ensemble.AdaBoostClassifier.create
WARNING:skdoc:skdoc.py:0:ABCMeta AdaBoostRegressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.ensemble.AdaBoostRegressor / Sklearn.Ensemble.AdaBoostRegressor
WARNING:skdoc:- sklearn.ensemble.AdaBoostRegressor.AdaBoostRegressor / Sklearn.Ensemble.AdaBoostRegressor.create
WARNING:skdoc:skdoc.py:0:ABCMeta BaggingClassifier: was emitted under 2 names:
WARNING:skdoc:- sklearn.ensemble.BaggingClassifier / Sklearn.Ensemble.BaggingClassifier
WARNING:skdoc:- sklearn.ensemble.BaggingClassifier.BaggingClassifier / Sklearn.Ensemble.BaggingClassifier.create
WARNING:skdoc:skdoc.py:0:ABCMeta BaggingRegressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.ensemble.BaggingRegressor / Sklearn.Ensemble.BaggingRegressor
WARNING:skdoc:- sklearn.ensemble.BaggingRegressor.BaggingRegressor / Sklearn.Ensemble.BaggingRegressor.create
WARNING:skdoc:skdoc.py:0:function __getitem__: was emitted under 2 names:
WARNING:skdoc:- sklearn.ensemble.BaseEnsemble.__getitem__ / Sklearn.Ensemble.BaseEnsemble.get_item
WARNING:skdoc:- sklearn.ensemble.partial_dependence.BaseGradientBoosting.__getitem__ / Sklearn.Ensemble.Partial_dependence.BaseGradientBoosting.get_item
WARNING:skdoc:skdoc.py:0:function __iter__: was emitted under 2 names:
WARNING:skdoc:- sklearn.ensemble.BaseEnsemble.__iter__ / Sklearn.Ensemble.BaseEnsemble.iter
WARNING:skdoc:- sklearn.ensemble.partial_dependence.BaseGradientBoosting.__iter__ / Sklearn.Ensemble.Partial_dependence.BaseGradientBoosting.iter
WARNING:skdoc:skdoc.py:0:ABCMeta ExtraTreesClassifier: was emitted under 2 names:
WARNING:skdoc:- sklearn.ensemble.ExtraTreesClassifier / Sklearn.Ensemble.ExtraTreesClassifier
WARNING:skdoc:- sklearn.ensemble.ExtraTreesClassifier.ExtraTreesClassifier / Sklearn.Ensemble.ExtraTreesClassifier.create
WARNING:skdoc:skdoc.py:0:ABCMeta ExtraTreesRegressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.ensemble.ExtraTreesRegressor / Sklearn.Ensemble.ExtraTreesRegressor
WARNING:skdoc:- sklearn.ensemble.ExtraTreesRegressor.ExtraTreesRegressor / Sklearn.Ensemble.ExtraTreesRegressor.create
WARNING:skdoc:skdoc.py:0:ABCMeta GradientBoostingClassifier: was emitted under 2 names:
WARNING:skdoc:- sklearn.ensemble.GradientBoostingClassifier / Sklearn.Ensemble.GradientBoostingClassifier
WARNING:skdoc:- sklearn.ensemble.GradientBoostingClassifier.GradientBoostingClassifier / Sklearn.Ensemble.GradientBoostingClassifier.create
WARNING:skdoc:skdoc.py:0:ABCMeta GradientBoostingRegressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.ensemble.GradientBoostingRegressor / Sklearn.Ensemble.GradientBoostingRegressor
WARNING:skdoc:- sklearn.ensemble.GradientBoostingRegressor.GradientBoostingRegressor / Sklearn.Ensemble.GradientBoostingRegressor.create
WARNING:skdoc:skdoc.py:0:ABCMeta IsolationForest: was emitted under 2 names:
WARNING:skdoc:- sklearn.ensemble.IsolationForest / Sklearn.Ensemble.IsolationForest
WARNING:skdoc:- sklearn.ensemble.IsolationForest.IsolationForest / Sklearn.Ensemble.IsolationForest.create
WARNING:skdoc:skdoc.py:0:ABCMeta RandomForestClassifier: was emitted under 2 names:
WARNING:skdoc:- sklearn.ensemble.RandomForestClassifier / Sklearn.Ensemble.RandomForestClassifier
WARNING:skdoc:- sklearn.ensemble.RandomForestClassifier.RandomForestClassifier / Sklearn.Ensemble.RandomForestClassifier.create
WARNING:skdoc:skdoc.py:0:ABCMeta RandomForestRegressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.ensemble.RandomForestRegressor / Sklearn.Ensemble.RandomForestRegressor
WARNING:skdoc:- sklearn.ensemble.RandomForestRegressor.RandomForestRegressor / Sklearn.Ensemble.RandomForestRegressor.create
WARNING:skdoc:skdoc.py:0:ABCMeta RandomTreesEmbedding: was emitted under 2 names:
WARNING:skdoc:- sklearn.ensemble.RandomTreesEmbedding / Sklearn.Ensemble.RandomTreesEmbedding
WARNING:skdoc:- sklearn.ensemble.RandomTreesEmbedding.RandomTreesEmbedding / Sklearn.Ensemble.RandomTreesEmbedding.create
WARNING:skdoc:skdoc.py:0:ABCMeta StackingClassifier: was emitted under 2 names:
WARNING:skdoc:- sklearn.ensemble.StackingClassifier / Sklearn.Ensemble.StackingClassifier
WARNING:skdoc:- sklearn.ensemble.StackingClassifier.StackingClassifier / Sklearn.Ensemble.StackingClassifier.create
WARNING:skdoc:skdoc.py:0:ABCMeta StackingRegressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.ensemble.StackingRegressor / Sklearn.Ensemble.StackingRegressor
WARNING:skdoc:- sklearn.ensemble.StackingRegressor.StackingRegressor / Sklearn.Ensemble.StackingRegressor.create
WARNING:skdoc:skdoc.py:0:ABCMeta VotingClassifier: was emitted under 2 names:
WARNING:skdoc:- sklearn.ensemble.VotingClassifier / Sklearn.Ensemble.VotingClassifier
WARNING:skdoc:- sklearn.ensemble.VotingClassifier.VotingClassifier / Sklearn.Ensemble.VotingClassifier.create
WARNING:skdoc:skdoc.py:0:ABCMeta VotingRegressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.ensemble.VotingRegressor / Sklearn.Ensemble.VotingRegressor
WARNING:skdoc:- sklearn.ensemble.VotingRegressor.VotingRegressor / Sklearn.Ensemble.VotingRegressor.create
WARNING:skdoc:skdoc.py:0:type float32: was emitted under 2 names:
WARNING:skdoc:- sklearn.ensemble.partial_dependence.DTYPE / Sklearn.Ensemble.Partial_dependence.DTYPE
WARNING:skdoc:- sklearn.ensemble.partial_dependence.DTYPE.DTYPE / Sklearn.Ensemble.Partial_dependence.DTYPE.dtype
WARNING:skdoc:skdoc.py:0:function cartesian: was emitted under 2 names:
WARNING:skdoc:- sklearn.ensemble.partial_dependence.cartesian / Sklearn.Ensemble.Partial_dependence.cartesian
WARNING:skdoc:- sklearn.utils.extmath.cartesian / Sklearn.Utils.Extmath.cartesian
WARNING:skdoc:skdoc.py:0:type count: was emitted under 2 names:
WARNING:skdoc:- sklearn.ensemble.partial_dependence.count / Sklearn.Ensemble.Partial_dependence.Count
WARNING:skdoc:- sklearn.ensemble.partial_dependence.count.count / Sklearn.Ensemble.Partial_dependence.Count.create
WARNING:skdoc:skdoc.py:0:type ConvergenceWarning: was emitted under 2 names:
WARNING:skdoc:- sklearn.exceptions.ConvergenceWarning / Sklearn.Exceptions.ConvergenceWarning
WARNING:skdoc:- sklearn.exceptions.ConvergenceWarning.ConvergenceWarning / Sklearn.Exceptions.ConvergenceWarning.convergenceWarning
WARNING:skdoc:skdoc.py:0:type DataDimensionalityWarning: was emitted under 2 names:
WARNING:skdoc:- sklearn.exceptions.DataDimensionalityWarning / Sklearn.Exceptions.DataDimensionalityWarning
WARNING:skdoc:- sklearn.exceptions.DataDimensionalityWarning.DataDimensionalityWarning / Sklearn.Exceptions.DataDimensionalityWarning.dataDimensionalityWarning
WARNING:skdoc:skdoc.py:0:type EfficiencyWarning: was emitted under 2 names:
WARNING:skdoc:- sklearn.exceptions.EfficiencyWarning / Sklearn.Exceptions.EfficiencyWarning
WARNING:skdoc:- sklearn.exceptions.EfficiencyWarning.EfficiencyWarning / Sklearn.Exceptions.EfficiencyWarning.efficiencyWarning
WARNING:skdoc:skdoc.py:0:type FitFailedWarning: was emitted under 2 names:
WARNING:skdoc:- sklearn.exceptions.FitFailedWarning / Sklearn.Exceptions.FitFailedWarning
WARNING:skdoc:- sklearn.exceptions.FitFailedWarning.FitFailedWarning / Sklearn.Exceptions.FitFailedWarning.fitFailedWarning
WARNING:skdoc:skdoc.py:0:type NonBLASDotWarning: was emitted under 2 names:
WARNING:skdoc:- sklearn.exceptions.NonBLASDotWarning / Sklearn.Exceptions.NonBLASDotWarning
WARNING:skdoc:- sklearn.exceptions.NonBLASDotWarning.NonBLASDotWarning / Sklearn.Exceptions.NonBLASDotWarning.nonBLASDotWarning
WARNING:skdoc:skdoc.py:0:type NotFittedError: was emitted under 2 names:
WARNING:skdoc:- sklearn.exceptions.NotFittedError / Sklearn.Exceptions.NotFittedError
WARNING:skdoc:- sklearn.exceptions.NotFittedError.NotFittedError / Sklearn.Exceptions.NotFittedError.notFittedError
WARNING:skdoc:skdoc.py:0:type PositiveSpectrumWarning: was emitted under 2 names:
WARNING:skdoc:- sklearn.exceptions.PositiveSpectrumWarning / Sklearn.Exceptions.PositiveSpectrumWarning
WARNING:skdoc:- sklearn.exceptions.PositiveSpectrumWarning.PositiveSpectrumWarning / Sklearn.Exceptions.PositiveSpectrumWarning.positiveSpectrumWarning
WARNING:skdoc:skdoc.py:0:type SkipTestWarning: was emitted under 2 names:
WARNING:skdoc:- sklearn.exceptions.SkipTestWarning / Sklearn.Exceptions.SkipTestWarning
WARNING:skdoc:- sklearn.exceptions.SkipTestWarning.SkipTestWarning / Sklearn.Exceptions.SkipTestWarning.skipTestWarning
WARNING:skdoc:skdoc.py:0:type UndefinedMetricWarning: was emitted under 2 names:
WARNING:skdoc:- sklearn.exceptions.UndefinedMetricWarning / Sklearn.Exceptions.UndefinedMetricWarning
WARNING:skdoc:- sklearn.exceptions.UndefinedMetricWarning.UndefinedMetricWarning / Sklearn.Exceptions.UndefinedMetricWarning.undefinedMetricWarning
WARNING:skdoc:skdoc.py:0:type DictVectorizer: was emitted under 2 names:
WARNING:skdoc:- sklearn.feature_extraction.DictVectorizer / Sklearn.Feature_extraction.DictVectorizer
WARNING:skdoc:- sklearn.feature_extraction.DictVectorizer.DictVectorizer / Sklearn.Feature_extraction.DictVectorizer.create
WARNING:skdoc:skdoc.py:0:type FeatureHasher: was emitted under 2 names:
WARNING:skdoc:- sklearn.feature_extraction.FeatureHasher / Sklearn.Feature_extraction.FeatureHasher
WARNING:skdoc:- sklearn.feature_extraction.FeatureHasher.FeatureHasher / Sklearn.Feature_extraction.FeatureHasher.create
WARNING:skdoc:skdoc.py:0:function grid_to_graph: was emitted under 2 names:
WARNING:skdoc:- sklearn.feature_extraction.grid_to_graph / Sklearn.Feature_extraction.grid_to_graph
WARNING:skdoc:- sklearn.feature_extraction.image.grid_to_graph / Sklearn.Feature_extraction.Image.grid_to_graph
WARNING:skdoc:skdoc.py:0:function img_to_graph: was emitted under 2 names:
WARNING:skdoc:- sklearn.feature_extraction.img_to_graph / Sklearn.Feature_extraction.img_to_graph
WARNING:skdoc:- sklearn.feature_extraction.image.img_to_graph / Sklearn.Feature_extraction.Image.img_to_graph
WARNING:skdoc:skdoc.py:0:type PatchExtractor: was emitted under 2 names:
WARNING:skdoc:- sklearn.feature_extraction.image.PatchExtractor / Sklearn.Feature_extraction.Image.PatchExtractor
WARNING:skdoc:- sklearn.feature_extraction.image.PatchExtractor.PatchExtractor / Sklearn.Feature_extraction.Image.PatchExtractor.create
WARNING:skdoc:skdoc.py:0:type product: was emitted under 2 names:
WARNING:skdoc:- sklearn.feature_extraction.image.product / Sklearn.Feature_extraction.Image.Product
WARNING:skdoc:- sklearn.feature_extraction.image.product.product / Sklearn.Feature_extraction.Image.Product.create
WARNING:skdoc:skdoc.py:0:type CountVectorizer: was emitted under 2 names:
WARNING:skdoc:- sklearn.feature_extraction.text.CountVectorizer / Sklearn.Feature_extraction.Text.CountVectorizer
WARNING:skdoc:- sklearn.feature_extraction.text.CountVectorizer.CountVectorizer / Sklearn.Feature_extraction.Text.CountVectorizer.create
WARNING:skdoc:skdoc.py:0:type HashingVectorizer: was emitted under 2 names:
WARNING:skdoc:- sklearn.feature_extraction.text.HashingVectorizer / Sklearn.Feature_extraction.Text.HashingVectorizer
WARNING:skdoc:- sklearn.feature_extraction.text.HashingVectorizer.HashingVectorizer / Sklearn.Feature_extraction.Text.HashingVectorizer.create
WARNING:skdoc:skdoc.py:0:type TfidfTransformer: was emitted under 2 names:
WARNING:skdoc:- sklearn.feature_extraction.text.TfidfTransformer / Sklearn.Feature_extraction.Text.TfidfTransformer
WARNING:skdoc:- sklearn.feature_extraction.text.TfidfTransformer.TfidfTransformer / Sklearn.Feature_extraction.Text.TfidfTransformer.create
WARNING:skdoc:skdoc.py:0:type TfidfVectorizer: was emitted under 2 names:
WARNING:skdoc:- sklearn.feature_extraction.text.TfidfVectorizer / Sklearn.Feature_extraction.Text.TfidfVectorizer
WARNING:skdoc:- sklearn.feature_extraction.text.TfidfVectorizer.TfidfVectorizer / Sklearn.Feature_extraction.Text.TfidfVectorizer.create
WARNING:skdoc:skdoc.py:0:type VectorizerMixin: was emitted under 2 names:
WARNING:skdoc:- sklearn.feature_extraction.text.VectorizerMixin / Sklearn.Feature_extraction.Text.VectorizerMixin
WARNING:skdoc:- sklearn.feature_extraction.text.VectorizerMixin.VectorizerMixin / Sklearn.Feature_extraction.Text.VectorizerMixin.create
WARNING:skdoc:skdoc.py:0:ABCMeta GenericUnivariateSelect: was emitted under 2 names:
WARNING:skdoc:- sklearn.feature_selection.GenericUnivariateSelect / Sklearn.Feature_selection.GenericUnivariateSelect
WARNING:skdoc:- sklearn.feature_selection.GenericUnivariateSelect.GenericUnivariateSelect / Sklearn.Feature_selection.GenericUnivariateSelect.create
WARNING:skdoc:skdoc.py:0:ABCMeta RFE: was emitted under 2 names:
WARNING:skdoc:- sklearn.feature_selection.RFE / Sklearn.Feature_selection.RFE
WARNING:skdoc:- sklearn.feature_selection.RFE.RFE / Sklearn.Feature_selection.RFE.create
WARNING:skdoc:skdoc.py:0:ABCMeta RFECV: was emitted under 2 names:
WARNING:skdoc:- sklearn.feature_selection.RFECV / Sklearn.Feature_selection.RFECV
WARNING:skdoc:- sklearn.feature_selection.RFECV.RFECV / Sklearn.Feature_selection.RFECV.create
WARNING:skdoc:skdoc.py:0:ABCMeta SelectFdr: was emitted under 2 names:
WARNING:skdoc:- sklearn.feature_selection.SelectFdr / Sklearn.Feature_selection.SelectFdr
WARNING:skdoc:- sklearn.feature_selection.SelectFdr.SelectFdr / Sklearn.Feature_selection.SelectFdr.create
WARNING:skdoc:skdoc.py:0:ABCMeta SelectFpr: was emitted under 2 names:
WARNING:skdoc:- sklearn.feature_selection.SelectFpr / Sklearn.Feature_selection.SelectFpr
WARNING:skdoc:- sklearn.feature_selection.SelectFpr.SelectFpr / Sklearn.Feature_selection.SelectFpr.create
WARNING:skdoc:skdoc.py:0:ABCMeta SelectFromModel: was emitted under 2 names:
WARNING:skdoc:- sklearn.feature_selection.SelectFromModel / Sklearn.Feature_selection.SelectFromModel
WARNING:skdoc:- sklearn.feature_selection.SelectFromModel.SelectFromModel / Sklearn.Feature_selection.SelectFromModel.create
WARNING:skdoc:skdoc.py:0:ABCMeta SelectFwe: was emitted under 2 names:
WARNING:skdoc:- sklearn.feature_selection.SelectFwe / Sklearn.Feature_selection.SelectFwe
WARNING:skdoc:- sklearn.feature_selection.SelectFwe.SelectFwe / Sklearn.Feature_selection.SelectFwe.create
WARNING:skdoc:skdoc.py:0:ABCMeta SelectKBest: was emitted under 2 names:
WARNING:skdoc:- sklearn.feature_selection.SelectKBest / Sklearn.Feature_selection.SelectKBest
WARNING:skdoc:- sklearn.feature_selection.SelectKBest.SelectKBest / Sklearn.Feature_selection.SelectKBest.create
WARNING:skdoc:skdoc.py:0:ABCMeta SelectPercentile: was emitted under 2 names:
WARNING:skdoc:- sklearn.feature_selection.SelectPercentile / Sklearn.Feature_selection.SelectPercentile
WARNING:skdoc:- sklearn.feature_selection.SelectPercentile.SelectPercentile / Sklearn.Feature_selection.SelectPercentile.create
WARNING:skdoc:skdoc.py:0:ABCMeta VarianceThreshold: was emitted under 2 names:
WARNING:skdoc:- sklearn.feature_selection.VarianceThreshold / Sklearn.Feature_selection.VarianceThreshold
WARNING:skdoc:- sklearn.feature_selection.VarianceThreshold.VarianceThreshold / Sklearn.Feature_selection.VarianceThreshold.create
WARNING:skdoc:skdoc.py:0:type GaussianProcessClassifier: was emitted under 2 names:
WARNING:skdoc:- sklearn.gaussian_process.GaussianProcessClassifier / Sklearn.Gaussian_process.GaussianProcessClassifier
WARNING:skdoc:- sklearn.gaussian_process.GaussianProcessClassifier.GaussianProcessClassifier / Sklearn.Gaussian_process.GaussianProcessClassifier.create
WARNING:skdoc:skdoc.py:0:type GaussianProcessRegressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.gaussian_process.GaussianProcessRegressor / Sklearn.Gaussian_process.GaussianProcessRegressor
WARNING:skdoc:- sklearn.gaussian_process.GaussianProcessRegressor.GaussianProcessRegressor / Sklearn.Gaussian_process.GaussianProcessRegressor.create
WARNING:skdoc:skdoc.py:0:ABCMeta CompoundKernel: was emitted under 2 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.CompoundKernel / Sklearn.Gaussian_process.Kernels.CompoundKernel
WARNING:skdoc:- sklearn.gaussian_process.kernels.CompoundKernel.CompoundKernel / Sklearn.Gaussian_process.Kernels.CompoundKernel.create
WARNING:skdoc:skdoc.py:0:ABCMeta ConstantKernel: was emitted under 2 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.ConstantKernel / Sklearn.Gaussian_process.Kernels.ConstantKernel
WARNING:skdoc:- sklearn.gaussian_process.kernels.ConstantKernel.ConstantKernel / Sklearn.Gaussian_process.Kernels.ConstantKernel.create
WARNING:skdoc:skdoc.py:0:ABCMeta DotProduct: was emitted under 2 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.DotProduct / Sklearn.Gaussian_process.Kernels.DotProduct
WARNING:skdoc:- sklearn.gaussian_process.kernels.DotProduct.DotProduct / Sklearn.Gaussian_process.Kernels.DotProduct.create
WARNING:skdoc:skdoc.py:0:ABCMeta ExpSineSquared: was emitted under 2 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.ExpSineSquared / Sklearn.Gaussian_process.Kernels.ExpSineSquared
WARNING:skdoc:- sklearn.gaussian_process.kernels.ExpSineSquared.ExpSineSquared / Sklearn.Gaussian_process.Kernels.ExpSineSquared.create
WARNING:skdoc:skdoc.py:0:ABCMeta Exponentiation: was emitted under 2 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.Exponentiation / Sklearn.Gaussian_process.Kernels.Exponentiation
WARNING:skdoc:- sklearn.gaussian_process.kernels.Exponentiation.Exponentiation / Sklearn.Gaussian_process.Kernels.Exponentiation.create
WARNING:skdoc:skdoc.py:0:type GenericKernelMixin: was emitted under 2 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.GenericKernelMixin / Sklearn.Gaussian_process.Kernels.GenericKernelMixin
WARNING:skdoc:- sklearn.gaussian_process.kernels.GenericKernelMixin.GenericKernelMixin / Sklearn.Gaussian_process.Kernels.GenericKernelMixin.create
WARNING:skdoc:skdoc.py:0:type Hyperparameter: was emitted under 2 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.Hyperparameter / Sklearn.Gaussian_process.Kernels.Hyperparameter
WARNING:skdoc:- sklearn.gaussian_process.kernels.Hyperparameter.Hyperparameter / Sklearn.Gaussian_process.Kernels.Hyperparameter.create
WARNING:skdoc:skdoc.py:0:function diag: was emitted under 2 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.Kernel.diag / Sklearn.Gaussian_process.Kernels.Kernel.diag
WARNING:skdoc:- sklearn.gaussian_process.kernels.KernelOperator.diag / Sklearn.Gaussian_process.Kernels.KernelOperator.diag
WARNING:skdoc:skdoc.py:0:ABCMeta Matern: was emitted under 2 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.Matern / Sklearn.Gaussian_process.Kernels.Matern
WARNING:skdoc:- sklearn.gaussian_process.kernels.Matern.Matern / Sklearn.Gaussian_process.Kernels.Matern.create
WARNING:skdoc:skdoc.py:0:type NormalizedKernelMixin: was emitted under 2 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.NormalizedKernelMixin / Sklearn.Gaussian_process.Kernels.NormalizedKernelMixin
WARNING:skdoc:- sklearn.gaussian_process.kernels.NormalizedKernelMixin.NormalizedKernelMixin / Sklearn.Gaussian_process.Kernels.NormalizedKernelMixin.create
WARNING:skdoc:skdoc.py:0:ABCMeta PairwiseKernel: was emitted under 2 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.PairwiseKernel / Sklearn.Gaussian_process.Kernels.PairwiseKernel
WARNING:skdoc:- sklearn.gaussian_process.kernels.PairwiseKernel.PairwiseKernel / Sklearn.Gaussian_process.Kernels.PairwiseKernel.create
WARNING:skdoc:skdoc.py:0:ABCMeta Product: was emitted under 2 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.Product / Sklearn.Gaussian_process.Kernels.Product
WARNING:skdoc:- sklearn.gaussian_process.kernels.Product.Product / Sklearn.Gaussian_process.Kernels.Product.create
WARNING:skdoc:skdoc.py:0:ABCMeta RBF: was emitted under 2 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.RBF / Sklearn.Gaussian_process.Kernels.RBF
WARNING:skdoc:- sklearn.gaussian_process.kernels.RBF.RBF / Sklearn.Gaussian_process.Kernels.RBF.create
WARNING:skdoc:skdoc.py:0:ABCMeta RationalQuadratic: was emitted under 2 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.RationalQuadratic / Sklearn.Gaussian_process.Kernels.RationalQuadratic
WARNING:skdoc:- sklearn.gaussian_process.kernels.RationalQuadratic.RationalQuadratic / Sklearn.Gaussian_process.Kernels.RationalQuadratic.create
WARNING:skdoc:skdoc.py:0:type StationaryKernelMixin: was emitted under 2 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.StationaryKernelMixin / Sklearn.Gaussian_process.Kernels.StationaryKernelMixin
WARNING:skdoc:- sklearn.gaussian_process.kernels.StationaryKernelMixin.StationaryKernelMixin / Sklearn.Gaussian_process.Kernels.StationaryKernelMixin.create
WARNING:skdoc:skdoc.py:0:ABCMeta Sum: was emitted under 2 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.Sum / Sklearn.Gaussian_process.Kernels.Sum
WARNING:skdoc:- sklearn.gaussian_process.kernels.Sum.Sum / Sklearn.Gaussian_process.Kernels.Sum.create
WARNING:skdoc:skdoc.py:0:ABCMeta WhiteKernel: was emitted under 2 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.WhiteKernel / Sklearn.Gaussian_process.Kernels.WhiteKernel
WARNING:skdoc:- sklearn.gaussian_process.kernels.WhiteKernel.WhiteKernel / Sklearn.Gaussian_process.Kernels.WhiteKernel.create
WARNING:skdoc:skdoc.py:0:type KNNImputer: was emitted under 2 names:
WARNING:skdoc:- sklearn.impute.KNNImputer / Sklearn.Impute.KNNImputer
WARNING:skdoc:- sklearn.impute.KNNImputer.KNNImputer / Sklearn.Impute.KNNImputer.create
WARNING:skdoc:skdoc.py:0:type MissingIndicator: was emitted under 2 names:
WARNING:skdoc:- sklearn.impute.MissingIndicator / Sklearn.Impute.MissingIndicator
WARNING:skdoc:- sklearn.impute.MissingIndicator.MissingIndicator / Sklearn.Impute.MissingIndicator.create
WARNING:skdoc:skdoc.py:0:type SimpleImputer: was emitted under 2 names:
WARNING:skdoc:- sklearn.impute.SimpleImputer / Sklearn.Impute.SimpleImputer
WARNING:skdoc:- sklearn.impute.SimpleImputer.SimpleImputer / Sklearn.Impute.SimpleImputer.create
WARNING:skdoc:skdoc.py:0:type PartialDependenceDisplay: was emitted under 2 names:
WARNING:skdoc:- sklearn.inspection.PartialDependenceDisplay / Sklearn.Inspection.PartialDependenceDisplay
WARNING:skdoc:- sklearn.inspection.PartialDependenceDisplay.PartialDependenceDisplay / Sklearn.Inspection.PartialDependenceDisplay.create
WARNING:skdoc:skdoc.py:0:type AdditiveChi2Sampler: was emitted under 2 names:
WARNING:skdoc:- sklearn.kernel_approximation.AdditiveChi2Sampler / Sklearn.Kernel_approximation.AdditiveChi2Sampler
WARNING:skdoc:- sklearn.kernel_approximation.AdditiveChi2Sampler.AdditiveChi2Sampler / Sklearn.Kernel_approximation.AdditiveChi2Sampler.create
WARNING:skdoc:skdoc.py:0:type Nystroem: was emitted under 2 names:
WARNING:skdoc:- sklearn.kernel_approximation.Nystroem / Sklearn.Kernel_approximation.Nystroem
WARNING:skdoc:- sklearn.kernel_approximation.Nystroem.Nystroem / Sklearn.Kernel_approximation.Nystroem.create
WARNING:skdoc:skdoc.py:0:type RBFSampler: was emitted under 2 names:
WARNING:skdoc:- sklearn.kernel_approximation.RBFSampler / Sklearn.Kernel_approximation.RBFSampler
WARNING:skdoc:- sklearn.kernel_approximation.RBFSampler.RBFSampler / Sklearn.Kernel_approximation.RBFSampler.create
WARNING:skdoc:skdoc.py:0:type SkewedChi2Sampler: was emitted under 2 names:
WARNING:skdoc:- sklearn.kernel_approximation.SkewedChi2Sampler / Sklearn.Kernel_approximation.SkewedChi2Sampler
WARNING:skdoc:- sklearn.kernel_approximation.SkewedChi2Sampler.SkewedChi2Sampler / Sklearn.Kernel_approximation.SkewedChi2Sampler.create
WARNING:skdoc:skdoc.py:0:type KernelRidge: was emitted under 2 names:
WARNING:skdoc:- sklearn.kernel_ridge.KernelRidge / Sklearn.Kernel_ridge.KernelRidge
WARNING:skdoc:- sklearn.kernel_ridge.KernelRidge.KernelRidge / Sklearn.Kernel_ridge.KernelRidge.create
WARNING:skdoc:skdoc.py:0:ABCMeta ARDRegression: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.ARDRegression / Sklearn.Linear_model.ARDRegression
WARNING:skdoc:- sklearn.linear_model.ARDRegression.ARDRegression / Sklearn.Linear_model.ARDRegression.create
WARNING:skdoc:skdoc.py:0:ABCMeta BayesianRidge: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.BayesianRidge / Sklearn.Linear_model.BayesianRidge
WARNING:skdoc:- sklearn.linear_model.BayesianRidge.BayesianRidge / Sklearn.Linear_model.BayesianRidge.create
WARNING:skdoc:skdoc.py:0:ABCMeta ElasticNet: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.ElasticNet / Sklearn.Linear_model.ElasticNet
WARNING:skdoc:- sklearn.linear_model.ElasticNet.ElasticNet / Sklearn.Linear_model.ElasticNet.create
WARNING:skdoc:skdoc.py:0:ABCMeta ElasticNetCV: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.ElasticNetCV / Sklearn.Linear_model.ElasticNetCV
WARNING:skdoc:- sklearn.linear_model.ElasticNetCV.ElasticNetCV / Sklearn.Linear_model.ElasticNetCV.create
WARNING:skdoc:skdoc.py:0:type Hinge: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.Hinge / Sklearn.Linear_model.Hinge
WARNING:skdoc:- sklearn.linear_model.Hinge.Hinge / Sklearn.Linear_model.Hinge.hinge
WARNING:skdoc:skdoc.py:0:type Huber: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.Huber / Sklearn.Linear_model.Huber
WARNING:skdoc:- sklearn.linear_model.Huber.Huber / Sklearn.Linear_model.Huber.huber
WARNING:skdoc:skdoc.py:0:ABCMeta HuberRegressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.HuberRegressor / Sklearn.Linear_model.HuberRegressor
WARNING:skdoc:- sklearn.linear_model.HuberRegressor.HuberRegressor / Sklearn.Linear_model.HuberRegressor.create
WARNING:skdoc:skdoc.py:0:ABCMeta Lars: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.Lars / Sklearn.Linear_model.Lars
WARNING:skdoc:- sklearn.linear_model.Lars.Lars / Sklearn.Linear_model.Lars.create
WARNING:skdoc:skdoc.py:0:ABCMeta LarsCV: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.LarsCV / Sklearn.Linear_model.LarsCV
WARNING:skdoc:- sklearn.linear_model.LarsCV.LarsCV / Sklearn.Linear_model.LarsCV.create
WARNING:skdoc:skdoc.py:0:ABCMeta Lasso: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.Lasso / Sklearn.Linear_model.Lasso
WARNING:skdoc:- sklearn.linear_model.Lasso.Lasso / Sklearn.Linear_model.Lasso.create
WARNING:skdoc:skdoc.py:0:ABCMeta LassoCV: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.LassoCV / Sklearn.Linear_model.LassoCV
WARNING:skdoc:- sklearn.linear_model.LassoCV.LassoCV / Sklearn.Linear_model.LassoCV.create
WARNING:skdoc:skdoc.py:0:ABCMeta LassoLars: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.LassoLars / Sklearn.Linear_model.LassoLars
WARNING:skdoc:- sklearn.linear_model.LassoLars.LassoLars / Sklearn.Linear_model.LassoLars.create
WARNING:skdoc:skdoc.py:0:ABCMeta LassoLarsCV: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.LassoLarsCV / Sklearn.Linear_model.LassoLarsCV
WARNING:skdoc:- sklearn.linear_model.LassoLarsCV.LassoLarsCV / Sklearn.Linear_model.LassoLarsCV.create
WARNING:skdoc:skdoc.py:0:ABCMeta LassoLarsIC: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.LassoLarsIC / Sklearn.Linear_model.LassoLarsIC
WARNING:skdoc:- sklearn.linear_model.LassoLarsIC.LassoLarsIC / Sklearn.Linear_model.LassoLarsIC.create
WARNING:skdoc:skdoc.py:0:ABCMeta LinearRegression: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.LinearRegression / Sklearn.Linear_model.LinearRegression
WARNING:skdoc:- sklearn.linear_model.LinearRegression.LinearRegression / Sklearn.Linear_model.LinearRegression.create
WARNING:skdoc:skdoc.py:0:type Log: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.Log / Sklearn.Linear_model.Log
WARNING:skdoc:- sklearn.linear_model.Log.Log / Sklearn.Linear_model.Log.log
WARNING:skdoc:skdoc.py:0:type LogisticRegression: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.LogisticRegression / Sklearn.Linear_model.LogisticRegression
WARNING:skdoc:- sklearn.linear_model.LogisticRegression.LogisticRegression / Sklearn.Linear_model.LogisticRegression.create
WARNING:skdoc:skdoc.py:0:type LogisticRegressionCV: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.LogisticRegressionCV / Sklearn.Linear_model.LogisticRegressionCV
WARNING:skdoc:- sklearn.linear_model.LogisticRegressionCV.LogisticRegressionCV / Sklearn.Linear_model.LogisticRegressionCV.create
WARNING:skdoc:skdoc.py:0:type ModifiedHuber: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.ModifiedHuber / Sklearn.Linear_model.ModifiedHuber
WARNING:skdoc:- sklearn.linear_model.ModifiedHuber.ModifiedHuber / Sklearn.Linear_model.ModifiedHuber.modifiedHuber
WARNING:skdoc:skdoc.py:0:ABCMeta MultiTaskElasticNet: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.MultiTaskElasticNet / Sklearn.Linear_model.MultiTaskElasticNet
WARNING:skdoc:- sklearn.linear_model.MultiTaskElasticNet.MultiTaskElasticNet / Sklearn.Linear_model.MultiTaskElasticNet.create
WARNING:skdoc:skdoc.py:0:ABCMeta MultiTaskElasticNetCV: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.MultiTaskElasticNetCV / Sklearn.Linear_model.MultiTaskElasticNetCV
WARNING:skdoc:- sklearn.linear_model.MultiTaskElasticNetCV.MultiTaskElasticNetCV / Sklearn.Linear_model.MultiTaskElasticNetCV.create
WARNING:skdoc:skdoc.py:0:ABCMeta MultiTaskLasso: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.MultiTaskLasso / Sklearn.Linear_model.MultiTaskLasso
WARNING:skdoc:- sklearn.linear_model.MultiTaskLasso.MultiTaskLasso / Sklearn.Linear_model.MultiTaskLasso.create
WARNING:skdoc:skdoc.py:0:ABCMeta MultiTaskLassoCV: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.MultiTaskLassoCV / Sklearn.Linear_model.MultiTaskLassoCV
WARNING:skdoc:- sklearn.linear_model.MultiTaskLassoCV.MultiTaskLassoCV / Sklearn.Linear_model.MultiTaskLassoCV.create
WARNING:skdoc:skdoc.py:0:ABCMeta OrthogonalMatchingPursuit: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.OrthogonalMatchingPursuit / Sklearn.Linear_model.OrthogonalMatchingPursuit
WARNING:skdoc:- sklearn.linear_model.OrthogonalMatchingPursuit.OrthogonalMatchingPursuit / Sklearn.Linear_model.OrthogonalMatchingPursuit.create
WARNING:skdoc:skdoc.py:0:ABCMeta OrthogonalMatchingPursuitCV: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.OrthogonalMatchingPursuitCV / Sklearn.Linear_model.OrthogonalMatchingPursuitCV
WARNING:skdoc:- sklearn.linear_model.OrthogonalMatchingPursuitCV.OrthogonalMatchingPursuitCV / Sklearn.Linear_model.OrthogonalMatchingPursuitCV.create
WARNING:skdoc:skdoc.py:0:ABCMeta PassiveAggressiveClassifier: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.PassiveAggressiveClassifier / Sklearn.Linear_model.PassiveAggressiveClassifier
WARNING:skdoc:- sklearn.linear_model.PassiveAggressiveClassifier.PassiveAggressiveClassifier / Sklearn.Linear_model.PassiveAggressiveClassifier.create
WARNING:skdoc:skdoc.py:0:ABCMeta PassiveAggressiveRegressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.PassiveAggressiveRegressor / Sklearn.Linear_model.PassiveAggressiveRegressor
WARNING:skdoc:- sklearn.linear_model.PassiveAggressiveRegressor.PassiveAggressiveRegressor / Sklearn.Linear_model.PassiveAggressiveRegressor.create
WARNING:skdoc:skdoc.py:0:ABCMeta Perceptron: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.Perceptron / Sklearn.Linear_model.Perceptron
WARNING:skdoc:- sklearn.linear_model.Perceptron.Perceptron / Sklearn.Linear_model.Perceptron.create
WARNING:skdoc:skdoc.py:0:type RANSACRegressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.RANSACRegressor / Sklearn.Linear_model.RANSACRegressor
WARNING:skdoc:- sklearn.linear_model.RANSACRegressor.RANSACRegressor / Sklearn.Linear_model.RANSACRegressor.create
WARNING:skdoc:skdoc.py:0:ABCMeta Ridge: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.Ridge / Sklearn.Linear_model.Ridge
WARNING:skdoc:- sklearn.linear_model.Ridge.Ridge / Sklearn.Linear_model.Ridge.create
WARNING:skdoc:skdoc.py:0:ABCMeta RidgeCV: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.RidgeCV / Sklearn.Linear_model.RidgeCV
WARNING:skdoc:- sklearn.linear_model.RidgeCV.RidgeCV / Sklearn.Linear_model.RidgeCV.create
WARNING:skdoc:skdoc.py:0:ABCMeta RidgeClassifier: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.RidgeClassifier / Sklearn.Linear_model.RidgeClassifier
WARNING:skdoc:- sklearn.linear_model.RidgeClassifier.RidgeClassifier / Sklearn.Linear_model.RidgeClassifier.create
WARNING:skdoc:skdoc.py:0:ABCMeta RidgeClassifierCV: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.RidgeClassifierCV / Sklearn.Linear_model.RidgeClassifierCV
WARNING:skdoc:- sklearn.linear_model.RidgeClassifierCV.RidgeClassifierCV / Sklearn.Linear_model.RidgeClassifierCV.create
WARNING:skdoc:skdoc.py:0:ABCMeta SGDClassifier: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.SGDClassifier / Sklearn.Linear_model.SGDClassifier
WARNING:skdoc:- sklearn.linear_model.SGDClassifier.SGDClassifier / Sklearn.Linear_model.SGDClassifier.create
WARNING:skdoc:skdoc.py:0:ABCMeta SGDRegressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.SGDRegressor / Sklearn.Linear_model.SGDRegressor
WARNING:skdoc:- sklearn.linear_model.SGDRegressor.SGDRegressor / Sklearn.Linear_model.SGDRegressor.create
WARNING:skdoc:skdoc.py:0:type SquaredLoss: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.SquaredLoss / Sklearn.Linear_model.SquaredLoss
WARNING:skdoc:- sklearn.linear_model.SquaredLoss.SquaredLoss / Sklearn.Linear_model.SquaredLoss.squaredLoss
WARNING:skdoc:skdoc.py:0:ABCMeta TheilSenRegressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.linear_model.TheilSenRegressor / Sklearn.Linear_model.TheilSenRegressor
WARNING:skdoc:- sklearn.linear_model.TheilSenRegressor.TheilSenRegressor / Sklearn.Linear_model.TheilSenRegressor.create
WARNING:skdoc:skdoc.py:0:type Isomap: was emitted under 2 names:
WARNING:skdoc:- sklearn.manifold.Isomap / Sklearn.Manifold.Isomap
WARNING:skdoc:- sklearn.manifold.Isomap.Isomap / Sklearn.Manifold.Isomap.create
WARNING:skdoc:skdoc.py:0:type LocallyLinearEmbedding: was emitted under 2 names:
WARNING:skdoc:- sklearn.manifold.LocallyLinearEmbedding / Sklearn.Manifold.LocallyLinearEmbedding
WARNING:skdoc:- sklearn.manifold.LocallyLinearEmbedding.LocallyLinearEmbedding / Sklearn.Manifold.LocallyLinearEmbedding.create
WARNING:skdoc:skdoc.py:0:type MDS: was emitted under 2 names:
WARNING:skdoc:- sklearn.manifold.MDS / Sklearn.Manifold.MDS
WARNING:skdoc:- sklearn.manifold.MDS.MDS / Sklearn.Manifold.MDS.create
WARNING:skdoc:skdoc.py:0:type SpectralEmbedding: was emitted under 2 names:
WARNING:skdoc:- sklearn.manifold.SpectralEmbedding / Sklearn.Manifold.SpectralEmbedding
WARNING:skdoc:- sklearn.manifold.SpectralEmbedding.SpectralEmbedding / Sklearn.Manifold.SpectralEmbedding.create
WARNING:skdoc:skdoc.py:0:type TSNE: was emitted under 2 names:
WARNING:skdoc:- sklearn.manifold.TSNE / Sklearn.Manifold.TSNE
WARNING:skdoc:- sklearn.manifold.TSNE.TSNE / Sklearn.Manifold.TSNE.create
WARNING:skdoc:skdoc.py:0:type ConfusionMatrixDisplay: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.ConfusionMatrixDisplay / Sklearn.Metrics.ConfusionMatrixDisplay
WARNING:skdoc:- sklearn.metrics.ConfusionMatrixDisplay.ConfusionMatrixDisplay / Sklearn.Metrics.ConfusionMatrixDisplay.create
WARNING:skdoc:skdoc.py:0:type PrecisionRecallDisplay: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.PrecisionRecallDisplay / Sklearn.Metrics.PrecisionRecallDisplay
WARNING:skdoc:- sklearn.metrics.PrecisionRecallDisplay.PrecisionRecallDisplay / Sklearn.Metrics.PrecisionRecallDisplay.create
WARNING:skdoc:skdoc.py:0:type RocCurveDisplay: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.RocCurveDisplay / Sklearn.Metrics.RocCurveDisplay
WARNING:skdoc:- sklearn.metrics.RocCurveDisplay.RocCurveDisplay / Sklearn.Metrics.RocCurveDisplay.create
WARNING:skdoc:skdoc.py:0:function adjusted_mutual_info_score: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.adjusted_mutual_info_score / Sklearn.Metrics.adjusted_mutual_info_score
WARNING:skdoc:- sklearn.metrics.cluster.adjusted_mutual_info_score / Sklearn.Metrics.Cluster.adjusted_mutual_info_score
WARNING:skdoc:skdoc.py:0:function adjusted_rand_score: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.adjusted_rand_score / Sklearn.Metrics.adjusted_rand_score
WARNING:skdoc:- sklearn.metrics.cluster.adjusted_rand_score / Sklearn.Metrics.Cluster.adjusted_rand_score
WARNING:skdoc:skdoc.py:0:function calinski_harabasz_score: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.calinski_harabasz_score / Sklearn.Metrics.calinski_harabasz_score
WARNING:skdoc:- sklearn.metrics.cluster.calinski_harabasz_score / Sklearn.Metrics.Cluster.calinski_harabasz_score
WARNING:skdoc:skdoc.py:0:function calinski_harabaz_score: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.calinski_harabaz_score / Sklearn.Metrics.calinski_harabaz_score
WARNING:skdoc:- sklearn.metrics.cluster.calinski_harabaz_score / Sklearn.Metrics.Cluster.calinski_harabaz_score
WARNING:skdoc:skdoc.py:0:function completeness_score: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.completeness_score / Sklearn.Metrics.completeness_score
WARNING:skdoc:- sklearn.metrics.cluster.completeness_score / Sklearn.Metrics.Cluster.completeness_score
WARNING:skdoc:skdoc.py:0:function consensus_score: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.consensus_score / Sklearn.Metrics.consensus_score
WARNING:skdoc:- sklearn.metrics.cluster.consensus_score / Sklearn.Metrics.Cluster.consensus_score
WARNING:skdoc:skdoc.py:0:function davies_bouldin_score: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.davies_bouldin_score / Sklearn.Metrics.davies_bouldin_score
WARNING:skdoc:- sklearn.metrics.cluster.davies_bouldin_score / Sklearn.Metrics.Cluster.davies_bouldin_score
WARNING:skdoc:skdoc.py:0:function fowlkes_mallows_score: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.fowlkes_mallows_score / Sklearn.Metrics.fowlkes_mallows_score
WARNING:skdoc:- sklearn.metrics.cluster.fowlkes_mallows_score / Sklearn.Metrics.Cluster.fowlkes_mallows_score
WARNING:skdoc:skdoc.py:0:function homogeneity_completeness_v_measure: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.homogeneity_completeness_v_measure / Sklearn.Metrics.homogeneity_completeness_v_measure
WARNING:skdoc:- sklearn.metrics.cluster.homogeneity_completeness_v_measure / Sklearn.Metrics.Cluster.homogeneity_completeness_v_measure
WARNING:skdoc:skdoc.py:0:function homogeneity_score: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.homogeneity_score / Sklearn.Metrics.homogeneity_score
WARNING:skdoc:- sklearn.metrics.cluster.homogeneity_score / Sklearn.Metrics.Cluster.homogeneity_score
WARNING:skdoc:skdoc.py:0:function mutual_info_score: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.mutual_info_score / Sklearn.Metrics.mutual_info_score
WARNING:skdoc:- sklearn.metrics.cluster.mutual_info_score / Sklearn.Metrics.Cluster.mutual_info_score
WARNING:skdoc:skdoc.py:0:function nan_euclidean_distances: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.nan_euclidean_distances / Sklearn.Metrics.nan_euclidean_distances
WARNING:skdoc:- sklearn.metrics.pairwise.nan_euclidean_distances / Sklearn.Metrics.Pairwise.nan_euclidean_distances
WARNING:skdoc:skdoc.py:0:function normalized_mutual_info_score: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.normalized_mutual_info_score / Sklearn.Metrics.normalized_mutual_info_score
WARNING:skdoc:- sklearn.metrics.cluster.normalized_mutual_info_score / Sklearn.Metrics.Cluster.normalized_mutual_info_score
WARNING:skdoc:skdoc.py:0:function pairwise_distances: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.pairwise_distances / Sklearn.Metrics.pairwise_distances
WARNING:skdoc:- sklearn.metrics.pairwise.pairwise_distances / Sklearn.Metrics.Pairwise.pairwise_distances
WARNING:skdoc:skdoc.py:0:function pairwise_distances_argmin: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.pairwise_distances_argmin / Sklearn.Metrics.pairwise_distances_argmin
WARNING:skdoc:- sklearn.metrics.pairwise.pairwise_distances_argmin / Sklearn.Metrics.Pairwise.pairwise_distances_argmin
WARNING:skdoc:skdoc.py:0:function pairwise_distances_argmin_min: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.pairwise_distances_argmin_min / Sklearn.Metrics.pairwise_distances_argmin_min
WARNING:skdoc:- sklearn.metrics.pairwise.pairwise_distances_argmin_min / Sklearn.Metrics.Pairwise.pairwise_distances_argmin_min
WARNING:skdoc:skdoc.py:0:function pairwise_distances_chunked: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.pairwise_distances_chunked / Sklearn.Metrics.pairwise_distances_chunked
WARNING:skdoc:- sklearn.metrics.pairwise.pairwise_distances_chunked / Sklearn.Metrics.Pairwise.pairwise_distances_chunked
WARNING:skdoc:skdoc.py:0:function silhouette_samples: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.silhouette_samples / Sklearn.Metrics.silhouette_samples
WARNING:skdoc:- sklearn.metrics.cluster.silhouette_samples / Sklearn.Metrics.Cluster.silhouette_samples
WARNING:skdoc:skdoc.py:0:function silhouette_score: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.silhouette_score / Sklearn.Metrics.silhouette_score
WARNING:skdoc:- sklearn.metrics.cluster.silhouette_score / Sklearn.Metrics.Cluster.silhouette_score
WARNING:skdoc:skdoc.py:0:function v_measure_score: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.v_measure_score / Sklearn.Metrics.v_measure_score
WARNING:skdoc:- sklearn.metrics.cluster.v_measure_score / Sklearn.Metrics.Cluster.v_measure_score
WARNING:skdoc:skdoc.py:0:type csr_matrix: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.pairwise.csr_matrix / Sklearn.Metrics.Pairwise.Csr_matrix
WARNING:skdoc:- sklearn.metrics.pairwise.csr_matrix.csr_matrix / Sklearn.Metrics.Pairwise.Csr_matrix.create
WARNING:skdoc:skdoc.py:0:function __getitem__: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.pairwise.csr_matrix.__getitem__ / Sklearn.Metrics.Pairwise.Csr_matrix.get_item
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.__getitem__ / Sklearn.Utils.Multiclass.Dok_matrix.get_item
WARNING:skdoc:skdoc.py:0:function __setitem__: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.pairwise.csr_matrix.__setitem__ / Sklearn.Metrics.Pairwise.Csr_matrix.__setitem__
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.__setitem__ / Sklearn.Utils.Multiclass.Dok_matrix.__setitem__
WARNING:skdoc:skdoc.py:0:function gen_batches: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.pairwise.gen_batches / Sklearn.Metrics.Pairwise.gen_batches
WARNING:skdoc:- sklearn.utils.gen_batches / Sklearn.Utils.gen_batches
WARNING:skdoc:skdoc.py:0:function gen_even_slices: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.pairwise.gen_even_slices / Sklearn.Metrics.Pairwise.gen_even_slices
WARNING:skdoc:- sklearn.utils.gen_even_slices / Sklearn.Utils.gen_even_slices
WARNING:skdoc:skdoc.py:0:function get_chunk_n_rows: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.pairwise.get_chunk_n_rows / Sklearn.Metrics.Pairwise.get_chunk_n_rows
WARNING:skdoc:- sklearn.utils.get_chunk_n_rows / Sklearn.Utils.get_chunk_n_rows
WARNING:skdoc:skdoc.py:0:function is_scalar_nan: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.pairwise.is_scalar_nan / Sklearn.Metrics.Pairwise.is_scalar_nan
WARNING:skdoc:- sklearn.utils.is_scalar_nan / Sklearn.Utils.is_scalar_nan
WARNING:skdoc:skdoc.py:0:function row_norms: was emitted under 2 names:
WARNING:skdoc:- sklearn.metrics.pairwise.row_norms / Sklearn.Metrics.Pairwise.row_norms
WARNING:skdoc:- sklearn.utils.extmath.row_norms / Sklearn.Utils.Extmath.row_norms
WARNING:skdoc:skdoc.py:0:ABCMeta BayesianGaussianMixture: was emitted under 2 names:
WARNING:skdoc:- sklearn.mixture.BayesianGaussianMixture / Sklearn.Mixture.BayesianGaussianMixture
WARNING:skdoc:- sklearn.mixture.BayesianGaussianMixture.BayesianGaussianMixture / Sklearn.Mixture.BayesianGaussianMixture.create
WARNING:skdoc:skdoc.py:0:ABCMeta GaussianMixture: was emitted under 2 names:
WARNING:skdoc:- sklearn.mixture.GaussianMixture / Sklearn.Mixture.GaussianMixture
WARNING:skdoc:- sklearn.mixture.GaussianMixture.GaussianMixture / Sklearn.Mixture.GaussianMixture.create
WARNING:skdoc:skdoc.py:0:function split: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.BaseCrossValidator.split / Sklearn.Model_selection.BaseCrossValidator.split
WARNING:skdoc:- sklearn.model_selection.LeavePOut.split / Sklearn.Model_selection.LeavePOut.split
WARNING:skdoc:skdoc.py:0:ABCMeta GridSearchCV: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.GridSearchCV / Sklearn.Model_selection.GridSearchCV
WARNING:skdoc:- sklearn.model_selection.GridSearchCV.GridSearchCV / Sklearn.Model_selection.GridSearchCV.create
WARNING:skdoc:skdoc.py:0:function fit: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.GridSearchCV.fit / Sklearn.Model_selection.GridSearchCV.fit
WARNING:skdoc:- sklearn.model_selection.RandomizedSearchCV.fit / Sklearn.Model_selection.RandomizedSearchCV.fit
WARNING:skdoc:skdoc.py:0:function score: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.GridSearchCV.score / Sklearn.Model_selection.GridSearchCV.score
WARNING:skdoc:- sklearn.model_selection.RandomizedSearchCV.score / Sklearn.Model_selection.RandomizedSearchCV.score
WARNING:skdoc:skdoc.py:0:ABCMeta GroupKFold: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.GroupKFold / Sklearn.Model_selection.GroupKFold
WARNING:skdoc:- sklearn.model_selection.GroupKFold.GroupKFold / Sklearn.Model_selection.GroupKFold.create
WARNING:skdoc:skdoc.py:0:ABCMeta GroupShuffleSplit: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.GroupShuffleSplit / Sklearn.Model_selection.GroupShuffleSplit
WARNING:skdoc:- sklearn.model_selection.GroupShuffleSplit.GroupShuffleSplit / Sklearn.Model_selection.GroupShuffleSplit.create
WARNING:skdoc:skdoc.py:0:ABCMeta KFold: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.KFold / Sklearn.Model_selection.KFold
WARNING:skdoc:- sklearn.model_selection.KFold.KFold / Sklearn.Model_selection.KFold.create
WARNING:skdoc:skdoc.py:0:ABCMeta LeaveOneGroupOut: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.LeaveOneGroupOut / Sklearn.Model_selection.LeaveOneGroupOut
WARNING:skdoc:- sklearn.model_selection.LeaveOneGroupOut.LeaveOneGroupOut / Sklearn.Model_selection.LeaveOneGroupOut.create
WARNING:skdoc:skdoc.py:0:ABCMeta LeaveOneOut: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.LeaveOneOut / Sklearn.Model_selection.LeaveOneOut
WARNING:skdoc:- sklearn.model_selection.LeaveOneOut.LeaveOneOut / Sklearn.Model_selection.LeaveOneOut.create
WARNING:skdoc:skdoc.py:0:ABCMeta LeavePGroupsOut: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.LeavePGroupsOut / Sklearn.Model_selection.LeavePGroupsOut
WARNING:skdoc:- sklearn.model_selection.LeavePGroupsOut.LeavePGroupsOut / Sklearn.Model_selection.LeavePGroupsOut.create
WARNING:skdoc:skdoc.py:0:ABCMeta LeavePOut: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.LeavePOut / Sklearn.Model_selection.LeavePOut
WARNING:skdoc:- sklearn.model_selection.LeavePOut.LeavePOut / Sklearn.Model_selection.LeavePOut.create
WARNING:skdoc:skdoc.py:0:type ParameterGrid: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.ParameterGrid / Sklearn.Model_selection.ParameterGrid
WARNING:skdoc:- sklearn.model_selection.ParameterGrid.ParameterGrid / Sklearn.Model_selection.ParameterGrid.create
WARNING:skdoc:skdoc.py:0:type ParameterSampler: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.ParameterSampler / Sklearn.Model_selection.ParameterSampler
WARNING:skdoc:- sklearn.model_selection.ParameterSampler.ParameterSampler / Sklearn.Model_selection.ParameterSampler.create
WARNING:skdoc:skdoc.py:0:ABCMeta PredefinedSplit: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.PredefinedSplit / Sklearn.Model_selection.PredefinedSplit
WARNING:skdoc:- sklearn.model_selection.PredefinedSplit.PredefinedSplit / Sklearn.Model_selection.PredefinedSplit.create
WARNING:skdoc:skdoc.py:0:ABCMeta RandomizedSearchCV: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.RandomizedSearchCV / Sklearn.Model_selection.RandomizedSearchCV
WARNING:skdoc:- sklearn.model_selection.RandomizedSearchCV.RandomizedSearchCV / Sklearn.Model_selection.RandomizedSearchCV.create
WARNING:skdoc:skdoc.py:0:ABCMeta RepeatedKFold: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.RepeatedKFold / Sklearn.Model_selection.RepeatedKFold
WARNING:skdoc:- sklearn.model_selection.RepeatedKFold.RepeatedKFold / Sklearn.Model_selection.RepeatedKFold.create
WARNING:skdoc:skdoc.py:0:ABCMeta RepeatedStratifiedKFold: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.RepeatedStratifiedKFold / Sklearn.Model_selection.RepeatedStratifiedKFold
WARNING:skdoc:- sklearn.model_selection.RepeatedStratifiedKFold.RepeatedStratifiedKFold / Sklearn.Model_selection.RepeatedStratifiedKFold.create
WARNING:skdoc:skdoc.py:0:ABCMeta ShuffleSplit: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.ShuffleSplit / Sklearn.Model_selection.ShuffleSplit
WARNING:skdoc:- sklearn.model_selection.ShuffleSplit.ShuffleSplit / Sklearn.Model_selection.ShuffleSplit.create
WARNING:skdoc:skdoc.py:0:ABCMeta StratifiedKFold: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.StratifiedKFold / Sklearn.Model_selection.StratifiedKFold
WARNING:skdoc:- sklearn.model_selection.StratifiedKFold.StratifiedKFold / Sklearn.Model_selection.StratifiedKFold.create
WARNING:skdoc:skdoc.py:0:ABCMeta StratifiedShuffleSplit: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.StratifiedShuffleSplit / Sklearn.Model_selection.StratifiedShuffleSplit
WARNING:skdoc:- sklearn.model_selection.StratifiedShuffleSplit.StratifiedShuffleSplit / Sklearn.Model_selection.StratifiedShuffleSplit.create
WARNING:skdoc:skdoc.py:0:ABCMeta TimeSeriesSplit: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.TimeSeriesSplit / Sklearn.Model_selection.TimeSeriesSplit
WARNING:skdoc:- sklearn.model_selection.TimeSeriesSplit.TimeSeriesSplit / Sklearn.Model_selection.TimeSeriesSplit.create
WARNING:skdoc:skdoc.py:0:function cross_val_predict: was emitted under 2 names:
WARNING:skdoc:- sklearn.model_selection.cross_val_predict / Sklearn.Model_selection.cross_val_predict
WARNING:skdoc:- sklearn.multioutput.cross_val_predict / Sklearn.Multioutput.cross_val_predict
WARNING:skdoc:skdoc.py:0:type OneVsOneClassifier: was emitted under 2 names:
WARNING:skdoc:- sklearn.multiclass.OneVsOneClassifier / Sklearn.Multiclass.OneVsOneClassifier
WARNING:skdoc:- sklearn.multiclass.OneVsOneClassifier.OneVsOneClassifier / Sklearn.Multiclass.OneVsOneClassifier.create
WARNING:skdoc:skdoc.py:0:type OneVsRestClassifier: was emitted under 2 names:
WARNING:skdoc:- sklearn.multiclass.OneVsRestClassifier / Sklearn.Multiclass.OneVsRestClassifier
WARNING:skdoc:- sklearn.multiclass.OneVsRestClassifier.OneVsRestClassifier / Sklearn.Multiclass.OneVsRestClassifier.create
WARNING:skdoc:skdoc.py:0:type OutputCodeClassifier: was emitted under 2 names:
WARNING:skdoc:- sklearn.multiclass.OutputCodeClassifier / Sklearn.Multiclass.OutputCodeClassifier
WARNING:skdoc:- sklearn.multiclass.OutputCodeClassifier.OutputCodeClassifier / Sklearn.Multiclass.OutputCodeClassifier.create
WARNING:skdoc:skdoc.py:0:ABCMeta ClassifierChain: was emitted under 2 names:
WARNING:skdoc:- sklearn.multioutput.ClassifierChain / Sklearn.Multioutput.ClassifierChain
WARNING:skdoc:- sklearn.multioutput.ClassifierChain.ClassifierChain / Sklearn.Multioutput.ClassifierChain.create
WARNING:skdoc:skdoc.py:0:function predict: was emitted under 2 names:
WARNING:skdoc:- sklearn.multioutput.ClassifierChain.predict / Sklearn.Multioutput.ClassifierChain.predict
WARNING:skdoc:- sklearn.multioutput.RegressorChain.predict / Sklearn.Multioutput.RegressorChain.predict
WARNING:skdoc:skdoc.py:0:ABCMeta MultiOutputClassifier: was emitted under 2 names:
WARNING:skdoc:- sklearn.multioutput.MultiOutputClassifier / Sklearn.Multioutput.MultiOutputClassifier
WARNING:skdoc:- sklearn.multioutput.MultiOutputClassifier.MultiOutputClassifier / Sklearn.Multioutput.MultiOutputClassifier.create
WARNING:skdoc:skdoc.py:0:function fit: was emitted under 2 names:
WARNING:skdoc:- sklearn.multioutput.MultiOutputEstimator.fit / Sklearn.Multioutput.MultiOutputEstimator.fit
WARNING:skdoc:- sklearn.multioutput.MultiOutputRegressor.fit / Sklearn.Multioutput.MultiOutputRegressor.fit
WARNING:skdoc:skdoc.py:0:ABCMeta MultiOutputRegressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.multioutput.MultiOutputRegressor / Sklearn.Multioutput.MultiOutputRegressor
WARNING:skdoc:- sklearn.multioutput.MultiOutputRegressor.MultiOutputRegressor / Sklearn.Multioutput.MultiOutputRegressor.create
WARNING:skdoc:skdoc.py:0:ABCMeta RegressorChain: was emitted under 2 names:
WARNING:skdoc:- sklearn.multioutput.RegressorChain / Sklearn.Multioutput.RegressorChain
WARNING:skdoc:- sklearn.multioutput.RegressorChain.RegressorChain / Sklearn.Multioutput.RegressorChain.create
WARNING:skdoc:skdoc.py:0:function has_fit_parameter: was emitted under 2 names:
WARNING:skdoc:- sklearn.multioutput.has_fit_parameter / Sklearn.Multioutput.has_fit_parameter
WARNING:skdoc:- sklearn.utils.validation.has_fit_parameter / Sklearn.Utils.Validation.has_fit_parameter
WARNING:skdoc:skdoc.py:0:function predict: was emitted under 2 names:
WARNING:skdoc:- sklearn.naive_bayes.BaseDiscreteNB.predict / Sklearn.Naive_bayes.BaseDiscreteNB.predict
WARNING:skdoc:- sklearn.naive_bayes.BaseNB.predict / Sklearn.Naive_bayes.BaseNB.predict
WARNING:skdoc:skdoc.py:0:function predict_log_proba: was emitted under 2 names:
WARNING:skdoc:- sklearn.naive_bayes.BaseDiscreteNB.predict_log_proba / Sklearn.Naive_bayes.BaseDiscreteNB.predict_log_proba
WARNING:skdoc:- sklearn.naive_bayes.BaseNB.predict_log_proba / Sklearn.Naive_bayes.BaseNB.predict_log_proba
WARNING:skdoc:skdoc.py:0:function predict_proba: was emitted under 2 names:
WARNING:skdoc:- sklearn.naive_bayes.BaseDiscreteNB.predict_proba / Sklearn.Naive_bayes.BaseDiscreteNB.predict_proba
WARNING:skdoc:- sklearn.naive_bayes.BaseNB.predict_proba / Sklearn.Naive_bayes.BaseNB.predict_proba
WARNING:skdoc:skdoc.py:0:ABCMeta BernoulliNB: was emitted under 2 names:
WARNING:skdoc:- sklearn.naive_bayes.BernoulliNB / Sklearn.Naive_bayes.BernoulliNB
WARNING:skdoc:- sklearn.naive_bayes.BernoulliNB.BernoulliNB / Sklearn.Naive_bayes.BernoulliNB.create
WARNING:skdoc:skdoc.py:0:ABCMeta CategoricalNB: was emitted under 2 names:
WARNING:skdoc:- sklearn.naive_bayes.CategoricalNB / Sklearn.Naive_bayes.CategoricalNB
WARNING:skdoc:- sklearn.naive_bayes.CategoricalNB.CategoricalNB / Sklearn.Naive_bayes.CategoricalNB.create
WARNING:skdoc:skdoc.py:0:ABCMeta ComplementNB: was emitted under 2 names:
WARNING:skdoc:- sklearn.naive_bayes.ComplementNB / Sklearn.Naive_bayes.ComplementNB
WARNING:skdoc:- sklearn.naive_bayes.ComplementNB.ComplementNB / Sklearn.Naive_bayes.ComplementNB.create
WARNING:skdoc:skdoc.py:0:ABCMeta GaussianNB: was emitted under 2 names:
WARNING:skdoc:- sklearn.naive_bayes.GaussianNB / Sklearn.Naive_bayes.GaussianNB
WARNING:skdoc:- sklearn.naive_bayes.GaussianNB.GaussianNB / Sklearn.Naive_bayes.GaussianNB.create
WARNING:skdoc:skdoc.py:0:ABCMeta MultinomialNB: was emitted under 2 names:
WARNING:skdoc:- sklearn.naive_bayes.MultinomialNB / Sklearn.Naive_bayes.MultinomialNB
WARNING:skdoc:- sklearn.naive_bayes.MultinomialNB.MultinomialNB / Sklearn.Naive_bayes.MultinomialNB.create
WARNING:skdoc:skdoc.py:0:function binarize: was emitted under 2 names:
WARNING:skdoc:- sklearn.naive_bayes.binarize / Sklearn.Naive_bayes.binarize
WARNING:skdoc:- sklearn.preprocessing.binarize / Sklearn.Preprocessing.binarize
WARNING:skdoc:skdoc.py:0:function logsumexp: was emitted under 2 names:
WARNING:skdoc:- sklearn.naive_bayes.logsumexp / Sklearn.Naive_bayes.logsumexp
WARNING:skdoc:- sklearn.utils.fixes.logsumexp / Sklearn.Utils.Fixes.logsumexp
WARNING:skdoc:skdoc.py:0:type BallTree: was emitted under 2 names:
WARNING:skdoc:- sklearn.neighbors.BallTree / Sklearn.Neighbors.BallTree
WARNING:skdoc:- sklearn.neighbors.BallTree.BallTree / Sklearn.Neighbors.BallTree.ballTree
WARNING:skdoc:skdoc.py:0:type DistanceMetric: was emitted under 2 names:
WARNING:skdoc:- sklearn.neighbors.DistanceMetric / Sklearn.Neighbors.DistanceMetric
WARNING:skdoc:- sklearn.neighbors.DistanceMetric.DistanceMetric / Sklearn.Neighbors.DistanceMetric.distanceMetric
WARNING:skdoc:skdoc.py:0:type KDTree: was emitted under 2 names:
WARNING:skdoc:- sklearn.neighbors.KDTree / Sklearn.Neighbors.KDTree
WARNING:skdoc:- sklearn.neighbors.KDTree.KDTree / Sklearn.Neighbors.KDTree.kDTree
WARNING:skdoc:skdoc.py:0:ABCMeta KNeighborsClassifier: was emitted under 2 names:
WARNING:skdoc:- sklearn.neighbors.KNeighborsClassifier / Sklearn.Neighbors.KNeighborsClassifier
WARNING:skdoc:- sklearn.neighbors.KNeighborsClassifier.KNeighborsClassifier / Sklearn.Neighbors.KNeighborsClassifier.create
WARNING:skdoc:skdoc.py:0:ABCMeta KNeighborsRegressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.neighbors.KNeighborsRegressor / Sklearn.Neighbors.KNeighborsRegressor
WARNING:skdoc:- sklearn.neighbors.KNeighborsRegressor.KNeighborsRegressor / Sklearn.Neighbors.KNeighborsRegressor.create
WARNING:skdoc:skdoc.py:0:ABCMeta KNeighborsTransformer: was emitted under 2 names:
WARNING:skdoc:- sklearn.neighbors.KNeighborsTransformer / Sklearn.Neighbors.KNeighborsTransformer
WARNING:skdoc:- sklearn.neighbors.KNeighborsTransformer.KNeighborsTransformer / Sklearn.Neighbors.KNeighborsTransformer.create
WARNING:skdoc:skdoc.py:0:type KernelDensity: was emitted under 2 names:
WARNING:skdoc:- sklearn.neighbors.KernelDensity / Sklearn.Neighbors.KernelDensity
WARNING:skdoc:- sklearn.neighbors.KernelDensity.KernelDensity / Sklearn.Neighbors.KernelDensity.create
WARNING:skdoc:skdoc.py:0:ABCMeta LocalOutlierFactor: was emitted under 2 names:
WARNING:skdoc:- sklearn.neighbors.LocalOutlierFactor / Sklearn.Neighbors.LocalOutlierFactor
WARNING:skdoc:- sklearn.neighbors.LocalOutlierFactor.LocalOutlierFactor / Sklearn.Neighbors.LocalOutlierFactor.create
WARNING:skdoc:skdoc.py:0:type NearestCentroid: was emitted under 2 names:
WARNING:skdoc:- sklearn.neighbors.NearestCentroid / Sklearn.Neighbors.NearestCentroid
WARNING:skdoc:- sklearn.neighbors.NearestCentroid.NearestCentroid / Sklearn.Neighbors.NearestCentroid.create
WARNING:skdoc:skdoc.py:0:ABCMeta NearestNeighbors: was emitted under 2 names:
WARNING:skdoc:- sklearn.neighbors.NearestNeighbors / Sklearn.Neighbors.NearestNeighbors
WARNING:skdoc:- sklearn.neighbors.NearestNeighbors.NearestNeighbors / Sklearn.Neighbors.NearestNeighbors.create
WARNING:skdoc:skdoc.py:0:type NeighborhoodComponentsAnalysis: was emitted under 2 names:
WARNING:skdoc:- sklearn.neighbors.NeighborhoodComponentsAnalysis / Sklearn.Neighbors.NeighborhoodComponentsAnalysis
WARNING:skdoc:- sklearn.neighbors.NeighborhoodComponentsAnalysis.NeighborhoodComponentsAnalysis / Sklearn.Neighbors.NeighborhoodComponentsAnalysis.create
WARNING:skdoc:skdoc.py:0:ABCMeta RadiusNeighborsClassifier: was emitted under 2 names:
WARNING:skdoc:- sklearn.neighbors.RadiusNeighborsClassifier / Sklearn.Neighbors.RadiusNeighborsClassifier
WARNING:skdoc:- sklearn.neighbors.RadiusNeighborsClassifier.RadiusNeighborsClassifier / Sklearn.Neighbors.RadiusNeighborsClassifier.create
WARNING:skdoc:skdoc.py:0:ABCMeta RadiusNeighborsRegressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.neighbors.RadiusNeighborsRegressor / Sklearn.Neighbors.RadiusNeighborsRegressor
WARNING:skdoc:- sklearn.neighbors.RadiusNeighborsRegressor.RadiusNeighborsRegressor / Sklearn.Neighbors.RadiusNeighborsRegressor.create
WARNING:skdoc:skdoc.py:0:ABCMeta RadiusNeighborsTransformer: was emitted under 2 names:
WARNING:skdoc:- sklearn.neighbors.RadiusNeighborsTransformer / Sklearn.Neighbors.RadiusNeighborsTransformer
WARNING:skdoc:- sklearn.neighbors.RadiusNeighborsTransformer.RadiusNeighborsTransformer / Sklearn.Neighbors.RadiusNeighborsTransformer.create
WARNING:skdoc:skdoc.py:0:type BernoulliRBM: was emitted under 2 names:
WARNING:skdoc:- sklearn.neural_network.BernoulliRBM / Sklearn.Neural_network.BernoulliRBM
WARNING:skdoc:- sklearn.neural_network.BernoulliRBM.BernoulliRBM / Sklearn.Neural_network.BernoulliRBM.create
WARNING:skdoc:skdoc.py:0:ABCMeta MLPClassifier: was emitted under 2 names:
WARNING:skdoc:- sklearn.neural_network.MLPClassifier / Sklearn.Neural_network.MLPClassifier
WARNING:skdoc:- sklearn.neural_network.MLPClassifier.MLPClassifier / Sklearn.Neural_network.MLPClassifier.create
WARNING:skdoc:skdoc.py:0:ABCMeta MLPRegressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.neural_network.MLPRegressor / Sklearn.Neural_network.MLPRegressor
WARNING:skdoc:- sklearn.neural_network.MLPRegressor.MLPRegressor / Sklearn.Neural_network.MLPRegressor.create
WARNING:skdoc:skdoc.py:0:ABCMeta FeatureUnion: was emitted under 2 names:
WARNING:skdoc:- sklearn.pipeline.FeatureUnion / Sklearn.Pipeline.FeatureUnion
WARNING:skdoc:- sklearn.pipeline.FeatureUnion.FeatureUnion / Sklearn.Pipeline.FeatureUnion.create
WARNING:skdoc:skdoc.py:0:ABCMeta Pipeline: was emitted under 2 names:
WARNING:skdoc:- sklearn.pipeline.Pipeline / Sklearn.Pipeline.Pipeline
WARNING:skdoc:- sklearn.pipeline.Pipeline.Pipeline / Sklearn.Pipeline.Pipeline.create
WARNING:skdoc:skdoc.py:0:function check_memory: was emitted under 2 names:
WARNING:skdoc:- sklearn.pipeline.check_memory / Sklearn.Pipeline.check_memory
WARNING:skdoc:- sklearn.utils.validation.check_memory / Sklearn.Utils.Validation.check_memory
WARNING:skdoc:skdoc.py:0:wrapper_descriptor __iter__: was emitted under 2 names:
WARNING:skdoc:- sklearn.pipeline.islice.__iter__ / Sklearn.Pipeline.Islice.iter
WARNING:skdoc:- sklearn.utils.islice.__iter__ / Sklearn.Utils.Islice.iter
WARNING:skdoc:skdoc.py:0:type Binarizer: was emitted under 2 names:
WARNING:skdoc:- sklearn.preprocessing.Binarizer / Sklearn.Preprocessing.Binarizer
WARNING:skdoc:- sklearn.preprocessing.Binarizer.Binarizer / Sklearn.Preprocessing.Binarizer.create
WARNING:skdoc:skdoc.py:0:type FunctionTransformer: was emitted under 2 names:
WARNING:skdoc:- sklearn.preprocessing.FunctionTransformer / Sklearn.Preprocessing.FunctionTransformer
WARNING:skdoc:- sklearn.preprocessing.FunctionTransformer.FunctionTransformer / Sklearn.Preprocessing.FunctionTransformer.create
WARNING:skdoc:skdoc.py:0:type KBinsDiscretizer: was emitted under 2 names:
WARNING:skdoc:- sklearn.preprocessing.KBinsDiscretizer / Sklearn.Preprocessing.KBinsDiscretizer
WARNING:skdoc:- sklearn.preprocessing.KBinsDiscretizer.KBinsDiscretizer / Sklearn.Preprocessing.KBinsDiscretizer.create
WARNING:skdoc:skdoc.py:0:type KernelCenterer: was emitted under 2 names:
WARNING:skdoc:- sklearn.preprocessing.KernelCenterer / Sklearn.Preprocessing.KernelCenterer
WARNING:skdoc:- sklearn.preprocessing.KernelCenterer.KernelCenterer / Sklearn.Preprocessing.KernelCenterer.create
WARNING:skdoc:skdoc.py:0:type MaxAbsScaler: was emitted under 2 names:
WARNING:skdoc:- sklearn.preprocessing.MaxAbsScaler / Sklearn.Preprocessing.MaxAbsScaler
WARNING:skdoc:- sklearn.preprocessing.MaxAbsScaler.MaxAbsScaler / Sklearn.Preprocessing.MaxAbsScaler.create
WARNING:skdoc:skdoc.py:0:type MinMaxScaler: was emitted under 2 names:
WARNING:skdoc:- sklearn.preprocessing.MinMaxScaler / Sklearn.Preprocessing.MinMaxScaler
WARNING:skdoc:- sklearn.preprocessing.MinMaxScaler.MinMaxScaler / Sklearn.Preprocessing.MinMaxScaler.create
WARNING:skdoc:skdoc.py:0:type MultiLabelBinarizer: was emitted under 2 names:
WARNING:skdoc:- sklearn.preprocessing.MultiLabelBinarizer / Sklearn.Preprocessing.MultiLabelBinarizer
WARNING:skdoc:- sklearn.preprocessing.MultiLabelBinarizer.MultiLabelBinarizer / Sklearn.Preprocessing.MultiLabelBinarizer.create
WARNING:skdoc:skdoc.py:0:type Normalizer: was emitted under 2 names:
WARNING:skdoc:- sklearn.preprocessing.Normalizer / Sklearn.Preprocessing.Normalizer
WARNING:skdoc:- sklearn.preprocessing.Normalizer.Normalizer / Sklearn.Preprocessing.Normalizer.create
WARNING:skdoc:skdoc.py:0:type OneHotEncoder: was emitted under 2 names:
WARNING:skdoc:- sklearn.preprocessing.OneHotEncoder / Sklearn.Preprocessing.OneHotEncoder
WARNING:skdoc:- sklearn.preprocessing.OneHotEncoder.OneHotEncoder / Sklearn.Preprocessing.OneHotEncoder.create
WARNING:skdoc:skdoc.py:0:type OrdinalEncoder: was emitted under 2 names:
WARNING:skdoc:- sklearn.preprocessing.OrdinalEncoder / Sklearn.Preprocessing.OrdinalEncoder
WARNING:skdoc:- sklearn.preprocessing.OrdinalEncoder.OrdinalEncoder / Sklearn.Preprocessing.OrdinalEncoder.create
WARNING:skdoc:skdoc.py:0:type PolynomialFeatures: was emitted under 2 names:
WARNING:skdoc:- sklearn.preprocessing.PolynomialFeatures / Sklearn.Preprocessing.PolynomialFeatures
WARNING:skdoc:- sklearn.preprocessing.PolynomialFeatures.PolynomialFeatures / Sklearn.Preprocessing.PolynomialFeatures.create
WARNING:skdoc:skdoc.py:0:type PowerTransformer: was emitted under 2 names:
WARNING:skdoc:- sklearn.preprocessing.PowerTransformer / Sklearn.Preprocessing.PowerTransformer
WARNING:skdoc:- sklearn.preprocessing.PowerTransformer.PowerTransformer / Sklearn.Preprocessing.PowerTransformer.create
WARNING:skdoc:skdoc.py:0:type QuantileTransformer: was emitted under 2 names:
WARNING:skdoc:- sklearn.preprocessing.QuantileTransformer / Sklearn.Preprocessing.QuantileTransformer
WARNING:skdoc:- sklearn.preprocessing.QuantileTransformer.QuantileTransformer / Sklearn.Preprocessing.QuantileTransformer.create
WARNING:skdoc:skdoc.py:0:type RobustScaler: was emitted under 2 names:
WARNING:skdoc:- sklearn.preprocessing.RobustScaler / Sklearn.Preprocessing.RobustScaler
WARNING:skdoc:- sklearn.preprocessing.RobustScaler.RobustScaler / Sklearn.Preprocessing.RobustScaler.create
WARNING:skdoc:skdoc.py:0:ABCMeta GaussianRandomProjection: was emitted under 2 names:
WARNING:skdoc:- sklearn.random_projection.GaussianRandomProjection / Sklearn.Random_projection.GaussianRandomProjection
WARNING:skdoc:- sklearn.random_projection.GaussianRandomProjection.GaussianRandomProjection / Sklearn.Random_projection.GaussianRandomProjection.create
WARNING:skdoc:skdoc.py:0:ABCMeta SparseRandomProjection: was emitted under 2 names:
WARNING:skdoc:- sklearn.random_projection.SparseRandomProjection / Sklearn.Random_projection.SparseRandomProjection
WARNING:skdoc:- sklearn.random_projection.SparseRandomProjection.SparseRandomProjection / Sklearn.Random_projection.SparseRandomProjection.create
WARNING:skdoc:skdoc.py:0:builtin_function_or_method sample_without_replacement: was emitted under 2 names:
WARNING:skdoc:- sklearn.random_projection.sample_without_replacement / Sklearn.Random_projection.sample_without_replacement
WARNING:skdoc:- sklearn.utils.random.sample_without_replacement / Sklearn.Utils.Random.sample_without_replacement
WARNING:skdoc:skdoc.py:0:ABCMeta LabelPropagation: was emitted under 2 names:
WARNING:skdoc:- sklearn.semi_supervised.LabelPropagation / Sklearn.Semi_supervised.LabelPropagation
WARNING:skdoc:- sklearn.semi_supervised.LabelPropagation.LabelPropagation / Sklearn.Semi_supervised.LabelPropagation.create
WARNING:skdoc:skdoc.py:0:ABCMeta LabelSpreading: was emitted under 2 names:
WARNING:skdoc:- sklearn.semi_supervised.LabelSpreading / Sklearn.Semi_supervised.LabelSpreading
WARNING:skdoc:- sklearn.semi_supervised.LabelSpreading.LabelSpreading / Sklearn.Semi_supervised.LabelSpreading.create
WARNING:skdoc:skdoc.py:0:ABCMeta LinearSVR: was emitted under 2 names:
WARNING:skdoc:- sklearn.svm.LinearSVR / Sklearn.Svm.LinearSVR
WARNING:skdoc:- sklearn.svm.LinearSVR.LinearSVR / Sklearn.Svm.LinearSVR.create
WARNING:skdoc:skdoc.py:0:ABCMeta NuSVC: was emitted under 2 names:
WARNING:skdoc:- sklearn.svm.NuSVC / Sklearn.Svm.NuSVC
WARNING:skdoc:- sklearn.svm.NuSVC.NuSVC / Sklearn.Svm.NuSVC.create
WARNING:skdoc:skdoc.py:0:ABCMeta NuSVR: was emitted under 2 names:
WARNING:skdoc:- sklearn.svm.NuSVR / Sklearn.Svm.NuSVR
WARNING:skdoc:- sklearn.svm.NuSVR.NuSVR / Sklearn.Svm.NuSVR.create
WARNING:skdoc:skdoc.py:0:ABCMeta OneClassSVM: was emitted under 2 names:
WARNING:skdoc:- sklearn.svm.OneClassSVM / Sklearn.Svm.OneClassSVM
WARNING:skdoc:- sklearn.svm.OneClassSVM.OneClassSVM / Sklearn.Svm.OneClassSVM.create
WARNING:skdoc:skdoc.py:0:ABCMeta SVC: was emitted under 2 names:
WARNING:skdoc:- sklearn.svm.SVC / Sklearn.Svm.SVC
WARNING:skdoc:- sklearn.svm.SVC.SVC / Sklearn.Svm.SVC.create
WARNING:skdoc:skdoc.py:0:ABCMeta SVR: was emitted under 2 names:
WARNING:skdoc:- sklearn.svm.SVR / Sklearn.Svm.SVR
WARNING:skdoc:- sklearn.svm.SVR.SVR / Sklearn.Svm.SVR.create
WARNING:skdoc:skdoc.py:0:ABCMeta DecisionTreeClassifier: was emitted under 2 names:
WARNING:skdoc:- sklearn.tree.DecisionTreeClassifier / Sklearn.Tree.DecisionTreeClassifier
WARNING:skdoc:- sklearn.tree.DecisionTreeClassifier.DecisionTreeClassifier / Sklearn.Tree.DecisionTreeClassifier.create
WARNING:skdoc:skdoc.py:0:ABCMeta DecisionTreeRegressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.tree.DecisionTreeRegressor / Sklearn.Tree.DecisionTreeRegressor
WARNING:skdoc:- sklearn.tree.DecisionTreeRegressor.DecisionTreeRegressor / Sklearn.Tree.DecisionTreeRegressor.create
WARNING:skdoc:skdoc.py:0:ABCMeta ExtraTreeClassifier: was emitted under 2 names:
WARNING:skdoc:- sklearn.tree.ExtraTreeClassifier / Sklearn.Tree.ExtraTreeClassifier
WARNING:skdoc:- sklearn.tree.ExtraTreeClassifier.ExtraTreeClassifier / Sklearn.Tree.ExtraTreeClassifier.create
WARNING:skdoc:skdoc.py:0:ABCMeta ExtraTreeRegressor: was emitted under 2 names:
WARNING:skdoc:- sklearn.tree.ExtraTreeRegressor / Sklearn.Tree.ExtraTreeRegressor
WARNING:skdoc:- sklearn.tree.ExtraTreeRegressor.ExtraTreeRegressor / Sklearn.Tree.ExtraTreeRegressor.create
WARNING:skdoc:skdoc.py:0:type Memory: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.Memory / Sklearn.Utils.Memory
WARNING:skdoc:- sklearn.utils.Memory.Memory / Sklearn.Utils.Memory.create
WARNING:skdoc:skdoc.py:0:type Parallel: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.Parallel / Sklearn.Utils.Parallel
WARNING:skdoc:- sklearn.utils.Parallel.Parallel / Sklearn.Utils.Parallel.create
WARNING:skdoc:skdoc.py:0:type Path: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.Path / Sklearn.Utils.Path
WARNING:skdoc:- sklearn.utils.Path.Path / Sklearn.Utils.Path.create
WARNING:skdoc:skdoc.py:0:function assert_all_finite: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.assert_all_finite / Sklearn.Utils.assert_all_finite
WARNING:skdoc:- sklearn.utils.validation.assert_all_finite / Sklearn.Utils.Validation.assert_all_finite
WARNING:skdoc:skdoc.py:0:function check_scalar: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.check_scalar / Sklearn.Utils.check_scalar
WARNING:skdoc:- sklearn.utils.validation.check_scalar / Sklearn.Utils.Validation.check_scalar
WARNING:skdoc:skdoc.py:0:function check_symmetric: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.check_symmetric / Sklearn.Utils.check_symmetric
WARNING:skdoc:- sklearn.utils.validation.check_symmetric / Sklearn.Utils.Validation.check_symmetric
WARNING:skdoc:skdoc.py:0:type compress: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.compress / Sklearn.Utils.Compress
WARNING:skdoc:- sklearn.utils.compress.compress / Sklearn.Utils.Compress.create
WARNING:skdoc:skdoc.py:0:function compute_class_weight: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.compute_class_weight / Sklearn.Utils.compute_class_weight
WARNING:skdoc:- sklearn.utils.class_weight.compute_class_weight / Sklearn.Utils.Class_weight.compute_class_weight
WARNING:skdoc:skdoc.py:0:function compute_sample_weight: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.compute_sample_weight / Sklearn.Utils.compute_sample_weight
WARNING:skdoc:- sklearn.utils.class_weight.compute_sample_weight / Sklearn.Utils.Class_weight.compute_sample_weight
WARNING:skdoc:skdoc.py:0:builtin_function_or_method murmurhash3_32: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.murmurhash3_32 / Sklearn.Utils.murmurhash3_32
WARNING:skdoc:- sklearn.utils.murmurhash.murmurhash3_32 / Sklearn.Utils.Murmurhash.murmurhash3_32
WARNING:skdoc:skdoc.py:0:type parallel_backend: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.parallel_backend / Sklearn.Utils.Parallel_backend
WARNING:skdoc:- sklearn.utils.parallel_backend.parallel_backend / Sklearn.Utils.Parallel_backend.create
WARNING:skdoc:skdoc.py:0:builtin_function_or_method csr_row_norms: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.extmath.csr_row_norms / Sklearn.Utils.Extmath.csr_row_norms
WARNING:skdoc:- sklearn.utils.sparsefuncs_fast.csr_row_norms / Sklearn.Utils.Sparsefuncs_fast.csr_row_norms
WARNING:skdoc:skdoc.py:0:function stable_cumsum: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.extmath.stable_cumsum / Sklearn.Utils.Extmath.stable_cumsum
WARNING:skdoc:- sklearn.utils.stats.stable_cumsum / Sklearn.Utils.Stats.stable_cumsum
WARNING:skdoc:skdoc.py:0:type LooseVersion: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.fixes.LooseVersion / Sklearn.Utils.Fixes.LooseVersion
WARNING:skdoc:- sklearn.utils.fixes.LooseVersion.LooseVersion / Sklearn.Utils.Fixes.LooseVersion.create
WARNING:skdoc:skdoc.py:0:type MaskedArray: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.fixes.MaskedArray / Sklearn.Utils.Fixes.MaskedArray
WARNING:skdoc:- sklearn.utils.fixes.MaskedArray.MaskedArray / Sklearn.Utils.Fixes.MaskedArray.create
WARNING:skdoc:skdoc.py:0:builtin_function_or_method graph_shortest_path: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.graph.graph_shortest_path / Sklearn.Utils.Graph.graph_shortest_path
WARNING:skdoc:- sklearn.utils.graph_shortest_path.graph_shortest_path / Sklearn.Utils.Graph_shortest_path.graph_shortest_path
WARNING:skdoc:skdoc.py:0:type float64: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.graph_shortest_path.DTYPE / Sklearn.Utils.Graph_shortest_path.DTYPE
WARNING:skdoc:- sklearn.utils.graph_shortest_path.DTYPE.DTYPE / Sklearn.Utils.Graph_shortest_path.DTYPE.create
WARNING:skdoc:skdoc.py:0:type int32: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.graph_shortest_path.ITYPE / Sklearn.Utils.Graph_shortest_path.ITYPE
WARNING:skdoc:- sklearn.utils.graph_shortest_path.ITYPE.ITYPE / Sklearn.Utils.Graph_shortest_path.ITYPE.itype
WARNING:skdoc:skdoc.py:0:type attrgetter: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.metaestimators.attrgetter / Sklearn.Utils.Metaestimators.Attrgetter
WARNING:skdoc:- sklearn.utils.metaestimators.attrgetter.attrgetter / Sklearn.Utils.Metaestimators.Attrgetter.attrgetter
WARNING:skdoc:skdoc.py:0:type chain: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.multiclass.chain / Sklearn.Utils.Multiclass.Chain
WARNING:skdoc:- sklearn.utils.multiclass.chain.chain / Sklearn.Utils.Multiclass.Chain.create
WARNING:skdoc:skdoc.py:0:type dok_matrix: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix / Sklearn.Utils.Multiclass.Dok_matrix
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.dok_matrix / Sklearn.Utils.Multiclass.Dok_matrix.create
WARNING:skdoc:skdoc.py:0:function getrow: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.getrow / Sklearn.Utils.Multiclass.Dok_matrix.getrow
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.getrow / Sklearn.Utils.Multiclass.Spmatrix.getrow
WARNING:skdoc:skdoc.py:0:function toarray: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.toarray / Sklearn.Utils.Multiclass.Dok_matrix.toarray
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.toarray / Sklearn.Utils.Multiclass.Spmatrix.toarray
WARNING:skdoc:skdoc.py:0:function tocsr: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.tocsr / Sklearn.Utils.Multiclass.Dok_matrix.tocsr
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.tocsr / Sklearn.Utils.Multiclass.Spmatrix.tocsr
WARNING:skdoc:skdoc.py:0:function tolil: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.tolil / Sklearn.Utils.Multiclass.Dok_matrix.tolil
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.tolil / Sklearn.Utils.Multiclass.Spmatrix.tolil
WARNING:skdoc:skdoc.py:0:type lil_matrix: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix / Sklearn.Utils.Multiclass.Lil_matrix
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.lil_matrix / Sklearn.Utils.Multiclass.Lil_matrix.create
WARNING:skdoc:skdoc.py:0:function tocoo: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.tocoo / Sklearn.Utils.Multiclass.Lil_matrix.tocoo
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.tocoo / Sklearn.Utils.Multiclass.Spmatrix.tocoo
WARNING:skdoc:skdoc.py:0:function tocsc: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.tocsc / Sklearn.Utils.Multiclass.Lil_matrix.tocsc
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.tocsc / Sklearn.Utils.Multiclass.Spmatrix.tocsc
WARNING:skdoc:skdoc.py:0:type spmatrix: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix / Sklearn.Utils.Multiclass.Spmatrix
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.spmatrix / Sklearn.Utils.Multiclass.Spmatrix.create
WARNING:skdoc:skdoc.py:0:type ComplexWarning: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.validation.ComplexWarning / Sklearn.Utils.Validation.ComplexWarning
WARNING:skdoc:- sklearn.utils.validation.ComplexWarning.ComplexWarning / Sklearn.Utils.Validation.ComplexWarning.complexWarning
WARNING:skdoc:skdoc.py:0:type Parameter: was emitted under 2 names:
WARNING:skdoc:- sklearn.utils.validation.Parameter / Sklearn.Utils.Validation.Parameter
WARNING:skdoc:- sklearn.utils.validation.Parameter.Parameter / Sklearn.Utils.Validation.Parameter.create
WARNING:skdoc:skdoc.py:0:function is_classifier: was emitted under 3 names:
WARNING:skdoc:- sklearn.base.is_classifier / Sklearn.Base.is_classifier
WARNING:skdoc:- sklearn.multiclass.is_classifier / Sklearn.Multiclass.is_classifier
WARNING:skdoc:- sklearn.multioutput.is_classifier / Sklearn.Multioutput.is_classifier
WARNING:skdoc:skdoc.py:0:function indexable: was emitted under 3 names:
WARNING:skdoc:- sklearn.calibration.indexable / Sklearn.Calibration.indexable
WARNING:skdoc:- sklearn.utils.indexable / Sklearn.Utils.indexable
WARNING:skdoc:- sklearn.utils.validation.indexable / Sklearn.Utils.Validation.indexable
WARNING:skdoc:skdoc.py:0:function label_binarize: was emitted under 3 names:
WARNING:skdoc:- sklearn.calibration.label_binarize / Sklearn.Calibration.label_binarize
WARNING:skdoc:- sklearn.naive_bayes.label_binarize / Sklearn.Naive_bayes.label_binarize
WARNING:skdoc:- sklearn.preprocessing.label_binarize / Sklearn.Preprocessing.label_binarize
WARNING:skdoc:skdoc.py:0:function signature: was emitted under 3 names:
WARNING:skdoc:- sklearn.calibration.signature / Sklearn.Calibration.signature
WARNING:skdoc:- sklearn.gaussian_process.kernels.signature / Sklearn.Gaussian_process.Kernels.signature
WARNING:skdoc:- sklearn.utils.validation.signature / Sklearn.Utils.Validation.signature
WARNING:skdoc:skdoc.py:0:function score: was emitted under 3 names:
WARNING:skdoc:- sklearn.ensemble.StackingRegressor.score / Sklearn.Ensemble.StackingRegressor.score
WARNING:skdoc:- sklearn.ensemble.VotingRegressor.score / Sklearn.Ensemble.VotingRegressor.score
WARNING:skdoc:- sklearn.multioutput.RegressorChain.score / Sklearn.Multioutput.RegressorChain.score
WARNING:skdoc:skdoc.py:0:function normalize: was emitted under 3 names:
WARNING:skdoc:- sklearn.feature_extraction.text.normalize / Sklearn.Feature_extraction.Text.normalize
WARNING:skdoc:- sklearn.metrics.pairwise.normalize / Sklearn.Metrics.Pairwise.normalize
WARNING:skdoc:- sklearn.preprocessing.normalize / Sklearn.Preprocessing.normalize
WARNING:skdoc:skdoc.py:0:function get_support: was emitted under 3 names:
WARNING:skdoc:- sklearn.feature_selection.RFE.get_support / Sklearn.Feature_selection.RFE.get_support
WARNING:skdoc:- sklearn.feature_selection.RFECV.get_support / Sklearn.Feature_selection.RFECV.get_support
WARNING:skdoc:- sklearn.feature_selection.SelectFromModel.get_support / Sklearn.Feature_selection.SelectFromModel.get_support
WARNING:skdoc:skdoc.py:0:function inverse_transform: was emitted under 3 names:
WARNING:skdoc:- sklearn.feature_selection.RFE.inverse_transform / Sklearn.Feature_selection.RFE.inverse_transform
WARNING:skdoc:- sklearn.feature_selection.RFECV.inverse_transform / Sklearn.Feature_selection.RFECV.inverse_transform
WARNING:skdoc:- sklearn.feature_selection.SelectFromModel.inverse_transform / Sklearn.Feature_selection.SelectFromModel.inverse_transform
WARNING:skdoc:skdoc.py:0:function transform: was emitted under 3 names:
WARNING:skdoc:- sklearn.feature_selection.RFE.transform / Sklearn.Feature_selection.RFE.transform
WARNING:skdoc:- sklearn.feature_selection.RFECV.transform / Sklearn.Feature_selection.RFECV.transform
WARNING:skdoc:- sklearn.feature_selection.SelectFromModel.transform / Sklearn.Feature_selection.SelectFromModel.transform
WARNING:skdoc:skdoc.py:0:method_descriptor mro: was emitted under 3 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.ABCMeta.mro / Sklearn.Gaussian_process.Kernels.ABCMeta.mro
WARNING:skdoc:- sklearn.multioutput.ABCMeta.mro / Sklearn.Multioutput.ABCMeta.mro
WARNING:skdoc:- sklearn.naive_bayes.ABCMeta.mro / Sklearn.Naive_bayes.ABCMeta.mro
WARNING:skdoc:skdoc.py:0:function register: was emitted under 3 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.ABCMeta.register / Sklearn.Gaussian_process.Kernels.ABCMeta.register
WARNING:skdoc:- sklearn.multioutput.ABCMeta.register / Sklearn.Multioutput.ABCMeta.register
WARNING:skdoc:- sklearn.naive_bayes.ABCMeta.register / Sklearn.Naive_bayes.ABCMeta.register
WARNING:skdoc:skdoc.py:0:function get_params: was emitted under 3 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.KernelOperator.get_params / Sklearn.Gaussian_process.Kernels.KernelOperator.get_params
WARNING:skdoc:- sklearn.gaussian_process.kernels.Product.get_params / Sklearn.Gaussian_process.Kernels.Product.get_params
WARNING:skdoc:- sklearn.gaussian_process.kernels.Sum.get_params / Sklearn.Gaussian_process.Kernels.Sum.get_params
WARNING:skdoc:skdoc.py:0:function is_stationary: was emitted under 3 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.KernelOperator.is_stationary / Sklearn.Gaussian_process.Kernels.KernelOperator.is_stationary
WARNING:skdoc:- sklearn.gaussian_process.kernels.Product.is_stationary / Sklearn.Gaussian_process.Kernels.Product.is_stationary
WARNING:skdoc:- sklearn.gaussian_process.kernels.Sum.is_stationary / Sklearn.Gaussian_process.Kernels.Sum.is_stationary
WARNING:skdoc:skdoc.py:0:function as_float_array: was emitted under 3 names:
WARNING:skdoc:- sklearn.kernel_approximation.as_float_array / Sklearn.Kernel_approximation.as_float_array
WARNING:skdoc:- sklearn.utils.as_float_array / Sklearn.Utils.as_float_array
WARNING:skdoc:- sklearn.utils.validation.as_float_array / Sklearn.Utils.Validation.as_float_array
WARNING:skdoc:skdoc.py:0:function lasso_path: was emitted under 3 names:
WARNING:skdoc:- sklearn.linear_model.LassoCV.path / Sklearn.Linear_model.LassoCV.path
WARNING:skdoc:- sklearn.linear_model.MultiTaskLassoCV.path / Sklearn.Linear_model.MultiTaskLassoCV.path
WARNING:skdoc:- sklearn.linear_model.lasso_path / Sklearn.Linear_model.lasso_path
WARNING:skdoc:skdoc.py:0:function euclidean_distances: was emitted under 3 names:
WARNING:skdoc:- sklearn.metrics.euclidean_distances / Sklearn.Metrics.euclidean_distances
WARNING:skdoc:- sklearn.metrics.pairwise.euclidean_distances / Sklearn.Metrics.Pairwise.euclidean_distances
WARNING:skdoc:- sklearn.multiclass.euclidean_distances / Sklearn.Multiclass.euclidean_distances
WARNING:skdoc:skdoc.py:0:function check_non_negative: was emitted under 3 names:
WARNING:skdoc:- sklearn.metrics.pairwise.check_non_negative / Sklearn.Metrics.Pairwise.check_non_negative
WARNING:skdoc:- sklearn.naive_bayes.check_non_negative / Sklearn.Naive_bayes.check_non_negative
WARNING:skdoc:- sklearn.utils.validation.check_non_negative / Sklearn.Utils.Validation.check_non_negative
WARNING:skdoc:skdoc.py:0:function reshape: was emitted under 3 names:
WARNING:skdoc:- sklearn.metrics.pairwise.csr_matrix.reshape / Sklearn.Metrics.Pairwise.Csr_matrix.reshape
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.reshape / Sklearn.Utils.Multiclass.Dok_matrix.reshape
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.reshape / Sklearn.Utils.Multiclass.Spmatrix.reshape
WARNING:skdoc:skdoc.py:0:function set_shape: was emitted under 3 names:
WARNING:skdoc:- sklearn.metrics.pairwise.csr_matrix.set_shape / Sklearn.Metrics.Pairwise.Csr_matrix.set_shape
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.set_shape / Sklearn.Utils.Multiclass.Lil_matrix.set_shape
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.set_shape / Sklearn.Utils.Multiclass.Spmatrix.set_shape
WARNING:skdoc:skdoc.py:0:function todok: was emitted under 3 names:
WARNING:skdoc:- sklearn.metrics.pairwise.csr_matrix.todok / Sklearn.Metrics.Pairwise.Csr_matrix.todok
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.todok / Sklearn.Utils.Multiclass.Lil_matrix.todok
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.todok / Sklearn.Utils.Multiclass.Spmatrix.todok
WARNING:skdoc:skdoc.py:0:function predict: was emitted under 3 names:
WARNING:skdoc:- sklearn.multioutput.MultiOutputClassifier.predict / Sklearn.Multioutput.MultiOutputClassifier.predict
WARNING:skdoc:- sklearn.multioutput.MultiOutputEstimator.predict / Sklearn.Multioutput.MultiOutputEstimator.predict
WARNING:skdoc:- sklearn.multioutput.MultiOutputRegressor.predict / Sklearn.Multioutput.MultiOutputRegressor.predict
WARNING:skdoc:skdoc.py:0:function __iter__: was emitted under 3 names:
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.__iter__ / Sklearn.Utils.Multiclass.Dok_matrix.iter
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.__iter__ / Sklearn.Utils.Multiclass.Lil_matrix.iter
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.__iter__ / Sklearn.Utils.Multiclass.Spmatrix.iter
WARNING:skdoc:skdoc.py:0:function astype: was emitted under 3 names:
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.astype / Sklearn.Utils.Multiclass.Dok_matrix.astype
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.astype / Sklearn.Utils.Multiclass.Lil_matrix.astype
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.astype / Sklearn.Utils.Multiclass.Spmatrix.astype
WARNING:skdoc:skdoc.py:0:function conj: was emitted under 3 names:
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.conj / Sklearn.Utils.Multiclass.Dok_matrix.conj
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.conj / Sklearn.Utils.Multiclass.Lil_matrix.conj
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.conj / Sklearn.Utils.Multiclass.Spmatrix.conj
WARNING:skdoc:skdoc.py:0:function diagonal: was emitted under 3 names:
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.diagonal / Sklearn.Utils.Multiclass.Dok_matrix.diagonal
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.diagonal / Sklearn.Utils.Multiclass.Lil_matrix.diagonal
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.diagonal / Sklearn.Utils.Multiclass.Spmatrix.diagonal
WARNING:skdoc:skdoc.py:0:function getcol: was emitted under 3 names:
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.getcol / Sklearn.Utils.Multiclass.Dok_matrix.getcol
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.getcol / Sklearn.Utils.Multiclass.Lil_matrix.getcol
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.getcol / Sklearn.Utils.Multiclass.Spmatrix.getcol
WARNING:skdoc:skdoc.py:0:function maximum: was emitted under 3 names:
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.maximum / Sklearn.Utils.Multiclass.Dok_matrix.maximum
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.maximum / Sklearn.Utils.Multiclass.Lil_matrix.maximum
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.maximum / Sklearn.Utils.Multiclass.Spmatrix.maximum
WARNING:skdoc:skdoc.py:0:function minimum: was emitted under 3 names:
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.minimum / Sklearn.Utils.Multiclass.Dok_matrix.minimum
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.minimum / Sklearn.Utils.Multiclass.Lil_matrix.minimum
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.minimum / Sklearn.Utils.Multiclass.Spmatrix.minimum
WARNING:skdoc:skdoc.py:0:function multiply: was emitted under 3 names:
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.multiply / Sklearn.Utils.Multiclass.Dok_matrix.multiply
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.multiply / Sklearn.Utils.Multiclass.Lil_matrix.multiply
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.multiply / Sklearn.Utils.Multiclass.Spmatrix.multiply
WARNING:skdoc:skdoc.py:0:function power: was emitted under 3 names:
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.power / Sklearn.Utils.Multiclass.Dok_matrix.power
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.power / Sklearn.Utils.Multiclass.Lil_matrix.power
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.power / Sklearn.Utils.Multiclass.Spmatrix.power
WARNING:skdoc:skdoc.py:0:function sum: was emitted under 3 names:
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.sum / Sklearn.Utils.Multiclass.Dok_matrix.sum
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.sum / Sklearn.Utils.Multiclass.Lil_matrix.sum
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.sum / Sklearn.Utils.Multiclass.Spmatrix.sum
WARNING:skdoc:skdoc.py:0:function tobsr: was emitted under 3 names:
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.tobsr / Sklearn.Utils.Multiclass.Dok_matrix.tobsr
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.tobsr / Sklearn.Utils.Multiclass.Lil_matrix.tobsr
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.tobsr / Sklearn.Utils.Multiclass.Spmatrix.tobsr
WARNING:skdoc:skdoc.py:0:type IsotonicRegression: was emitted under 4 names:
WARNING:skdoc:- sklearn.calibration.IsotonicRegression / Sklearn.Calibration.IsotonicRegression
WARNING:skdoc:- sklearn.calibration.IsotonicRegression.IsotonicRegression / Sklearn.Calibration.IsotonicRegression.create
WARNING:skdoc:- sklearn.isotonic.IsotonicRegression / Sklearn.Isotonic.IsotonicRegression
WARNING:skdoc:- sklearn.isotonic.IsotonicRegression.IsotonicRegression / Sklearn.Isotonic.IsotonicRegression.create
WARNING:skdoc:skdoc.py:0:type LabelBinarizer: was emitted under 4 names:
WARNING:skdoc:- sklearn.calibration.LabelBinarizer / Sklearn.Calibration.LabelBinarizer
WARNING:skdoc:- sklearn.calibration.LabelBinarizer.LabelBinarizer / Sklearn.Calibration.LabelBinarizer.create
WARNING:skdoc:- sklearn.multiclass.LabelBinarizer / Sklearn.Multiclass.LabelBinarizer
WARNING:skdoc:- sklearn.multiclass.LabelBinarizer.LabelBinarizer / Sklearn.Multiclass.LabelBinarizer.create
WARNING:skdoc:skdoc.py:0:type LinearSVC: was emitted under 4 names:
WARNING:skdoc:- sklearn.calibration.LinearSVC / Sklearn.Calibration.LinearSVC
WARNING:skdoc:- sklearn.calibration.LinearSVC.LinearSVC / Sklearn.Calibration.LinearSVC.create
WARNING:skdoc:- sklearn.svm.LinearSVC / Sklearn.Svm.LinearSVC
WARNING:skdoc:- sklearn.svm.LinearSVC.LinearSVC / Sklearn.Svm.LinearSVC.create
WARNING:skdoc:skdoc.py:0:function column_or_1d: was emitted under 4 names:
WARNING:skdoc:- sklearn.calibration.column_or_1d / Sklearn.Calibration.column_or_1d
WARNING:skdoc:- sklearn.naive_bayes.column_or_1d / Sklearn.Naive_bayes.column_or_1d
WARNING:skdoc:- sklearn.utils.column_or_1d / Sklearn.Utils.column_or_1d
WARNING:skdoc:- sklearn.utils.validation.column_or_1d / Sklearn.Utils.Validation.column_or_1d
WARNING:skdoc:skdoc.py:0:type ChangedBehaviorWarning: was emitted under 4 names:
WARNING:skdoc:- sklearn.discriminant_analysis.ChangedBehaviorWarning / Sklearn.Discriminant_analysis.ChangedBehaviorWarning
WARNING:skdoc:- sklearn.discriminant_analysis.ChangedBehaviorWarning.ChangedBehaviorWarning / Sklearn.Discriminant_analysis.ChangedBehaviorWarning.changedBehaviorWarning
WARNING:skdoc:- sklearn.exceptions.ChangedBehaviorWarning / Sklearn.Exceptions.ChangedBehaviorWarning
WARNING:skdoc:- sklearn.exceptions.ChangedBehaviorWarning.ChangedBehaviorWarning / Sklearn.Exceptions.ChangedBehaviorWarning.changedBehaviorWarning
WARNING:skdoc:skdoc.py:0:type StandardScaler: was emitted under 4 names:
WARNING:skdoc:- sklearn.discriminant_analysis.StandardScaler / Sklearn.Discriminant_analysis.StandardScaler
WARNING:skdoc:- sklearn.discriminant_analysis.StandardScaler.StandardScaler / Sklearn.Discriminant_analysis.StandardScaler.create
WARNING:skdoc:- sklearn.preprocessing.StandardScaler / Sklearn.Preprocessing.StandardScaler
WARNING:skdoc:- sklearn.preprocessing.StandardScaler.StandardScaler / Sklearn.Preprocessing.StandardScaler.create
WARNING:skdoc:skdoc.py:0:function check_classification_targets: was emitted under 4 names:
WARNING:skdoc:- sklearn.discriminant_analysis.check_classification_targets / Sklearn.Discriminant_analysis.check_classification_targets
WARNING:skdoc:- sklearn.multiclass.check_classification_targets / Sklearn.Multiclass.check_classification_targets
WARNING:skdoc:- sklearn.multioutput.check_classification_targets / Sklearn.Multioutput.check_classification_targets
WARNING:skdoc:- sklearn.utils.multiclass.check_classification_targets / Sklearn.Utils.Multiclass.check_classification_targets
WARNING:skdoc:skdoc.py:0:type deprecated: was emitted under 4 names:
WARNING:skdoc:- sklearn.dummy.deprecated / Sklearn.Dummy.Deprecated
WARNING:skdoc:- sklearn.dummy.deprecated.deprecated / Sklearn.Dummy.Deprecated.create
WARNING:skdoc:- sklearn.utils.deprecated / Sklearn.Utils.Deprecated
WARNING:skdoc:- sklearn.utils.deprecated.deprecated / Sklearn.Utils.Deprecated.create
WARNING:skdoc:skdoc.py:0:function get_params: was emitted under 4 names:
WARNING:skdoc:- sklearn.ensemble.StackingClassifier.get_params / Sklearn.Ensemble.StackingClassifier.get_params
WARNING:skdoc:- sklearn.ensemble.StackingRegressor.get_params / Sklearn.Ensemble.StackingRegressor.get_params
WARNING:skdoc:- sklearn.ensemble.VotingClassifier.get_params / Sklearn.Ensemble.VotingClassifier.get_params
WARNING:skdoc:- sklearn.ensemble.VotingRegressor.get_params / Sklearn.Ensemble.VotingRegressor.get_params
WARNING:skdoc:skdoc.py:0:function set_params: was emitted under 4 names:
WARNING:skdoc:- sklearn.ensemble.StackingClassifier.set_params / Sklearn.Ensemble.StackingClassifier.set_params
WARNING:skdoc:- sklearn.ensemble.StackingRegressor.set_params / Sklearn.Ensemble.StackingRegressor.set_params
WARNING:skdoc:- sklearn.ensemble.VotingClassifier.set_params / Sklearn.Ensemble.VotingClassifier.set_params
WARNING:skdoc:- sklearn.ensemble.VotingRegressor.set_params / Sklearn.Ensemble.VotingRegressor.set_params
WARNING:skdoc:skdoc.py:0:type DataConversionWarning: was emitted under 4 names:
WARNING:skdoc:- sklearn.exceptions.DataConversionWarning / Sklearn.Exceptions.DataConversionWarning
WARNING:skdoc:- sklearn.exceptions.DataConversionWarning.DataConversionWarning / Sklearn.Exceptions.DataConversionWarning.dataConversionWarning
WARNING:skdoc:- sklearn.utils.DataConversionWarning / Sklearn.Utils.DataConversionWarning
WARNING:skdoc:- sklearn.utils.DataConversionWarning.DataConversionWarning / Sklearn.Utils.DataConversionWarning.dataConversionWarning
WARNING:skdoc:skdoc.py:0:type itemgetter: was emitted under 4 names:
WARNING:skdoc:- sklearn.feature_extraction.text.itemgetter / Sklearn.Feature_extraction.Text.Itemgetter
WARNING:skdoc:- sklearn.feature_extraction.text.itemgetter.itemgetter / Sklearn.Feature_extraction.Text.Itemgetter.itemgetter
WARNING:skdoc:- sklearn.utils.itemgetter / Sklearn.Utils.Itemgetter
WARNING:skdoc:- sklearn.utils.itemgetter.itemgetter / Sklearn.Utils.Itemgetter.itemgetter
WARNING:skdoc:skdoc.py:0:type partial: was emitted under 4 names:
WARNING:skdoc:- sklearn.feature_extraction.text.partial / Sklearn.Feature_extraction.Text.Partial
WARNING:skdoc:- sklearn.feature_extraction.text.partial.partial / Sklearn.Feature_extraction.Text.Partial.create
WARNING:skdoc:- sklearn.metrics.pairwise.partial / Sklearn.Metrics.Pairwise.Partial
WARNING:skdoc:- sklearn.metrics.pairwise.partial.partial / Sklearn.Metrics.Pairwise.Partial.create
WARNING:skdoc:skdoc.py:0:function asformat: was emitted under 4 names:
WARNING:skdoc:- sklearn.metrics.pairwise.csr_matrix.asformat / Sklearn.Metrics.Pairwise.Csr_matrix.asformat
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.asformat / Sklearn.Utils.Multiclass.Dok_matrix.asformat
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.asformat / Sklearn.Utils.Multiclass.Lil_matrix.asformat
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.asformat / Sklearn.Utils.Multiclass.Spmatrix.asformat
WARNING:skdoc:skdoc.py:0:function asfptype: was emitted under 4 names:
WARNING:skdoc:- sklearn.metrics.pairwise.csr_matrix.asfptype / Sklearn.Metrics.Pairwise.Csr_matrix.asfptype
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.asfptype / Sklearn.Utils.Multiclass.Dok_matrix.asfptype
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.asfptype / Sklearn.Utils.Multiclass.Lil_matrix.asfptype
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.asfptype / Sklearn.Utils.Multiclass.Spmatrix.asfptype
WARNING:skdoc:skdoc.py:0:function conjugate: was emitted under 4 names:
WARNING:skdoc:- sklearn.metrics.pairwise.csr_matrix.conjugate / Sklearn.Metrics.Pairwise.Csr_matrix.conjugate
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.conjugate / Sklearn.Utils.Multiclass.Dok_matrix.conjugate
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.conjugate / Sklearn.Utils.Multiclass.Lil_matrix.conjugate
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.conjugate / Sklearn.Utils.Multiclass.Spmatrix.conjugate
WARNING:skdoc:skdoc.py:0:function dot: was emitted under 4 names:
WARNING:skdoc:- sklearn.metrics.pairwise.csr_matrix.dot / Sklearn.Metrics.Pairwise.Csr_matrix.dot
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.dot / Sklearn.Utils.Multiclass.Dok_matrix.dot
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.dot / Sklearn.Utils.Multiclass.Lil_matrix.dot
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.dot / Sklearn.Utils.Multiclass.Spmatrix.dot
WARNING:skdoc:skdoc.py:0:function getH: was emitted under 4 names:
WARNING:skdoc:- sklearn.metrics.pairwise.csr_matrix.getH / Sklearn.Metrics.Pairwise.Csr_matrix.getH
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.getH / Sklearn.Utils.Multiclass.Dok_matrix.getH
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.getH / Sklearn.Utils.Multiclass.Lil_matrix.getH
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.getH / Sklearn.Utils.Multiclass.Spmatrix.getH
WARNING:skdoc:skdoc.py:0:function get_shape: was emitted under 4 names:
WARNING:skdoc:- sklearn.metrics.pairwise.csr_matrix.get_shape / Sklearn.Metrics.Pairwise.Csr_matrix.get_shape
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.get_shape / Sklearn.Utils.Multiclass.Dok_matrix.get_shape
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.get_shape / Sklearn.Utils.Multiclass.Lil_matrix.get_shape
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.get_shape / Sklearn.Utils.Multiclass.Spmatrix.get_shape
WARNING:skdoc:skdoc.py:0:function getformat: was emitted under 4 names:
WARNING:skdoc:- sklearn.metrics.pairwise.csr_matrix.getformat / Sklearn.Metrics.Pairwise.Csr_matrix.getformat
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.getformat / Sklearn.Utils.Multiclass.Dok_matrix.getformat
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.getformat / Sklearn.Utils.Multiclass.Lil_matrix.getformat
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.getformat / Sklearn.Utils.Multiclass.Spmatrix.getformat
WARNING:skdoc:skdoc.py:0:function getmaxprint: was emitted under 4 names:
WARNING:skdoc:- sklearn.metrics.pairwise.csr_matrix.getmaxprint / Sklearn.Metrics.Pairwise.Csr_matrix.getmaxprint
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.getmaxprint / Sklearn.Utils.Multiclass.Dok_matrix.getmaxprint
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.getmaxprint / Sklearn.Utils.Multiclass.Lil_matrix.getmaxprint
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.getmaxprint / Sklearn.Utils.Multiclass.Spmatrix.getmaxprint
WARNING:skdoc:skdoc.py:0:function mean: was emitted under 4 names:
WARNING:skdoc:- sklearn.metrics.pairwise.csr_matrix.mean / Sklearn.Metrics.Pairwise.Csr_matrix.mean
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.mean / Sklearn.Utils.Multiclass.Dok_matrix.mean
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.mean / Sklearn.Utils.Multiclass.Lil_matrix.mean
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.mean / Sklearn.Utils.Multiclass.Spmatrix.mean
WARNING:skdoc:skdoc.py:0:function nonzero: was emitted under 4 names:
WARNING:skdoc:- sklearn.metrics.pairwise.csr_matrix.nonzero / Sklearn.Metrics.Pairwise.Csr_matrix.nonzero
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.nonzero / Sklearn.Utils.Multiclass.Dok_matrix.nonzero
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.nonzero / Sklearn.Utils.Multiclass.Lil_matrix.nonzero
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.nonzero / Sklearn.Utils.Multiclass.Spmatrix.nonzero
WARNING:skdoc:skdoc.py:0:function setdiag: was emitted under 4 names:
WARNING:skdoc:- sklearn.metrics.pairwise.csr_matrix.setdiag / Sklearn.Metrics.Pairwise.Csr_matrix.setdiag
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.setdiag / Sklearn.Utils.Multiclass.Dok_matrix.setdiag
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.setdiag / Sklearn.Utils.Multiclass.Lil_matrix.setdiag
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.setdiag / Sklearn.Utils.Multiclass.Spmatrix.setdiag
WARNING:skdoc:skdoc.py:0:function todense: was emitted under 4 names:
WARNING:skdoc:- sklearn.metrics.pairwise.csr_matrix.todense / Sklearn.Metrics.Pairwise.Csr_matrix.todense
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.todense / Sklearn.Utils.Multiclass.Dok_matrix.todense
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.todense / Sklearn.Utils.Multiclass.Lil_matrix.todense
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.todense / Sklearn.Utils.Multiclass.Spmatrix.todense
WARNING:skdoc:skdoc.py:0:function todia: was emitted under 4 names:
WARNING:skdoc:- sklearn.metrics.pairwise.csr_matrix.todia / Sklearn.Metrics.Pairwise.Csr_matrix.todia
WARNING:skdoc:- sklearn.utils.multiclass.dok_matrix.todia / Sklearn.Utils.Multiclass.Dok_matrix.todia
WARNING:skdoc:- sklearn.utils.multiclass.lil_matrix.todia / Sklearn.Utils.Multiclass.Lil_matrix.todia
WARNING:skdoc:- sklearn.utils.multiclass.spmatrix.todia / Sklearn.Utils.Multiclass.Spmatrix.todia
WARNING:skdoc:skdoc.py:0:function isspmatrix: was emitted under 4 names:
WARNING:skdoc:- sklearn.metrics.pairwise.issparse / Sklearn.Metrics.Pairwise.issparse
WARNING:skdoc:- sklearn.utils.issparse / Sklearn.Utils.issparse
WARNING:skdoc:- sklearn.utils.graph_shortest_path.isspmatrix / Sklearn.Utils.Graph_shortest_path.isspmatrix
WARNING:skdoc:- sklearn.utils.multiclass.issparse / Sklearn.Utils.Multiclass.issparse
WARNING:skdoc:skdoc.py:0:function if_delegate_has_method: was emitted under 4 names:
WARNING:skdoc:- sklearn.multiclass.if_delegate_has_method / Sklearn.Multiclass.if_delegate_has_method
WARNING:skdoc:- sklearn.multioutput.if_delegate_has_method / Sklearn.Multioutput.if_delegate_has_method
WARNING:skdoc:- sklearn.pipeline.if_delegate_has_method / Sklearn.Pipeline.if_delegate_has_method
WARNING:skdoc:- sklearn.utils.metaestimators.if_delegate_has_method / Sklearn.Utils.Metaestimators.if_delegate_has_method
WARNING:skdoc:skdoc.py:0:type Bunch: was emitted under 4 names:
WARNING:skdoc:- sklearn.pipeline.Bunch / Sklearn.Pipeline.Bunch
WARNING:skdoc:- sklearn.pipeline.Bunch.Bunch / Sklearn.Pipeline.Bunch.create
WARNING:skdoc:- sklearn.utils.Bunch / Sklearn.Utils.Bunch
WARNING:skdoc:- sklearn.utils.Bunch.Bunch / Sklearn.Utils.Bunch.create
WARNING:skdoc:skdoc.py:0:type islice: was emitted under 4 names:
WARNING:skdoc:- sklearn.pipeline.islice / Sklearn.Pipeline.Islice
WARNING:skdoc:- sklearn.pipeline.islice.islice / Sklearn.Pipeline.Islice.create
WARNING:skdoc:- sklearn.utils.islice / Sklearn.Utils.Islice
WARNING:skdoc:- sklearn.utils.islice.islice / Sklearn.Utils.Islice.create
WARNING:skdoc:skdoc.py:0:function check_consistent_length: was emitted under 5 names:
WARNING:skdoc:- sklearn.calibration.check_consistent_length / Sklearn.Calibration.check_consistent_length
WARNING:skdoc:- sklearn.dummy.check_consistent_length / Sklearn.Dummy.check_consistent_length
WARNING:skdoc:- sklearn.isotonic.check_consistent_length / Sklearn.Isotonic.check_consistent_length
WARNING:skdoc:- sklearn.utils.check_consistent_length / Sklearn.Utils.check_consistent_length
WARNING:skdoc:- sklearn.utils.validation.check_consistent_length / Sklearn.Utils.Validation.check_consistent_length
WARNING:skdoc:skdoc.py:0:bool False: was emitted under 5 names:
WARNING:skdoc:- sklearn.decomposition.NMF.shuffle / Sklearn.Decomposition.NMF.shuffle
WARNING:skdoc:- sklearn.model_selection.GroupKFold.shuffle / Sklearn.Model_selection.GroupKFold.shuffle
WARNING:skdoc:- sklearn.model_selection.KFold.shuffle / Sklearn.Model_selection.KFold.shuffle
WARNING:skdoc:- sklearn.model_selection.StratifiedKFold.shuffle / Sklearn.Model_selection.StratifiedKFold.shuffle
WARNING:skdoc:- sklearn.model_selection.TimeSeriesSplit.shuffle / Sklearn.Model_selection.TimeSeriesSplit.shuffle
WARNING:skdoc:skdoc.py:0:function delayed: was emitted under 5 names:
WARNING:skdoc:- sklearn.ensemble.partial_dependence.delayed / Sklearn.Ensemble.Partial_dependence.delayed
WARNING:skdoc:- sklearn.metrics.pairwise.delayed / Sklearn.Metrics.Pairwise.delayed
WARNING:skdoc:- sklearn.multiclass.delayed / Sklearn.Multiclass.delayed
WARNING:skdoc:- sklearn.multioutput.delayed / Sklearn.Multioutput.delayed
WARNING:skdoc:- sklearn.pipeline.delayed / Sklearn.Pipeline.delayed
WARNING:skdoc:skdoc.py:0:function abstractmethod: was emitted under 5 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.abstractmethod / Sklearn.Gaussian_process.Kernels.abstractmethod
WARNING:skdoc:- sklearn.multioutput.abstractmethod / Sklearn.Multioutput.abstractmethod
WARNING:skdoc:- sklearn.naive_bayes.abstractmethod / Sklearn.Naive_bayes.abstractmethod
WARNING:skdoc:- sklearn.random_projection.abstractmethod / Sklearn.Random_projection.abstractmethod
WARNING:skdoc:- sklearn.utils.metaestimators.abstractmethod / Sklearn.Utils.Metaestimators.abstractmethod
WARNING:skdoc:skdoc.py:0:function pairwise_kernels: was emitted under 5 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.pairwise_kernels / Sklearn.Gaussian_process.Kernels.pairwise_kernels
WARNING:skdoc:- sklearn.kernel_approximation.pairwise_kernels / Sklearn.Kernel_approximation.pairwise_kernels
WARNING:skdoc:- sklearn.kernel_ridge.pairwise_kernels / Sklearn.Kernel_ridge.pairwise_kernels
WARNING:skdoc:- sklearn.metrics.pairwise_kernels / Sklearn.Metrics.pairwise_kernels
WARNING:skdoc:- sklearn.metrics.pairwise.pairwise_kernels / Sklearn.Metrics.Pairwise.pairwise_kernels
WARNING:skdoc:skdoc.py:0:function safe_sparse_dot: was emitted under 5 names:
WARNING:skdoc:- sklearn.kernel_approximation.safe_sparse_dot / Sklearn.Kernel_approximation.safe_sparse_dot
WARNING:skdoc:- sklearn.metrics.pairwise.safe_sparse_dot / Sklearn.Metrics.Pairwise.safe_sparse_dot
WARNING:skdoc:- sklearn.naive_bayes.safe_sparse_dot / Sklearn.Naive_bayes.safe_sparse_dot
WARNING:skdoc:- sklearn.random_projection.safe_sparse_dot / Sklearn.Random_projection.safe_sparse_dot
WARNING:skdoc:- sklearn.utils.extmath.safe_sparse_dot / Sklearn.Utils.Extmath.safe_sparse_dot
WARNING:skdoc:skdoc.py:0:function clone: was emitted under 6 names:
WARNING:skdoc:- sklearn.base.clone / Sklearn.Base.clone
WARNING:skdoc:- sklearn.calibration.clone / Sklearn.Calibration.clone
WARNING:skdoc:- sklearn.gaussian_process.kernels.clone / Sklearn.Gaussian_process.Kernels.clone
WARNING:skdoc:- sklearn.multiclass.clone / Sklearn.Multiclass.clone
WARNING:skdoc:- sklearn.multioutput.clone / Sklearn.Multioutput.clone
WARNING:skdoc:- sklearn.pipeline.clone / Sklearn.Pipeline.clone
WARNING:skdoc:skdoc.py:0:type ABCMeta: was emitted under 6 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.ABCMeta / Sklearn.Gaussian_process.Kernels.ABCMeta
WARNING:skdoc:- sklearn.gaussian_process.kernels.ABCMeta.ABCMeta / Sklearn.Gaussian_process.Kernels.ABCMeta.create
WARNING:skdoc:- sklearn.multioutput.ABCMeta / Sklearn.Multioutput.ABCMeta
WARNING:skdoc:- sklearn.multioutput.ABCMeta.ABCMeta / Sklearn.Multioutput.ABCMeta.create
WARNING:skdoc:- sklearn.naive_bayes.ABCMeta / Sklearn.Naive_bayes.ABCMeta
WARNING:skdoc:- sklearn.naive_bayes.ABCMeta.ABCMeta / Sklearn.Naive_bayes.ABCMeta.create
WARNING:skdoc:skdoc.py:0:function clone_with_theta: was emitted under 6 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta / Sklearn.Gaussian_process.Kernels.CompoundKernel.clone_with_theta
WARNING:skdoc:- sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta / Sklearn.Gaussian_process.Kernels.Exponentiation.clone_with_theta
WARNING:skdoc:- sklearn.gaussian_process.kernels.Kernel.clone_with_theta / Sklearn.Gaussian_process.Kernels.Kernel.clone_with_theta
WARNING:skdoc:- sklearn.gaussian_process.kernels.KernelOperator.clone_with_theta / Sklearn.Gaussian_process.Kernels.KernelOperator.clone_with_theta
WARNING:skdoc:- sklearn.gaussian_process.kernels.Product.clone_with_theta / Sklearn.Gaussian_process.Kernels.Product.clone_with_theta
WARNING:skdoc:- sklearn.gaussian_process.kernels.Sum.clone_with_theta / Sklearn.Gaussian_process.Kernels.Sum.clone_with_theta
WARNING:skdoc:skdoc.py:0:function set_params: was emitted under 6 names:
WARNING:skdoc:- sklearn.gaussian_process.kernels.CompoundKernel.set_params / Sklearn.Gaussian_process.Kernels.CompoundKernel.set_params
WARNING:skdoc:- sklearn.gaussian_process.kernels.Exponentiation.set_params / Sklearn.Gaussian_process.Kernels.Exponentiation.set_params
WARNING:skdoc:- sklearn.gaussian_process.kernels.Kernel.set_params / Sklearn.Gaussian_process.Kernels.Kernel.set_params
WARNING:skdoc:- sklearn.gaussian_process.kernels.KernelOperator.set_params / Sklearn.Gaussian_process.Kernels.KernelOperator.set_params
WARNING:skdoc:- sklearn.gaussian_process.kernels.Product.set_params / Sklearn.Gaussian_process.Kernels.Product.set_params
WARNING:skdoc:- sklearn.gaussian_process.kernels.Sum.set_params / Sklearn.Gaussian_process.Kernels.Sum.set_params
WARNING:skdoc:skdoc.py:0:function f_classif: was emitted under 7 names:
WARNING:skdoc:- sklearn.feature_selection.GenericUnivariateSelect.score_func / Sklearn.Feature_selection.GenericUnivariateSelect.score_func
WARNING:skdoc:- sklearn.feature_selection.SelectFdr.score_func / Sklearn.Feature_selection.SelectFdr.score_func
WARNING:skdoc:- sklearn.feature_selection.SelectFpr.score_func / Sklearn.Feature_selection.SelectFpr.score_func
WARNING:skdoc:- sklearn.feature_selection.SelectFwe.score_func / Sklearn.Feature_selection.SelectFwe.score_func
WARNING:skdoc:- sklearn.feature_selection.SelectKBest.score_func / Sklearn.Feature_selection.SelectKBest.score_func
WARNING:skdoc:- sklearn.feature_selection.SelectPercentile.score_func / Sklearn.Feature_selection.SelectPercentile.score_func
WARNING:skdoc:- sklearn.feature_selection.f_classif / Sklearn.Feature_selection.f_classif
WARNING:skdoc:skdoc.py:0:function enet_path: was emitted under 7 names:
WARNING:skdoc:- sklearn.linear_model.ElasticNet.path / Sklearn.Linear_model.ElasticNet.path
WARNING:skdoc:- sklearn.linear_model.ElasticNetCV.path / Sklearn.Linear_model.ElasticNetCV.path
WARNING:skdoc:- sklearn.linear_model.Lasso.path / Sklearn.Linear_model.Lasso.path
WARNING:skdoc:- sklearn.linear_model.MultiTaskElasticNet.path / Sklearn.Linear_model.MultiTaskElasticNet.path
WARNING:skdoc:- sklearn.linear_model.MultiTaskElasticNetCV.path / Sklearn.Linear_model.MultiTaskElasticNetCV.path
WARNING:skdoc:- sklearn.linear_model.MultiTaskLasso.path / Sklearn.Linear_model.MultiTaskLasso.path
WARNING:skdoc:- sklearn.linear_model.enet_path / Sklearn.Linear_model.enet_path
WARNING:skdoc:skdoc.py:0:function check_X_y: was emitted under 8 names:
WARNING:skdoc:- sklearn.calibration.check_X_y / Sklearn.Calibration.check_X_y
WARNING:skdoc:- sklearn.discriminant_analysis.check_X_y / Sklearn.Discriminant_analysis.check_X_y
WARNING:skdoc:- sklearn.kernel_ridge.check_X_y / Sklearn.Kernel_ridge.check_X_y
WARNING:skdoc:- sklearn.multiclass.check_X_y / Sklearn.Multiclass.check_X_y
WARNING:skdoc:- sklearn.multioutput.check_X_y / Sklearn.Multioutput.check_X_y
WARNING:skdoc:- sklearn.naive_bayes.check_X_y / Sklearn.Naive_bayes.check_X_y
WARNING:skdoc:- sklearn.utils.check_X_y / Sklearn.Utils.check_X_y
WARNING:skdoc:- sklearn.utils.validation.check_X_y / Sklearn.Utils.Validation.check_X_y
WARNING:skdoc:skdoc.py:0:function score: was emitted under 8 names:
WARNING:skdoc:- sklearn.ensemble.StackingClassifier.score / Sklearn.Ensemble.StackingClassifier.score
WARNING:skdoc:- sklearn.ensemble.VotingClassifier.score / Sklearn.Ensemble.VotingClassifier.score
WARNING:skdoc:- sklearn.multiclass.OneVsOneClassifier.score / Sklearn.Multiclass.OneVsOneClassifier.score
WARNING:skdoc:- sklearn.multiclass.OneVsRestClassifier.score / Sklearn.Multiclass.OneVsRestClassifier.score
WARNING:skdoc:- sklearn.multiclass.OutputCodeClassifier.score / Sklearn.Multiclass.OutputCodeClassifier.score
WARNING:skdoc:- sklearn.multioutput.ClassifierChain.score / Sklearn.Multioutput.ClassifierChain.score
WARNING:skdoc:- sklearn.naive_bayes.BaseDiscreteNB.score / Sklearn.Naive_bayes.BaseDiscreteNB.score
WARNING:skdoc:- sklearn.naive_bayes.BaseNB.score / Sklearn.Naive_bayes.BaseNB.score
WARNING:skdoc:skdoc.py:0:type Parallel: was emitted under 8 names:
WARNING:skdoc:- sklearn.ensemble.partial_dependence.Parallel / Sklearn.Ensemble.Partial_dependence.Parallel
WARNING:skdoc:- sklearn.ensemble.partial_dependence.Parallel.Parallel / Sklearn.Ensemble.Partial_dependence.Parallel.create
WARNING:skdoc:- sklearn.metrics.pairwise.Parallel / Sklearn.Metrics.Pairwise.Parallel
WARNING:skdoc:- sklearn.metrics.pairwise.Parallel.Parallel / Sklearn.Metrics.Pairwise.Parallel.create
WARNING:skdoc:- sklearn.multiclass.Parallel / Sklearn.Multiclass.Parallel
WARNING:skdoc:- sklearn.multiclass.Parallel.Parallel / Sklearn.Multiclass.Parallel.create
WARNING:skdoc:- sklearn.pipeline.Parallel / Sklearn.Pipeline.Parallel
WARNING:skdoc:- sklearn.pipeline.Parallel.Parallel / Sklearn.Pipeline.Parallel.create
WARNING:skdoc:skdoc.py:0:bool True: was emitted under 9 names:
WARNING:skdoc:- sklearn.decomposition.MiniBatchDictionaryLearning.shuffle / Sklearn.Decomposition.MiniBatchDictionaryLearning.shuffle
WARNING:skdoc:- sklearn.decomposition.MiniBatchSparsePCA.shuffle / Sklearn.Decomposition.MiniBatchSparsePCA.shuffle
WARNING:skdoc:- sklearn.linear_model.PassiveAggressiveClassifier.shuffle / Sklearn.Linear_model.PassiveAggressiveClassifier.shuffle
WARNING:skdoc:- sklearn.linear_model.PassiveAggressiveRegressor.shuffle / Sklearn.Linear_model.PassiveAggressiveRegressor.shuffle
WARNING:skdoc:- sklearn.linear_model.Perceptron.shuffle / Sklearn.Linear_model.Perceptron.shuffle
WARNING:skdoc:- sklearn.linear_model.SGDClassifier.shuffle / Sklearn.Linear_model.SGDClassifier.shuffle
WARNING:skdoc:- sklearn.linear_model.SGDRegressor.shuffle / Sklearn.Linear_model.SGDRegressor.shuffle
WARNING:skdoc:- sklearn.neural_network.MLPClassifier.shuffle / Sklearn.Neural_network.MLPClassifier.shuffle
WARNING:skdoc:- sklearn.neural_network.MLPRegressor.shuffle / Sklearn.Neural_network.MLPRegressor.shuffle
WARNING:skdoc:skdoc.py:0:function fit_transform: was emitted under 9 names:
WARNING:skdoc:- sklearn.decomposition.SparseCoder.fit_transform / Sklearn.Decomposition.SparseCoder.fit_transform
WARNING:skdoc:- sklearn.ensemble.StackingClassifier.fit_transform / Sklearn.Ensemble.StackingClassifier.fit_transform
WARNING:skdoc:- sklearn.ensemble.StackingRegressor.fit_transform / Sklearn.Ensemble.StackingRegressor.fit_transform
WARNING:skdoc:- sklearn.ensemble.VotingClassifier.fit_transform / Sklearn.Ensemble.VotingClassifier.fit_transform
WARNING:skdoc:- sklearn.ensemble.VotingRegressor.fit_transform / Sklearn.Ensemble.VotingRegressor.fit_transform
WARNING:skdoc:- sklearn.feature_selection.RFE.fit_transform / Sklearn.Feature_selection.RFE.fit_transform
WARNING:skdoc:- sklearn.feature_selection.RFECV.fit_transform / Sklearn.Feature_selection.RFECV.fit_transform
WARNING:skdoc:- sklearn.feature_selection.SelectFromModel.fit_transform / Sklearn.Feature_selection.SelectFromModel.fit_transform
WARNING:skdoc:- sklearn.random_projection.BaseRandomProjection.fit_transform / Sklearn.Random_projection.BaseRandomProjection.fit_transform
WARNING:skdoc:skdoc.py:0:function check_random_state: was emitted under 10 names:
WARNING:skdoc:- sklearn.dummy.check_random_state / Sklearn.Dummy.check_random_state
WARNING:skdoc:- sklearn.feature_extraction.image.check_random_state / Sklearn.Feature_extraction.Image.check_random_state
WARNING:skdoc:- sklearn.kernel_approximation.check_random_state / Sklearn.Kernel_approximation.check_random_state
WARNING:skdoc:- sklearn.multiclass.check_random_state / Sklearn.Multiclass.check_random_state
WARNING:skdoc:- sklearn.multioutput.check_random_state / Sklearn.Multioutput.check_random_state
WARNING:skdoc:- sklearn.random_projection.check_random_state / Sklearn.Random_projection.check_random_state
WARNING:skdoc:- sklearn.utils.check_random_state / Sklearn.Utils.check_random_state
WARNING:skdoc:- sklearn.utils.extmath.check_random_state / Sklearn.Utils.Extmath.check_random_state
WARNING:skdoc:- sklearn.utils.random.check_random_state / Sklearn.Utils.Random.check_random_state
WARNING:skdoc:- sklearn.utils.validation.check_random_state / Sklearn.Utils.Validation.check_random_state
WARNING:skdoc:skdoc.py:0:function check_is_fitted: was emitted under 12 names:
WARNING:skdoc:- sklearn.calibration.check_is_fitted / Sklearn.Calibration.check_is_fitted
WARNING:skdoc:- sklearn.discriminant_analysis.check_is_fitted / Sklearn.Discriminant_analysis.check_is_fitted
WARNING:skdoc:- sklearn.dummy.check_is_fitted / Sklearn.Dummy.check_is_fitted
WARNING:skdoc:- sklearn.ensemble.partial_dependence.check_is_fitted / Sklearn.Ensemble.Partial_dependence.check_is_fitted
WARNING:skdoc:- sklearn.feature_extraction.text.check_is_fitted / Sklearn.Feature_extraction.Text.check_is_fitted
WARNING:skdoc:- sklearn.kernel_approximation.check_is_fitted / Sklearn.Kernel_approximation.check_is_fitted
WARNING:skdoc:- sklearn.kernel_ridge.check_is_fitted / Sklearn.Kernel_ridge.check_is_fitted
WARNING:skdoc:- sklearn.multiclass.check_is_fitted / Sklearn.Multiclass.check_is_fitted
WARNING:skdoc:- sklearn.multioutput.check_is_fitted / Sklearn.Multioutput.check_is_fitted
WARNING:skdoc:- sklearn.naive_bayes.check_is_fitted / Sklearn.Naive_bayes.check_is_fitted
WARNING:skdoc:- sklearn.random_projection.check_is_fitted / Sklearn.Random_projection.check_is_fitted
WARNING:skdoc:- sklearn.utils.validation.check_is_fitted / Sklearn.Utils.Validation.check_is_fitted
WARNING:skdoc:skdoc.py:0:function check_array: was emitted under 18 names:
WARNING:skdoc:- sklearn.calibration.check_array / Sklearn.Calibration.check_array
WARNING:skdoc:- sklearn.discriminant_analysis.check_array / Sklearn.Discriminant_analysis.check_array
WARNING:skdoc:- sklearn.dummy.check_array / Sklearn.Dummy.check_array
WARNING:skdoc:- sklearn.ensemble.partial_dependence.check_array / Sklearn.Ensemble.Partial_dependence.check_array
WARNING:skdoc:- sklearn.feature_extraction.image.check_array / Sklearn.Feature_extraction.Image.check_array
WARNING:skdoc:- sklearn.feature_extraction.text.check_array / Sklearn.Feature_extraction.Text.check_array
WARNING:skdoc:- sklearn.isotonic.check_array / Sklearn.Isotonic.check_array
WARNING:skdoc:- sklearn.kernel_approximation.check_array / Sklearn.Kernel_approximation.check_array
WARNING:skdoc:- sklearn.kernel_ridge.check_array / Sklearn.Kernel_ridge.check_array
WARNING:skdoc:- sklearn.metrics.pairwise.check_array / Sklearn.Metrics.Pairwise.check_array
WARNING:skdoc:- sklearn.multiclass.check_array / Sklearn.Multiclass.check_array
WARNING:skdoc:- sklearn.multioutput.check_array / Sklearn.Multioutput.check_array
WARNING:skdoc:- sklearn.naive_bayes.check_array / Sklearn.Naive_bayes.check_array
WARNING:skdoc:- sklearn.random_projection.check_array / Sklearn.Random_projection.check_array
WARNING:skdoc:- sklearn.utils.check_array / Sklearn.Utils.check_array
WARNING:skdoc:- sklearn.utils.extmath.check_array / Sklearn.Utils.Extmath.check_array
WARNING:skdoc:- sklearn.utils.multiclass.check_array / Sklearn.Utils.Multiclass.check_array
WARNING:skdoc:- sklearn.utils.validation.check_array / Sklearn.Utils.Validation.check_array
WARNING:skdoc:skdoc.py:0:function get_params: was emitted under 20 names:
WARNING:skdoc:- sklearn.decomposition.SparseCoder.get_params / Sklearn.Decomposition.SparseCoder.get_params
WARNING:skdoc:- sklearn.ensemble.BaseEnsemble.get_params / Sklearn.Ensemble.BaseEnsemble.get_params
WARNING:skdoc:- sklearn.ensemble.partial_dependence.BaseGradientBoosting.get_params / Sklearn.Ensemble.Partial_dependence.BaseGradientBoosting.get_params
WARNING:skdoc:- sklearn.feature_selection.RFE.get_params / Sklearn.Feature_selection.RFE.get_params
WARNING:skdoc:- sklearn.feature_selection.RFECV.get_params / Sklearn.Feature_selection.RFECV.get_params
WARNING:skdoc:- sklearn.feature_selection.SelectFromModel.get_params / Sklearn.Feature_selection.SelectFromModel.get_params
WARNING:skdoc:- sklearn.model_selection.GridSearchCV.get_params / Sklearn.Model_selection.GridSearchCV.get_params
WARNING:skdoc:- sklearn.model_selection.RandomizedSearchCV.get_params / Sklearn.Model_selection.RandomizedSearchCV.get_params
WARNING:skdoc:- sklearn.multiclass.OneVsOneClassifier.get_params / Sklearn.Multiclass.OneVsOneClassifier.get_params
WARNING:skdoc:- sklearn.multiclass.OneVsRestClassifier.get_params / Sklearn.Multiclass.OneVsRestClassifier.get_params
WARNING:skdoc:- sklearn.multiclass.OutputCodeClassifier.get_params / Sklearn.Multiclass.OutputCodeClassifier.get_params
WARNING:skdoc:- sklearn.multioutput.ClassifierChain.get_params / Sklearn.Multioutput.ClassifierChain.get_params
WARNING:skdoc:- sklearn.multioutput.MultiOutputClassifier.get_params / Sklearn.Multioutput.MultiOutputClassifier.get_params
WARNING:skdoc:- sklearn.multioutput.MultiOutputEstimator.get_params / Sklearn.Multioutput.MultiOutputEstimator.get_params
WARNING:skdoc:- sklearn.multioutput.MultiOutputRegressor.get_params / Sklearn.Multioutput.MultiOutputRegressor.get_params
WARNING:skdoc:- sklearn.multioutput.RegressorChain.get_params / Sklearn.Multioutput.RegressorChain.get_params
WARNING:skdoc:- sklearn.naive_bayes.BaseDiscreteNB.get_params / Sklearn.Naive_bayes.BaseDiscreteNB.get_params
WARNING:skdoc:- sklearn.naive_bayes.BaseNB.get_params / Sklearn.Naive_bayes.BaseNB.get_params
WARNING:skdoc:- sklearn.random_projection.BaseRandomProjection.get_params / Sklearn.Random_projection.BaseRandomProjection.get_params
WARNING:skdoc:- sklearn.tree.BaseDecisionTree.get_params / Sklearn.Tree.BaseDecisionTree.get_params
WARNING:skdoc:skdoc.py:0:function set_params: was emitted under 20 names:
WARNING:skdoc:- sklearn.decomposition.SparseCoder.set_params / Sklearn.Decomposition.SparseCoder.set_params
WARNING:skdoc:- sklearn.ensemble.BaseEnsemble.set_params / Sklearn.Ensemble.BaseEnsemble.set_params
WARNING:skdoc:- sklearn.ensemble.partial_dependence.BaseGradientBoosting.set_params / Sklearn.Ensemble.Partial_dependence.BaseGradientBoosting.set_params
WARNING:skdoc:- sklearn.feature_selection.RFE.set_params / Sklearn.Feature_selection.RFE.set_params
WARNING:skdoc:- sklearn.feature_selection.RFECV.set_params / Sklearn.Feature_selection.RFECV.set_params
WARNING:skdoc:- sklearn.feature_selection.SelectFromModel.set_params / Sklearn.Feature_selection.SelectFromModel.set_params
WARNING:skdoc:- sklearn.model_selection.GridSearchCV.set_params / Sklearn.Model_selection.GridSearchCV.set_params
WARNING:skdoc:- sklearn.model_selection.RandomizedSearchCV.set_params / Sklearn.Model_selection.RandomizedSearchCV.set_params
WARNING:skdoc:- sklearn.multiclass.OneVsOneClassifier.set_params / Sklearn.Multiclass.OneVsOneClassifier.set_params
WARNING:skdoc:- sklearn.multiclass.OneVsRestClassifier.set_params / Sklearn.Multiclass.OneVsRestClassifier.set_params
WARNING:skdoc:- sklearn.multiclass.OutputCodeClassifier.set_params / Sklearn.Multiclass.OutputCodeClassifier.set_params
WARNING:skdoc:- sklearn.multioutput.ClassifierChain.set_params / Sklearn.Multioutput.ClassifierChain.set_params
WARNING:skdoc:- sklearn.multioutput.MultiOutputClassifier.set_params / Sklearn.Multioutput.MultiOutputClassifier.set_params
WARNING:skdoc:- sklearn.multioutput.MultiOutputEstimator.set_params / Sklearn.Multioutput.MultiOutputEstimator.set_params
WARNING:skdoc:- sklearn.multioutput.MultiOutputRegressor.set_params / Sklearn.Multioutput.MultiOutputRegressor.set_params
WARNING:skdoc:- sklearn.multioutput.RegressorChain.set_params / Sklearn.Multioutput.RegressorChain.set_params
WARNING:skdoc:- sklearn.naive_bayes.BaseDiscreteNB.set_params / Sklearn.Naive_bayes.BaseDiscreteNB.set_params
WARNING:skdoc:- sklearn.naive_bayes.BaseNB.set_params / Sklearn.Naive_bayes.BaseNB.set_params
WARNING:skdoc:- sklearn.random_projection.BaseRandomProjection.set_params / Sklearn.Random_projection.BaseRandomProjection.set_params
WARNING:skdoc:- sklearn.tree.BaseDecisionTree.set_params / Sklearn.Tree.BaseDecisionTree.set_params
INFO:skdoc:generated source files:
