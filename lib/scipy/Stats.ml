let () = Wrap_utils.init ();;
let __wrap_namespace = Py.import "scipy.stats"

let get_py name = Py.Module.get __wrap_namespace name
module PearsonRConstantInputWarning = struct
type tag = [`PearsonRConstantInputWarning]
type t = [`BaseException | `Object | `PearsonRConstantInputWarning] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_exception x = (x :> [`BaseException] Obj.t)
let create ?msg () =
   Py.Module.get_function_with_keywords __wrap_namespace "PearsonRConstantInputWarning"
     [||]
     (Wrap_utils.keyword_args [("msg", msg)])
     |> of_pyobject
let with_traceback ~tb self =
   Py.Module.get_function_with_keywords (to_pyobject self) "with_traceback"
     [||]
     (Wrap_utils.keyword_args [("tb", Some(tb ))])

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module PearsonRNearConstantInputWarning = struct
type tag = [`PearsonRNearConstantInputWarning]
type t = [`BaseException | `Object | `PearsonRNearConstantInputWarning] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_exception x = (x :> [`BaseException] Obj.t)
let create ?msg () =
   Py.Module.get_function_with_keywords __wrap_namespace "PearsonRNearConstantInputWarning"
     [||]
     (Wrap_utils.keyword_args [("msg", msg)])
     |> of_pyobject
let with_traceback ~tb self =
   Py.Module.get_function_with_keywords (to_pyobject self) "with_traceback"
     [||]
     (Wrap_utils.keyword_args [("tb", Some(tb ))])

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Gaussian_kde = struct
type tag = [`Gaussian_kde]
type t = [`Gaussian_kde | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
                  let create ?bw_method ?weights ~dataset () =
                     Py.Module.get_function_with_keywords __wrap_namespace "gaussian_kde"
                       [||]
                       (Wrap_utils.keyword_args [("bw_method", Wrap_utils.Option.map bw_method (function
| `S x -> Py.String.of_string x
| `F x -> Py.Float.of_float x
| `I x -> Py.Int.of_int x
| `Bool x -> Py.Bool.of_bool x
| `Callable x -> Wrap_utils.id x
)); ("weights", Wrap_utils.Option.map weights Np.Obj.to_pyobject); ("dataset", Some(dataset |> Np.Obj.to_pyobject))])
                       |> of_pyobject
let covariance_factor self =
   Py.Module.get_function_with_keywords (to_pyobject self) "covariance_factor"
     [||]
     []

let evaluate ~points self =
   Py.Module.get_function_with_keywords (to_pyobject self) "evaluate"
     [||]
     (Wrap_utils.keyword_args [("points", Some(points ))])

let integrate_box ?maxpts ~low_bounds ~high_bounds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "integrate_box"
     [||]
     (Wrap_utils.keyword_args [("maxpts", Wrap_utils.Option.map maxpts Py.Int.of_int); ("low_bounds", Some(low_bounds |> Np.Obj.to_pyobject)); ("high_bounds", Some(high_bounds |> Np.Obj.to_pyobject))])

                  let integrate_box_1d ~low ~high self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "integrate_box_1d"
                       [||]
                       (Wrap_utils.keyword_args [("low", Some(low |> (function
| `F x -> Py.Float.of_float x
| `I x -> Py.Int.of_int x
| `Bool x -> Py.Bool.of_bool x
| `S x -> Py.String.of_string x
))); ("high", Some(high |> (function
| `F x -> Py.Float.of_float x
| `I x -> Py.Int.of_int x
| `Bool x -> Py.Bool.of_bool x
| `S x -> Py.String.of_string x
)))])

let integrate_gaussian ~mean ~cov self =
   Py.Module.get_function_with_keywords (to_pyobject self) "integrate_gaussian"
     [||]
     (Wrap_utils.keyword_args [("mean", Some(mean )); ("cov", Some(cov |> Np.Obj.to_pyobject))])

let integrate_kde ~other self =
   Py.Module.get_function_with_keywords (to_pyobject self) "integrate_kde"
     [||]
     (Wrap_utils.keyword_args [("other", Some(other ))])

let logpdf ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x ))])

let pdf ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x ))])

                  let resample ?size ?seed self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "resample"
                       [||]
                       (Wrap_utils.keyword_args [("size", Wrap_utils.Option.map size Py.Int.of_int); ("seed", Wrap_utils.Option.map seed (function
| `I x -> Py.Int.of_int x
| `T_np_random_RandomState_ x -> Wrap_utils.id x
))])

                  let set_bandwidth ?bw_method self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "set_bandwidth"
                       [||]
                       (Wrap_utils.keyword_args [("bw_method", Wrap_utils.Option.map bw_method (function
| `S x -> Py.String.of_string x
| `F x -> Py.Float.of_float x
| `I x -> Py.Int.of_int x
| `Bool x -> Py.Bool.of_bool x
| `Callable x -> Wrap_utils.id x
))])

let silverman_factor self =
   Py.Module.get_function_with_keywords (to_pyobject self) "silverman_factor"
     [||]
     []
     |> Py.Float.to_float

let dataset_opt self =
  match Py.Object.get_attr_string (to_pyobject self) "dataset" with
  | None -> failwith "attribute dataset not found"
  | Some x -> if Py.is_none x then None else Some ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) x)

let dataset self = match dataset_opt self with
  | None -> raise Not_found
  | Some x -> x

let d_opt self =
  match Py.Object.get_attr_string (to_pyobject self) "d" with
  | None -> failwith "attribute d not found"
  | Some x -> if Py.is_none x then None else Some (Py.Int.to_int x)

let d self = match d_opt self with
  | None -> raise Not_found
  | Some x -> x

let n_opt self =
  match Py.Object.get_attr_string (to_pyobject self) "n" with
  | None -> failwith "attribute n not found"
  | Some x -> if Py.is_none x then None else Some (Py.Int.to_int x)

let n self = match n_opt self with
  | None -> raise Not_found
  | Some x -> x

let neff_opt self =
  match Py.Object.get_attr_string (to_pyobject self) "neff" with
  | None -> failwith "attribute neff not found"
  | Some x -> if Py.is_none x then None else Some (Py.Int.to_int x)

let neff self = match neff_opt self with
  | None -> raise Not_found
  | Some x -> x

let factor_opt self =
  match Py.Object.get_attr_string (to_pyobject self) "factor" with
  | None -> failwith "attribute factor not found"
  | Some x -> if Py.is_none x then None else Some (Py.Float.to_float x)

let factor self = match factor_opt self with
  | None -> raise Not_found
  | Some x -> x

let covariance_opt self =
  match Py.Object.get_attr_string (to_pyobject self) "covariance" with
  | None -> failwith "attribute covariance not found"
  | Some x -> if Py.is_none x then None else Some ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) x)

let covariance self = match covariance_opt self with
  | None -> raise Not_found
  | Some x -> x

let inv_cov_opt self =
  match Py.Object.get_attr_string (to_pyobject self) "inv_cov" with
  | None -> failwith "attribute inv_cov not found"
  | Some x -> if Py.is_none x then None else Some ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) x)

let inv_cov self = match inv_cov_opt self with
  | None -> raise Not_found
  | Some x -> x
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Rv_continuous = struct
type tag = [`Rv_continuous]
type t = [`Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
                  let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
                     Py.Module.get_function_with_keywords __wrap_namespace "rv_continuous"
                       [||]
                       (Wrap_utils.keyword_args [("momtype", Wrap_utils.Option.map momtype Py.Int.of_int); ("a", Wrap_utils.Option.map a Py.Float.of_float); ("b", Wrap_utils.Option.map b Py.Float.of_float); ("xtol", Wrap_utils.Option.map xtol Py.Float.of_float); ("badvalue", Wrap_utils.Option.map badvalue Py.Float.of_float); ("name", Wrap_utils.Option.map name Py.String.of_string); ("longname", Wrap_utils.Option.map longname Py.String.of_string); ("shapes", Wrap_utils.Option.map shapes Py.String.of_string); ("extradoc", Wrap_utils.Option.map extradoc (function
| `Deprecated x -> Wrap_utils.id x
| `S x -> Py.String.of_string x
)); ("seed", Wrap_utils.Option.map seed (function
| `I x -> Py.Int.of_int x
| `T_numpy_random_RandomState_instance x -> Wrap_utils.id x
))])
                       |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Rv_discrete = struct
type tag = [`Rv_discrete]
type t = [`Object | `Rv_discrete | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
                  let create ?a ?b ?name ?badvalue ?moment_tol ?values ?inc ?longname ?shapes ?extradoc ?seed () =
                     Py.Module.get_function_with_keywords __wrap_namespace "rv_discrete"
                       [||]
                       (Wrap_utils.keyword_args [("a", Wrap_utils.Option.map a Py.Float.of_float); ("b", Wrap_utils.Option.map b Py.Float.of_float); ("name", Wrap_utils.Option.map name Py.String.of_string); ("badvalue", Wrap_utils.Option.map badvalue Py.Float.of_float); ("moment_tol", Wrap_utils.Option.map moment_tol Py.Float.of_float); ("values", values); ("inc", Wrap_utils.Option.map inc Py.Int.of_int); ("longname", Wrap_utils.Option.map longname Py.String.of_string); ("shapes", Wrap_utils.Option.map shapes Py.String.of_string); ("extradoc", Wrap_utils.Option.map extradoc Py.String.of_string); ("seed", Wrap_utils.Option.map seed (function
| `I x -> Py.Int.of_int x
| `T_numpy_random_RandomState_instance x -> Wrap_utils.id x
))])
                       |> of_pyobject
                  let cdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?lb ?ub ?conditional ?maxcount ?tolerance ?chunksize self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool); ("maxcount", Wrap_utils.Option.map maxcount Py.Int.of_int); ("tolerance", Wrap_utils.Option.map tolerance Py.Float.of_float); ("chunksize", Wrap_utils.Option.map chunksize Py.Int.of_int)])
     |> Py.Float.to_float
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let generic_moment ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "generic_moment"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let logcdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let pmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Rv_histogram = struct
type tag = [`Rv_histogram]
type t = [`Object | `Rv_continuous | `Rv_generic | `Rv_histogram] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?kwargs ~histogram args =
   Py.Module.get_function_with_keywords __wrap_namespace "rv_histogram"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("histogram", Some(histogram ))]) (match kwargs with None -> [] | Some x -> x))
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Contingency = struct
let () = Wrap_utils.init ();;
let __wrap_namespace = Py.import "scipy.stats.contingency"

let get_py name = Py.Module.get __wrap_namespace name
                  let chi2_contingency ?correction ?lambda_ ~observed () =
                     Py.Module.get_function_with_keywords __wrap_namespace "chi2_contingency"
                       [||]
                       (Wrap_utils.keyword_args [("correction", Wrap_utils.Option.map correction Py.Bool.of_bool); ("lambda_", Wrap_utils.Option.map lambda_ (function
| `S x -> Py.String.of_string x
| `F x -> Py.Float.of_float x
)); ("observed", Some(observed |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1)), (Py.Int.to_int (Py.Tuple.get x 2)), (Wrap_utils.id (Py.Tuple.get x 3))))
let expected_freq observed =
   Py.Module.get_function_with_keywords __wrap_namespace "expected_freq"
     [||]
     (Wrap_utils.keyword_args [("observed", Some(observed |> Np.Obj.to_pyobject))])

let margins a =
   Py.Module.get_function_with_keywords __wrap_namespace "margins"
     [||]
     (Wrap_utils.keyword_args [("a", Some(a |> Np.Obj.to_pyobject))])

                  let power_divergence ?f_exp ?ddof ?axis ?lambda_ ~f_obs () =
                     Py.Module.get_function_with_keywords __wrap_namespace "power_divergence"
                       [||]
                       (Wrap_utils.keyword_args [("f_exp", Wrap_utils.Option.map f_exp Np.Obj.to_pyobject); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("lambda_", Wrap_utils.Option.map lambda_ (function
| `S x -> Py.String.of_string x
| `F x -> Py.Float.of_float x
)); ("f_obs", Some(f_obs |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
let reduce ?initial ~function_ ~sequence () =
   Py.Module.get_function_with_keywords __wrap_namespace "reduce"
     [||]
     (Wrap_utils.keyword_args [("initial", initial); ("function", Some(function_ )); ("sequence", Some(sequence ))])


end
module Distributions = struct
let () = Wrap_utils.init ();;
let __wrap_namespace = Py.import "scipy.stats.distributions"

let get_py name = Py.Module.get __wrap_namespace name
module Alpha_gen = struct
type tag = [`Alpha_gen]
type t = [`Alpha_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "alpha_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Anglit_gen = struct
type tag = [`Anglit_gen]
type t = [`Anglit_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "anglit_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Arcsine_gen = struct
type tag = [`Arcsine_gen]
type t = [`Arcsine_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "arcsine_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Argus_gen = struct
type tag = [`Argus_gen]
type t = [`Argus_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "argus_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Bernoulli_gen = struct
type tag = [`Bernoulli_gen]
type t = [`Bernoulli_gen | `Object | `Rv_discrete | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_discrete x = (x :> [`Rv_discrete] Obj.t)
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let create ?a ?b ?name ?badvalue ?moment_tol ?values ?inc ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "bernoulli_gen"
     [||]
     (Wrap_utils.keyword_args [("a", a); ("b", b); ("name", name); ("badvalue", badvalue); ("moment_tol", moment_tol); ("values", values); ("inc", inc); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
                  let cdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?lb ?ub ?conditional ?maxcount ?tolerance ?chunksize self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool); ("maxcount", Wrap_utils.Option.map maxcount Py.Int.of_int); ("tolerance", Wrap_utils.Option.map tolerance Py.Float.of_float); ("chunksize", Wrap_utils.Option.map chunksize Py.Int.of_int)])
     |> Py.Float.to_float
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let generic_moment ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "generic_moment"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let logcdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let pmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Beta_gen = struct
type tag = [`Beta_gen]
type t = [`Beta_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "beta_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Betabinom_gen = struct
type tag = [`Betabinom_gen]
type t = [`Betabinom_gen | `Object | `Rv_discrete | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_discrete x = (x :> [`Rv_discrete] Obj.t)
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let create ?a ?b ?name ?badvalue ?moment_tol ?values ?inc ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "betabinom_gen"
     [||]
     (Wrap_utils.keyword_args [("a", a); ("b", b); ("name", name); ("badvalue", badvalue); ("moment_tol", moment_tol); ("values", values); ("inc", inc); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
                  let cdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?lb ?ub ?conditional ?maxcount ?tolerance ?chunksize self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool); ("maxcount", Wrap_utils.Option.map maxcount Py.Int.of_int); ("tolerance", Wrap_utils.Option.map tolerance Py.Float.of_float); ("chunksize", Wrap_utils.Option.map chunksize Py.Int.of_int)])
     |> Py.Float.to_float
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let generic_moment ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "generic_moment"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let logcdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let pmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Betaprime_gen = struct
type tag = [`Betaprime_gen]
type t = [`Betaprime_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "betaprime_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Binom_gen = struct
type tag = [`Binom_gen]
type t = [`Binom_gen | `Object | `Rv_discrete | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_discrete x = (x :> [`Rv_discrete] Obj.t)
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let create ?a ?b ?name ?badvalue ?moment_tol ?values ?inc ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "binom_gen"
     [||]
     (Wrap_utils.keyword_args [("a", a); ("b", b); ("name", name); ("badvalue", badvalue); ("moment_tol", moment_tol); ("values", values); ("inc", inc); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
                  let cdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?lb ?ub ?conditional ?maxcount ?tolerance ?chunksize self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool); ("maxcount", Wrap_utils.Option.map maxcount Py.Int.of_int); ("tolerance", Wrap_utils.Option.map tolerance Py.Float.of_float); ("chunksize", Wrap_utils.Option.map chunksize Py.Int.of_int)])
     |> Py.Float.to_float
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let generic_moment ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "generic_moment"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let logcdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let pmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Boltzmann_gen = struct
type tag = [`Boltzmann_gen]
type t = [`Boltzmann_gen | `Object | `Rv_discrete | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_discrete x = (x :> [`Rv_discrete] Obj.t)
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let create ?a ?b ?name ?badvalue ?moment_tol ?values ?inc ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "boltzmann_gen"
     [||]
     (Wrap_utils.keyword_args [("a", a); ("b", b); ("name", name); ("badvalue", badvalue); ("moment_tol", moment_tol); ("values", values); ("inc", inc); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
                  let cdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?lb ?ub ?conditional ?maxcount ?tolerance ?chunksize self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool); ("maxcount", Wrap_utils.Option.map maxcount Py.Int.of_int); ("tolerance", Wrap_utils.Option.map tolerance Py.Float.of_float); ("chunksize", Wrap_utils.Option.map chunksize Py.Int.of_int)])
     |> Py.Float.to_float
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let generic_moment ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "generic_moment"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let logcdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let pmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Bradford_gen = struct
type tag = [`Bradford_gen]
type t = [`Bradford_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "bradford_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Burr12_gen = struct
type tag = [`Burr12_gen]
type t = [`Burr12_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "burr12_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Burr_gen = struct
type tag = [`Burr_gen]
type t = [`Burr_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "burr_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Cauchy_gen = struct
type tag = [`Cauchy_gen]
type t = [`Cauchy_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "cauchy_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Chi2_gen = struct
type tag = [`Chi2_gen]
type t = [`Chi2_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "chi2_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Chi_gen = struct
type tag = [`Chi_gen]
type t = [`Chi_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "chi_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Cosine_gen = struct
type tag = [`Cosine_gen]
type t = [`Cosine_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "cosine_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Crystalball_gen = struct
type tag = [`Crystalball_gen]
type t = [`Crystalball_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "crystalball_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Dgamma_gen = struct
type tag = [`Dgamma_gen]
type t = [`Dgamma_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "dgamma_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Dlaplace_gen = struct
type tag = [`Dlaplace_gen]
type t = [`Dlaplace_gen | `Object | `Rv_discrete | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_discrete x = (x :> [`Rv_discrete] Obj.t)
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let create ?a ?b ?name ?badvalue ?moment_tol ?values ?inc ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "dlaplace_gen"
     [||]
     (Wrap_utils.keyword_args [("a", a); ("b", b); ("name", name); ("badvalue", badvalue); ("moment_tol", moment_tol); ("values", values); ("inc", inc); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
                  let cdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?lb ?ub ?conditional ?maxcount ?tolerance ?chunksize self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool); ("maxcount", Wrap_utils.Option.map maxcount Py.Int.of_int); ("tolerance", Wrap_utils.Option.map tolerance Py.Float.of_float); ("chunksize", Wrap_utils.Option.map chunksize Py.Int.of_int)])
     |> Py.Float.to_float
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let generic_moment ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "generic_moment"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let logcdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let pmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Dweibull_gen = struct
type tag = [`Dweibull_gen]
type t = [`Dweibull_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "dweibull_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Erlang_gen = struct
type tag = [`Erlang_gen]
type t = [`Erlang_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "erlang_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data ))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Expon_gen = struct
type tag = [`Expon_gen]
type t = [`Expon_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "expon_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Exponnorm_gen = struct
type tag = [`Exponnorm_gen]
type t = [`Exponnorm_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "exponnorm_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Exponpow_gen = struct
type tag = [`Exponpow_gen]
type t = [`Exponpow_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "exponpow_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Exponweib_gen = struct
type tag = [`Exponweib_gen]
type t = [`Exponweib_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "exponweib_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module F_gen = struct
type tag = [`F_gen]
type t = [`F_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "f_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Fatiguelife_gen = struct
type tag = [`Fatiguelife_gen]
type t = [`Fatiguelife_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "fatiguelife_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Fisk_gen = struct
type tag = [`Fisk_gen]
type t = [`Fisk_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "fisk_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Foldcauchy_gen = struct
type tag = [`Foldcauchy_gen]
type t = [`Foldcauchy_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "foldcauchy_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Foldnorm_gen = struct
type tag = [`Foldnorm_gen]
type t = [`Foldnorm_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "foldnorm_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Frechet_l_gen = struct
type tag = [`Frechet_l_gen]
type t = [`Frechet_l_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "frechet_l_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let fit ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let fit_loc_scale ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let isf ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let logcdf ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let logpdf ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let logsf ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let moment ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "moment"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let nnlf ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let pdf ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let ppf ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let sf ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Frechet_r_gen = struct
type tag = [`Frechet_r_gen]
type t = [`Frechet_r_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "frechet_r_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let fit ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let fit_loc_scale ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let isf ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let logcdf ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let logpdf ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let logsf ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let moment ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "moment"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let nnlf ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let pdf ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let ppf ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let sf ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Gamma_gen = struct
type tag = [`Gamma_gen]
type t = [`Gamma_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "gamma_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Gausshyper_gen = struct
type tag = [`Gausshyper_gen]
type t = [`Gausshyper_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "gausshyper_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Genexpon_gen = struct
type tag = [`Genexpon_gen]
type t = [`Genexpon_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "genexpon_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Genextreme_gen = struct
type tag = [`Genextreme_gen]
type t = [`Genextreme_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "genextreme_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Gengamma_gen = struct
type tag = [`Gengamma_gen]
type t = [`Gengamma_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "gengamma_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Genhalflogistic_gen = struct
type tag = [`Genhalflogistic_gen]
type t = [`Genhalflogistic_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "genhalflogistic_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Geninvgauss_gen = struct
type tag = [`Geninvgauss_gen]
type t = [`Geninvgauss_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "geninvgauss_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Genlogistic_gen = struct
type tag = [`Genlogistic_gen]
type t = [`Genlogistic_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "genlogistic_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Gennorm_gen = struct
type tag = [`Gennorm_gen]
type t = [`Gennorm_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "gennorm_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Genpareto_gen = struct
type tag = [`Genpareto_gen]
type t = [`Genpareto_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "genpareto_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Geom_gen = struct
type tag = [`Geom_gen]
type t = [`Geom_gen | `Object | `Rv_discrete | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_discrete x = (x :> [`Rv_discrete] Obj.t)
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let create ?a ?b ?name ?badvalue ?moment_tol ?values ?inc ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "geom_gen"
     [||]
     (Wrap_utils.keyword_args [("a", a); ("b", b); ("name", name); ("badvalue", badvalue); ("moment_tol", moment_tol); ("values", values); ("inc", inc); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
                  let cdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?lb ?ub ?conditional ?maxcount ?tolerance ?chunksize self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool); ("maxcount", Wrap_utils.Option.map maxcount Py.Int.of_int); ("tolerance", Wrap_utils.Option.map tolerance Py.Float.of_float); ("chunksize", Wrap_utils.Option.map chunksize Py.Int.of_int)])
     |> Py.Float.to_float
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let generic_moment ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "generic_moment"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let logcdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let pmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Gilbrat_gen = struct
type tag = [`Gilbrat_gen]
type t = [`Gilbrat_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "gilbrat_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Gompertz_gen = struct
type tag = [`Gompertz_gen]
type t = [`Gompertz_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "gompertz_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Gumbel_l_gen = struct
type tag = [`Gumbel_l_gen]
type t = [`Gumbel_l_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "gumbel_l_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Gumbel_r_gen = struct
type tag = [`Gumbel_r_gen]
type t = [`Gumbel_r_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "gumbel_r_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Halfcauchy_gen = struct
type tag = [`Halfcauchy_gen]
type t = [`Halfcauchy_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "halfcauchy_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Halfgennorm_gen = struct
type tag = [`Halfgennorm_gen]
type t = [`Halfgennorm_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "halfgennorm_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Halflogistic_gen = struct
type tag = [`Halflogistic_gen]
type t = [`Halflogistic_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "halflogistic_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Halfnorm_gen = struct
type tag = [`Halfnorm_gen]
type t = [`Halfnorm_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "halfnorm_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Hypergeom_gen = struct
type tag = [`Hypergeom_gen]
type t = [`Hypergeom_gen | `Object | `Rv_discrete | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_discrete x = (x :> [`Rv_discrete] Obj.t)
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let create ?a ?b ?name ?badvalue ?moment_tol ?values ?inc ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "hypergeom_gen"
     [||]
     (Wrap_utils.keyword_args [("a", a); ("b", b); ("name", name); ("badvalue", badvalue); ("moment_tol", moment_tol); ("values", values); ("inc", inc); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
                  let cdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?lb ?ub ?conditional ?maxcount ?tolerance ?chunksize self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool); ("maxcount", Wrap_utils.Option.map maxcount Py.Int.of_int); ("tolerance", Wrap_utils.Option.map tolerance Py.Float.of_float); ("chunksize", Wrap_utils.Option.map chunksize Py.Int.of_int)])
     |> Py.Float.to_float
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let generic_moment ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "generic_moment"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let logcdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let pmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Hypsecant_gen = struct
type tag = [`Hypsecant_gen]
type t = [`Hypsecant_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "hypsecant_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Invgamma_gen = struct
type tag = [`Invgamma_gen]
type t = [`Invgamma_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "invgamma_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Invgauss_gen = struct
type tag = [`Invgauss_gen]
type t = [`Invgauss_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "invgauss_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Invweibull_gen = struct
type tag = [`Invweibull_gen]
type t = [`Invweibull_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "invweibull_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Johnsonsb_gen = struct
type tag = [`Johnsonsb_gen]
type t = [`Johnsonsb_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "johnsonsb_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Johnsonsu_gen = struct
type tag = [`Johnsonsu_gen]
type t = [`Johnsonsu_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "johnsonsu_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Kappa3_gen = struct
type tag = [`Kappa3_gen]
type t = [`Kappa3_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "kappa3_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Kappa4_gen = struct
type tag = [`Kappa4_gen]
type t = [`Kappa4_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "kappa4_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Ksone_gen = struct
type tag = [`Ksone_gen]
type t = [`Ksone_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "ksone_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Kstwobign_gen = struct
type tag = [`Kstwobign_gen]
type t = [`Kstwobign_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "kstwobign_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Laplace_gen = struct
type tag = [`Laplace_gen]
type t = [`Laplace_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "laplace_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Levy_gen = struct
type tag = [`Levy_gen]
type t = [`Levy_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "levy_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Levy_l_gen = struct
type tag = [`Levy_l_gen]
type t = [`Levy_l_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "levy_l_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Levy_stable_gen = struct
type tag = [`Levy_stable_gen]
type t = [`Levy_stable_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "levy_stable_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Loggamma_gen = struct
type tag = [`Loggamma_gen]
type t = [`Loggamma_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "loggamma_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Logistic_gen = struct
type tag = [`Logistic_gen]
type t = [`Logistic_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "logistic_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Loglaplace_gen = struct
type tag = [`Loglaplace_gen]
type t = [`Loglaplace_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "loglaplace_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Lognorm_gen = struct
type tag = [`Lognorm_gen]
type t = [`Lognorm_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "lognorm_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Logser_gen = struct
type tag = [`Logser_gen]
type t = [`Logser_gen | `Object | `Rv_discrete | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_discrete x = (x :> [`Rv_discrete] Obj.t)
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let create ?a ?b ?name ?badvalue ?moment_tol ?values ?inc ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "logser_gen"
     [||]
     (Wrap_utils.keyword_args [("a", a); ("b", b); ("name", name); ("badvalue", badvalue); ("moment_tol", moment_tol); ("values", values); ("inc", inc); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
                  let cdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?lb ?ub ?conditional ?maxcount ?tolerance ?chunksize self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool); ("maxcount", Wrap_utils.Option.map maxcount Py.Int.of_int); ("tolerance", Wrap_utils.Option.map tolerance Py.Float.of_float); ("chunksize", Wrap_utils.Option.map chunksize Py.Int.of_int)])
     |> Py.Float.to_float
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let generic_moment ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "generic_moment"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let logcdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let pmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Lomax_gen = struct
type tag = [`Lomax_gen]
type t = [`Lomax_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "lomax_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Maxwell_gen = struct
type tag = [`Maxwell_gen]
type t = [`Maxwell_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "maxwell_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Mielke_gen = struct
type tag = [`Mielke_gen]
type t = [`Mielke_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "mielke_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Moyal_gen = struct
type tag = [`Moyal_gen]
type t = [`Moyal_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "moyal_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Nakagami_gen = struct
type tag = [`Nakagami_gen]
type t = [`Nakagami_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "nakagami_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Nbinom_gen = struct
type tag = [`Nbinom_gen]
type t = [`Nbinom_gen | `Object | `Rv_discrete | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_discrete x = (x :> [`Rv_discrete] Obj.t)
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let create ?a ?b ?name ?badvalue ?moment_tol ?values ?inc ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "nbinom_gen"
     [||]
     (Wrap_utils.keyword_args [("a", a); ("b", b); ("name", name); ("badvalue", badvalue); ("moment_tol", moment_tol); ("values", values); ("inc", inc); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
                  let cdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?lb ?ub ?conditional ?maxcount ?tolerance ?chunksize self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool); ("maxcount", Wrap_utils.Option.map maxcount Py.Int.of_int); ("tolerance", Wrap_utils.Option.map tolerance Py.Float.of_float); ("chunksize", Wrap_utils.Option.map chunksize Py.Int.of_int)])
     |> Py.Float.to_float
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let generic_moment ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "generic_moment"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let logcdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let pmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Ncf_gen = struct
type tag = [`Ncf_gen]
type t = [`Ncf_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "ncf_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Nct_gen = struct
type tag = [`Nct_gen]
type t = [`Nct_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "nct_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Ncx2_gen = struct
type tag = [`Ncx2_gen]
type t = [`Ncx2_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "ncx2_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Norm_gen = struct
type tag = [`Norm_gen]
type t = [`Norm_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "norm_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Norminvgauss_gen = struct
type tag = [`Norminvgauss_gen]
type t = [`Norminvgauss_gen | `Object | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "norminvgauss_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Pareto_gen = struct
type tag = [`Pareto_gen]
type t = [`Object | `Pareto_gen | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "pareto_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Pearson3_gen = struct
type tag = [`Pearson3_gen]
type t = [`Object | `Pearson3_gen | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "pearson3_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Planck_gen = struct
type tag = [`Planck_gen]
type t = [`Object | `Planck_gen | `Rv_discrete | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_discrete x = (x :> [`Rv_discrete] Obj.t)
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let create ?a ?b ?name ?badvalue ?moment_tol ?values ?inc ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "planck_gen"
     [||]
     (Wrap_utils.keyword_args [("a", a); ("b", b); ("name", name); ("badvalue", badvalue); ("moment_tol", moment_tol); ("values", values); ("inc", inc); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
                  let cdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?lb ?ub ?conditional ?maxcount ?tolerance ?chunksize self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool); ("maxcount", Wrap_utils.Option.map maxcount Py.Int.of_int); ("tolerance", Wrap_utils.Option.map tolerance Py.Float.of_float); ("chunksize", Wrap_utils.Option.map chunksize Py.Int.of_int)])
     |> Py.Float.to_float
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let generic_moment ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "generic_moment"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let logcdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let pmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Poisson_gen = struct
type tag = [`Poisson_gen]
type t = [`Object | `Poisson_gen | `Rv_discrete | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_discrete x = (x :> [`Rv_discrete] Obj.t)
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let create ?a ?b ?name ?badvalue ?moment_tol ?values ?inc ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "poisson_gen"
     [||]
     (Wrap_utils.keyword_args [("a", a); ("b", b); ("name", name); ("badvalue", badvalue); ("moment_tol", moment_tol); ("values", values); ("inc", inc); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
                  let cdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?lb ?ub ?conditional ?maxcount ?tolerance ?chunksize self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool); ("maxcount", Wrap_utils.Option.map maxcount Py.Int.of_int); ("tolerance", Wrap_utils.Option.map tolerance Py.Float.of_float); ("chunksize", Wrap_utils.Option.map chunksize Py.Int.of_int)])
     |> Py.Float.to_float
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let generic_moment ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "generic_moment"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let logcdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let pmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Powerlaw_gen = struct
type tag = [`Powerlaw_gen]
type t = [`Object | `Powerlaw_gen | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "powerlaw_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Powerlognorm_gen = struct
type tag = [`Powerlognorm_gen]
type t = [`Object | `Powerlognorm_gen | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "powerlognorm_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Powernorm_gen = struct
type tag = [`Powernorm_gen]
type t = [`Object | `Powernorm_gen | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "powernorm_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Randint_gen = struct
type tag = [`Randint_gen]
type t = [`Object | `Randint_gen | `Rv_discrete | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_discrete x = (x :> [`Rv_discrete] Obj.t)
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let create ?a ?b ?name ?badvalue ?moment_tol ?values ?inc ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "randint_gen"
     [||]
     (Wrap_utils.keyword_args [("a", a); ("b", b); ("name", name); ("badvalue", badvalue); ("moment_tol", moment_tol); ("values", values); ("inc", inc); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
                  let cdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?lb ?ub ?conditional ?maxcount ?tolerance ?chunksize self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool); ("maxcount", Wrap_utils.Option.map maxcount Py.Int.of_int); ("tolerance", Wrap_utils.Option.map tolerance Py.Float.of_float); ("chunksize", Wrap_utils.Option.map chunksize Py.Int.of_int)])
     |> Py.Float.to_float
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let generic_moment ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "generic_moment"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let logcdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let pmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Rayleigh_gen = struct
type tag = [`Rayleigh_gen]
type t = [`Object | `Rayleigh_gen | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "rayleigh_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Rdist_gen = struct
type tag = [`Rdist_gen]
type t = [`Object | `Rdist_gen | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "rdist_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Recipinvgauss_gen = struct
type tag = [`Recipinvgauss_gen]
type t = [`Object | `Recipinvgauss_gen | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "recipinvgauss_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Reciprocal_gen = struct
type tag = [`Reciprocal_gen]
type t = [`Object | `Reciprocal_gen | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "reciprocal_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Rice_gen = struct
type tag = [`Rice_gen]
type t = [`Object | `Rice_gen | `Rv_continuous | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "rice_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Rv_frozen = struct
type tag = [`Rv_frozen]
type t = [`Object | `Rv_frozen] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ?kwds ~dist args =
   Py.Module.get_function_with_keywords __wrap_namespace "rv_frozen"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("dist", Some(dist ))]) (match kwds with None -> [] | Some x -> x))
     |> of_pyobject
let cdf ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x ))])

let entropy self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     [||]
     []

let expect ?func ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("lb", lb); ("ub", ub); ("conditional", conditional)]) (match kwds with None -> [] | Some x -> x))

let interval ~alpha self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     [||]
     (Wrap_utils.keyword_args [("alpha", Some(alpha ))])

let isf ~q self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     [||]
     (Wrap_utils.keyword_args [("q", Some(q ))])

let logcdf ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x ))])

let logpdf ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x ))])

let logpmf ~k self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpmf"
     [||]
     (Wrap_utils.keyword_args [("k", Some(k ))])

let logsf ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x ))])

let mean self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     [||]
     []

let median self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     [||]
     []

let moment ~n self =
   Py.Module.get_function_with_keywords (to_pyobject self) "moment"
     [||]
     (Wrap_utils.keyword_args [("n", Some(n ))])

let pdf ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x ))])

let pmf ~k self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pmf"
     [||]
     (Wrap_utils.keyword_args [("k", Some(k ))])

let ppf ~q self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     [||]
     (Wrap_utils.keyword_args [("q", Some(q ))])

let rvs ?size ?random_state self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     [||]
     (Wrap_utils.keyword_args [("size", size); ("random_state", random_state)])

let sf ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x ))])

let stats ?moments self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     [||]
     (Wrap_utils.keyword_args [("moments", moments)])

let std self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     [||]
     []

let support self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     [||]
     []

let var self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     [||]
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Semicircular_gen = struct
type tag = [`Semicircular_gen]
type t = [`Object | `Rv_continuous | `Rv_generic | `Semicircular_gen] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "semicircular_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Skellam_gen = struct
type tag = [`Skellam_gen]
type t = [`Object | `Rv_discrete | `Rv_generic | `Skellam_gen] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_discrete x = (x :> [`Rv_discrete] Obj.t)
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let create ?a ?b ?name ?badvalue ?moment_tol ?values ?inc ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "skellam_gen"
     [||]
     (Wrap_utils.keyword_args [("a", a); ("b", b); ("name", name); ("badvalue", badvalue); ("moment_tol", moment_tol); ("values", values); ("inc", inc); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
                  let cdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?lb ?ub ?conditional ?maxcount ?tolerance ?chunksize self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool); ("maxcount", Wrap_utils.Option.map maxcount Py.Int.of_int); ("tolerance", Wrap_utils.Option.map tolerance Py.Float.of_float); ("chunksize", Wrap_utils.Option.map chunksize Py.Int.of_int)])
     |> Py.Float.to_float
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let generic_moment ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "generic_moment"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let logcdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let pmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Skew_norm_gen = struct
type tag = [`Skew_norm_gen]
type t = [`Object | `Rv_continuous | `Rv_generic | `Skew_norm_gen] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "skew_norm_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module T_gen = struct
type tag = [`T_gen]
type t = [`Object | `Rv_continuous | `Rv_generic | `T_gen] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "t_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Trapz_gen = struct
type tag = [`Trapz_gen]
type t = [`Object | `Rv_continuous | `Rv_generic | `Trapz_gen] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "trapz_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Triang_gen = struct
type tag = [`Triang_gen]
type t = [`Object | `Rv_continuous | `Rv_generic | `Triang_gen] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "triang_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Truncexpon_gen = struct
type tag = [`Truncexpon_gen]
type t = [`Object | `Rv_continuous | `Rv_generic | `Truncexpon_gen] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "truncexpon_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Truncnorm_gen = struct
type tag = [`Truncnorm_gen]
type t = [`Object | `Rv_continuous | `Rv_generic | `Truncnorm_gen] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "truncnorm_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Tukeylambda_gen = struct
type tag = [`Tukeylambda_gen]
type t = [`Object | `Rv_continuous | `Rv_generic | `Tukeylambda_gen] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "tukeylambda_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Uniform_gen = struct
type tag = [`Uniform_gen]
type t = [`Object | `Rv_continuous | `Rv_generic | `Uniform_gen] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "uniform_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Vonmises_gen = struct
type tag = [`Vonmises_gen]
type t = [`Object | `Rv_continuous | `Rv_generic | `Vonmises_gen] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "vonmises_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Wald_gen = struct
type tag = [`Wald_gen]
type t = [`Object | `Rv_continuous | `Rv_generic | `Wald_gen] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "wald_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Weibull_max_gen = struct
type tag = [`Weibull_max_gen]
type t = [`Object | `Rv_continuous | `Rv_generic | `Weibull_max_gen] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "weibull_max_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Weibull_min_gen = struct
type tag = [`Weibull_min_gen]
type t = [`Object | `Rv_continuous | `Rv_generic | `Weibull_min_gen] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "weibull_min_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Wrapcauchy_gen = struct
type tag = [`Wrapcauchy_gen]
type t = [`Object | `Rv_continuous | `Rv_generic | `Wrapcauchy_gen] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let as_rv_continuous x = (x :> [`Rv_continuous] Obj.t)
let create ?momtype ?a ?b ?xtol ?badvalue ?name ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "wrapcauchy_gen"
     [||]
     (Wrap_utils.keyword_args [("momtype", momtype); ("a", a); ("b", b); ("xtol", xtol); ("badvalue", badvalue); ("name", name); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
let cdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?scale ?lb ?ub ?conditional ?kwds self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool)]) (match kwds with None -> [] | Some x -> x))
     |> Py.Float.to_float
let fit ?kwds ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let fit_loc_scale ~data args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "fit_loc_scale"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logcdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let nnlf ~theta ~x self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nnlf"
     [||]
     (Wrap_utils.keyword_args [("theta", Some(theta )); ("x", Some(x ))])

let pdf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pdf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~x args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Yulesimon_gen = struct
type tag = [`Yulesimon_gen]
type t = [`Object | `Rv_discrete | `Rv_generic | `Yulesimon_gen] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_discrete x = (x :> [`Rv_discrete] Obj.t)
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let create ?a ?b ?name ?badvalue ?moment_tol ?values ?inc ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "yulesimon_gen"
     [||]
     (Wrap_utils.keyword_args [("a", a); ("b", b); ("name", name); ("badvalue", badvalue); ("moment_tol", moment_tol); ("values", values); ("inc", inc); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
                  let cdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?lb ?ub ?conditional ?maxcount ?tolerance ?chunksize self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool); ("maxcount", Wrap_utils.Option.map maxcount Py.Int.of_int); ("tolerance", Wrap_utils.Option.map tolerance Py.Float.of_float); ("chunksize", Wrap_utils.Option.map chunksize Py.Int.of_int)])
     |> Py.Float.to_float
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let generic_moment ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "generic_moment"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let logcdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let pmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Zipf_gen = struct
type tag = [`Zipf_gen]
type t = [`Object | `Rv_discrete | `Rv_generic | `Zipf_gen] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let as_rv_discrete x = (x :> [`Rv_discrete] Obj.t)
let as_rv_generic x = (x :> [`Rv_generic] Obj.t)
let create ?a ?b ?name ?badvalue ?moment_tol ?values ?inc ?longname ?shapes ?extradoc ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "zipf_gen"
     [||]
     (Wrap_utils.keyword_args [("a", a); ("b", b); ("name", name); ("badvalue", badvalue); ("moment_tol", moment_tol); ("values", values); ("inc", inc); ("longname", longname); ("shapes", shapes); ("extradoc", extradoc); ("seed", seed)])
     |> of_pyobject
                  let cdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "cdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let expect ?func ?args ?loc ?lb ?ub ?conditional ?maxcount ?tolerance ?chunksize self =
   Py.Module.get_function_with_keywords (to_pyobject self) "expect"
     [||]
     (Wrap_utils.keyword_args [("func", func); ("args", args); ("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("lb", lb); ("ub", ub); ("conditional", Wrap_utils.Option.map conditional Py.Bool.of_bool); ("maxcount", Wrap_utils.Option.map maxcount Py.Int.of_int); ("tolerance", Wrap_utils.Option.map tolerance Py.Float.of_float); ("chunksize", Wrap_utils.Option.map chunksize Py.Int.of_int)])
     |> Py.Float.to_float
let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let generic_moment ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "generic_moment"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let isf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "isf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let logcdf ?kwds ~k args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "logcdf"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logpmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logpmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "logsf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let pmf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "pmf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ppf ?kwds ~q args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ppf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("q", Some(q |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let rvs ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let sf ?kwds ~k args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sf"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("k", Some(k |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
let alpha ?loc ?scale ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "alpha"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Alpha_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let anglit ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "anglit"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Anglit_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let arcsine ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "arcsine"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Arcsine_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let argus ?loc ?scale ~chi () =
   Py.Module.get_function_with_keywords __wrap_namespace "argus"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("chi", Some(chi ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Argus_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let bernoulli ?loc ~p () =
   Py.Module.get_function_with_keywords __wrap_namespace "bernoulli"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("p", Some(p ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Bernoulli_gen|`Object|`Rv_discrete|`Rv_generic] Np.Obj.t))
let beta ?loc ?scale ~a ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "beta"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Beta_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let betabinom ?loc ~n ~a ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "betabinom"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("n", Some(n )); ("a", Some(a )); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Betabinom_gen|`Object|`Rv_discrete|`Rv_generic] Np.Obj.t))
let betaprime ?loc ?scale ~a ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "betaprime"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Betaprime_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let binom ?loc ~n ~p () =
   Py.Module.get_function_with_keywords __wrap_namespace "binom"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("n", Some(n )); ("p", Some(p ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Binom_gen|`Object|`Rv_discrete|`Rv_generic] Np.Obj.t))
let boltzmann ?loc ~lambda_ ~n () =
   Py.Module.get_function_with_keywords __wrap_namespace "boltzmann"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("lambda_", Some(lambda_ )); ("N", Some(n ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Boltzmann_gen|`Object|`Rv_discrete|`Rv_generic] Np.Obj.t))
let bradford ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "bradford"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Bradford_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let burr ?loc ?scale ~c ~d () =
   Py.Module.get_function_with_keywords __wrap_namespace "burr"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c )); ("d", Some(d ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Burr_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let burr12 ?loc ?scale ~c ~d () =
   Py.Module.get_function_with_keywords __wrap_namespace "burr12"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c )); ("d", Some(d ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Burr12_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let cauchy ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "cauchy"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Cauchy_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let chi ?loc ?scale ~df () =
   Py.Module.get_function_with_keywords __wrap_namespace "chi"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("df", Some(df ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Chi_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let chi2 ?loc ?scale ~df () =
   Py.Module.get_function_with_keywords __wrap_namespace "chi2"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("df", Some(df ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Chi2_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let cosine ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "cosine"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Cosine_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let crystalball ?loc ?scale ~beta ~m () =
   Py.Module.get_function_with_keywords __wrap_namespace "crystalball"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("beta", Some(beta )); ("m", Some(m ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Crystalball_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let dgamma ?loc ?scale ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "dgamma"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Dgamma_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let dlaplace ?loc ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "dlaplace"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("a", Some(a ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Dlaplace_gen|`Object|`Rv_discrete|`Rv_generic] Np.Obj.t))
let dweibull ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "dweibull"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Dweibull_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let entropy ?qk ?base ?axis ~pk () =
   Py.Module.get_function_with_keywords __wrap_namespace "entropy"
     [||]
     (Wrap_utils.keyword_args [("qk", qk); ("base", Wrap_utils.Option.map base Py.Float.of_float); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("pk", Some(pk ))])
     |> Py.Float.to_float
let erlang ?loc ?scale ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "erlang"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Erlang_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let expon ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "expon"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Expon_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let exponnorm ?loc ?scale ~k () =
   Py.Module.get_function_with_keywords __wrap_namespace "exponnorm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("K", Some(k ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Exponnorm_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let exponpow ?loc ?scale ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "exponpow"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Exponpow_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let exponweib ?loc ?scale ~a ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "exponweib"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Exponweib_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let f ?loc ?scale ~dfn ~dfd () =
   Py.Module.get_function_with_keywords __wrap_namespace "f"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("dfn", Some(dfn )); ("dfd", Some(dfd ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`F_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let fatiguelife ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "fatiguelife"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Fatiguelife_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let fisk ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "fisk"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Fisk_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let foldcauchy ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "foldcauchy"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Foldcauchy_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let foldnorm ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "foldnorm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Foldnorm_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let frechet_l ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "frechet_l"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Frechet_l_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let frechet_r ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "frechet_r"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Frechet_r_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let gamma ?loc ?scale ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "gamma"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Gamma_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let gausshyper ?loc ?scale ~a ~b ~c ~z () =
   Py.Module.get_function_with_keywords __wrap_namespace "gausshyper"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("b", Some(b )); ("c", Some(c )); ("z", Some(z ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Gausshyper_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let genexpon ?loc ?scale ~a ~b ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "genexpon"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("b", Some(b )); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Genexpon_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let genextreme ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "genextreme"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Genextreme_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let gengamma ?loc ?scale ~a ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "gengamma"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Gengamma_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let genhalflogistic ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "genhalflogistic"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Genhalflogistic_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let geninvgauss ?loc ?scale ~p ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "geninvgauss"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("p", Some(p )); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Geninvgauss_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let genlogistic ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "genlogistic"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Genlogistic_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let gennorm ?loc ?scale ~beta () =
   Py.Module.get_function_with_keywords __wrap_namespace "gennorm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("beta", Some(beta ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Gennorm_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let genpareto ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "genpareto"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Genpareto_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let geom ?loc ~p () =
   Py.Module.get_function_with_keywords __wrap_namespace "geom"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("p", Some(p ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Geom_gen|`Object|`Rv_discrete|`Rv_generic] Np.Obj.t))
let gilbrat ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "gilbrat"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Gilbrat_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let gompertz ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "gompertz"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Gompertz_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let gumbel_l ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "gumbel_l"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Gumbel_l_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let gumbel_r ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "gumbel_r"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Gumbel_r_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let halfcauchy ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "halfcauchy"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Halfcauchy_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let halfgennorm ?loc ?scale ~beta () =
   Py.Module.get_function_with_keywords __wrap_namespace "halfgennorm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("beta", Some(beta ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Halfgennorm_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let halflogistic ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "halflogistic"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Halflogistic_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let halfnorm ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "halfnorm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Halfnorm_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let hypergeom ?loc ~m ~n ~n' () =
   Py.Module.get_function_with_keywords __wrap_namespace "hypergeom"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("M", Some(m )); ("n", Some(n )); ("N", Some(n' ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Hypergeom_gen|`Object|`Rv_discrete|`Rv_generic] Np.Obj.t))
let hypsecant ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "hypsecant"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Hypsecant_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let invgamma ?loc ?scale ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "invgamma"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Invgamma_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let invgauss ?loc ?scale ~mu () =
   Py.Module.get_function_with_keywords __wrap_namespace "invgauss"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("mu", Some(mu ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Invgauss_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let invweibull ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "invweibull"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Invweibull_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let johnsonsb ?loc ?scale ~a ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "johnsonsb"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Johnsonsb_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let johnsonsu ?loc ?scale ~a ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "johnsonsu"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Johnsonsu_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let kappa3 ?loc ?scale ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "kappa3"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Kappa3_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let kappa4 ?loc ?scale ~h ~k () =
   Py.Module.get_function_with_keywords __wrap_namespace "kappa4"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("h", Some(h )); ("k", Some(k ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Kappa4_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let ksone ?loc ?scale ~n () =
   Py.Module.get_function_with_keywords __wrap_namespace "ksone"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("n", Some(n ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Ksone_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let kstwobign ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "kstwobign"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Kstwobign_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let laplace ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "laplace"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Laplace_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let levy ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "levy"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Levy_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let levy_l ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "levy_l"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Levy_l_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let levy_stable ?loc ?scale ~alpha ~beta () =
   Py.Module.get_function_with_keywords __wrap_namespace "levy_stable"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("alpha", Some(alpha )); ("beta", Some(beta ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Levy_stable_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let loggamma ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "loggamma"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Loggamma_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let logistic ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "logistic"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Logistic_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let loglaplace ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "loglaplace"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Loglaplace_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let lognorm ?loc ?scale ~s () =
   Py.Module.get_function_with_keywords __wrap_namespace "lognorm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("s", Some(s ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Lognorm_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let logser ?loc ~p () =
   Py.Module.get_function_with_keywords __wrap_namespace "logser"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("p", Some(p ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Logser_gen|`Object|`Rv_discrete|`Rv_generic] Np.Obj.t))
let loguniform ?loc ?scale ~a ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "loguniform"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("b", Some(b ))])

let lomax ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "lomax"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Lomax_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let maxwell ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "maxwell"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Maxwell_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let mielke ?loc ?scale ~k ~s () =
   Py.Module.get_function_with_keywords __wrap_namespace "mielke"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("k", Some(k )); ("s", Some(s ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Mielke_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let moyal ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "moyal"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Moyal_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let nakagami ?loc ?scale ~nu () =
   Py.Module.get_function_with_keywords __wrap_namespace "nakagami"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("nu", Some(nu ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Nakagami_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let nbinom ?loc ~n ~p () =
   Py.Module.get_function_with_keywords __wrap_namespace "nbinom"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("n", Some(n )); ("p", Some(p ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Nbinom_gen|`Object|`Rv_discrete|`Rv_generic] Np.Obj.t))
let ncf ?loc ?scale ~dfn ~dfd ~nc () =
   Py.Module.get_function_with_keywords __wrap_namespace "ncf"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("dfn", Some(dfn )); ("dfd", Some(dfd )); ("nc", Some(nc ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Ncf_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let nct ?loc ?scale ~df ~nc () =
   Py.Module.get_function_with_keywords __wrap_namespace "nct"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("df", Some(df )); ("nc", Some(nc ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Nct_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let ncx2 ?loc ?scale ~df ~nc () =
   Py.Module.get_function_with_keywords __wrap_namespace "ncx2"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("df", Some(df )); ("nc", Some(nc ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Ncx2_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let norm ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "norm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Norm_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let norminvgauss ?loc ?scale ~a ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "norminvgauss"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Norminvgauss_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let pareto ?loc ?scale ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "pareto"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Pareto_gen|`Rv_continuous|`Rv_generic] Np.Obj.t))
let pearson3 ?loc ?scale ~skew () =
   Py.Module.get_function_with_keywords __wrap_namespace "pearson3"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("skew", Some(skew ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Pearson3_gen|`Rv_continuous|`Rv_generic] Np.Obj.t))
let planck ?loc ~lambda_ () =
   Py.Module.get_function_with_keywords __wrap_namespace "planck"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("lambda_", Some(lambda_ ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Planck_gen|`Rv_discrete|`Rv_generic] Np.Obj.t))
let poisson ?loc ~mu () =
   Py.Module.get_function_with_keywords __wrap_namespace "poisson"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("mu", Some(mu ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Poisson_gen|`Rv_discrete|`Rv_generic] Np.Obj.t))
let powerlaw ?loc ?scale ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "powerlaw"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Powerlaw_gen|`Rv_continuous|`Rv_generic] Np.Obj.t))
let powerlognorm ?loc ?scale ~c ~s () =
   Py.Module.get_function_with_keywords __wrap_namespace "powerlognorm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c )); ("s", Some(s ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Powerlognorm_gen|`Rv_continuous|`Rv_generic] Np.Obj.t))
let powernorm ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "powernorm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Powernorm_gen|`Rv_continuous|`Rv_generic] Np.Obj.t))
let randint ?loc ~low ~high () =
   Py.Module.get_function_with_keywords __wrap_namespace "randint"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("low", Some(low )); ("high", Some(high ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Randint_gen|`Rv_discrete|`Rv_generic] Np.Obj.t))
let rayleigh ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "rayleigh"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rayleigh_gen|`Rv_continuous|`Rv_generic] Np.Obj.t))
let rdist ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "rdist"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rdist_gen|`Rv_continuous|`Rv_generic] Np.Obj.t))
let recipinvgauss ?loc ?scale ~mu () =
   Py.Module.get_function_with_keywords __wrap_namespace "recipinvgauss"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("mu", Some(mu ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Recipinvgauss_gen|`Rv_continuous|`Rv_generic] Np.Obj.t))
let reciprocal ?loc ?scale ~a ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "reciprocal"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Reciprocal_gen|`Rv_continuous|`Rv_generic] Np.Obj.t))
let rice ?loc ?scale ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "rice"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rice_gen|`Rv_continuous|`Rv_generic] Np.Obj.t))
let semicircular ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "semicircular"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Semicircular_gen] Np.Obj.t))
let skellam ?loc ~mu1 ~mu2 () =
   Py.Module.get_function_with_keywords __wrap_namespace "skellam"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("mu1", Some(mu1 )); ("mu2", Some(mu2 ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_discrete|`Rv_generic|`Skellam_gen] Np.Obj.t))
let skewnorm ?loc ?scale ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "skewnorm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a ))])

let t ?loc ?scale ~df () =
   Py.Module.get_function_with_keywords __wrap_namespace "t"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("df", Some(df ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`T_gen] Np.Obj.t))
let trapz ?loc ?scale ~c ~d () =
   Py.Module.get_function_with_keywords __wrap_namespace "trapz"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c )); ("d", Some(d ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Trapz_gen] Np.Obj.t))
let triang ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "triang"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Triang_gen] Np.Obj.t))
let truncexpon ?loc ?scale ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "truncexpon"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Truncexpon_gen] Np.Obj.t))
let truncnorm ?loc ?scale ~a ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "truncnorm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Truncnorm_gen] Np.Obj.t))
let tukeylambda ?loc ?scale ~lam () =
   Py.Module.get_function_with_keywords __wrap_namespace "tukeylambda"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lam", Some(lam ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Tukeylambda_gen] Np.Obj.t))
let uniform ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "uniform"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Uniform_gen] Np.Obj.t))
let vonmises ?loc ?scale ~kappa () =
   Py.Module.get_function_with_keywords __wrap_namespace "vonmises"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("kappa", Some(kappa ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Vonmises_gen] Np.Obj.t))
let vonmises_line ?loc ?scale ~kappa () =
   Py.Module.get_function_with_keywords __wrap_namespace "vonmises_line"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("kappa", Some(kappa ))])

let wald ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "wald"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Wald_gen] Np.Obj.t))
let weibull_max ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "weibull_max"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Weibull_max_gen] Np.Obj.t))
let weibull_min ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "weibull_min"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Weibull_min_gen] Np.Obj.t))
let wrapcauchy ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "wrapcauchy"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Wrapcauchy_gen] Np.Obj.t))
let yulesimon ?loc ~alpha () =
   Py.Module.get_function_with_keywords __wrap_namespace "yulesimon"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("alpha", Some(alpha ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_discrete|`Rv_generic|`Yulesimon_gen] Np.Obj.t))
let zipf ?loc ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "zipf"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("a", Some(a ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_discrete|`Rv_generic|`Zipf_gen] Np.Obj.t))

end
module Kde = struct
let () = Wrap_utils.init ();;
let __wrap_namespace = Py.import "scipy.stats.kde"

let get_py name = Py.Module.get __wrap_namespace name
                  let asarray ?dtype ?order ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "asarray"
                       [||]
                       (Wrap_utils.keyword_args [("dtype", Wrap_utils.Option.map dtype Np.Dtype.to_pyobject); ("order", Wrap_utils.Option.map order (function
| `F -> Py.String.of_string "F"
| `C -> Py.String.of_string "C"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let atleast_1d arys =
   Py.Module.get_function_with_keywords __wrap_namespace "atleast_1d"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id arys)])
     []
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let atleast_2d arys =
   Py.Module.get_function_with_keywords __wrap_namespace "atleast_2d"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id arys)])
     []

let callable obj =
   Py.Module.get_function_with_keywords __wrap_namespace "callable"
     [||]
     (Wrap_utils.keyword_args [("obj", Some(obj ))])

let check_random_state seed =
   Py.Module.get_function_with_keywords __wrap_namespace "check_random_state"
     [||]
     (Wrap_utils.keyword_args [("seed", Some(seed ))])

                  let cov ?y ?rowvar ?bias ?ddof ?fweights ?aweights ~m () =
                     Py.Module.get_function_with_keywords __wrap_namespace "cov"
                       [||]
                       (Wrap_utils.keyword_args [("y", Wrap_utils.Option.map y Np.Obj.to_pyobject); ("rowvar", Wrap_utils.Option.map rowvar Py.Bool.of_bool); ("bias", Wrap_utils.Option.map bias Py.Bool.of_bool); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("fweights", Wrap_utils.Option.map fweights (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)); ("aweights", Wrap_utils.Option.map aweights Np.Obj.to_pyobject); ("m", Some(m |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let dot ?out ~a ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "dot"
     [||]
     (Wrap_utils.keyword_args [("out", Wrap_utils.Option.map out Np.Obj.to_pyobject); ("a", Some(a |> Np.Obj.to_pyobject)); ("b", Some(b |> Np.Obj.to_pyobject))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let exp ?out ?where ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "exp"
                       (Array.of_list @@ List.concat [[x |> Np.Obj.to_pyobject]])
                       (Wrap_utils.keyword_args [("out", Wrap_utils.Option.map out (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `Tuple_of_ndarray_and_None x -> Wrap_utils.id x
)); ("where", Wrap_utils.Option.map where Np.Obj.to_pyobject)])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let logsumexp ?axis ?b ?keepdims ?return_sign ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "logsumexp"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (fun ml -> Py.Tuple.of_list_map Py.Int.of_int ml)); ("b", Wrap_utils.Option.map b Np.Obj.to_pyobject); ("keepdims", Wrap_utils.Option.map keepdims Py.Bool.of_bool); ("return_sign", Wrap_utils.Option.map return_sign Py.Bool.of_bool); ("a", Some(a |> Np.Obj.to_pyobject))])
     |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1))))
                  let ones ?dtype ?order ~shape () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ones"
                       [||]
                       (Wrap_utils.keyword_args [("dtype", Wrap_utils.Option.map dtype Np.Dtype.to_pyobject); ("order", Wrap_utils.Option.map order (function
| `C -> Py.String.of_string "C"
| `F -> Py.String.of_string "F"
)); ("shape", Some(shape |> (function
| `I x -> Py.Int.of_int x
| `Is x -> (fun ml -> Py.List.of_list_map Py.Int.of_int ml) x
)))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let power ?out ?where ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "power"
                       (Array.of_list @@ List.concat [[x ]])
                       (Wrap_utils.keyword_args [("out", Wrap_utils.Option.map out (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `Tuple_of_ndarray_and_None x -> Wrap_utils.id x
)); ("where", Wrap_utils.Option.map where Np.Obj.to_pyobject)])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let ravel ?order ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ravel"
                       [||]
                       (Wrap_utils.keyword_args [("order", Wrap_utils.Option.map order (function
| `C -> Py.String.of_string "C"
| `F -> Py.String.of_string "F"
| `A -> Py.String.of_string "A"
| `K -> Py.String.of_string "K"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let reshape ?order ~a ~newshape () =
                     Py.Module.get_function_with_keywords __wrap_namespace "reshape"
                       [||]
                       (Wrap_utils.keyword_args [("order", Wrap_utils.Option.map order (function
| `C -> Py.String.of_string "C"
| `F -> Py.String.of_string "F"
| `A -> Py.String.of_string "A"
)); ("a", Some(a |> Np.Obj.to_pyobject)); ("newshape", Some(newshape |> (fun ml -> Py.Tuple.of_list_map Py.Int.of_int ml)))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let sqrt ?out ?where ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "sqrt"
                       (Array.of_list @@ List.concat [[x |> Np.Obj.to_pyobject]])
                       (Wrap_utils.keyword_args [("out", Wrap_utils.Option.map out (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `Tuple_of_ndarray_and_None x -> Wrap_utils.id x
)); ("where", Wrap_utils.Option.map where Np.Obj.to_pyobject)])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let squeeze ?axis ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "squeeze"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (fun ml -> Py.Tuple.of_list_map Py.Int.of_int ml)); ("a", Some(a |> Np.Obj.to_pyobject))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let sum ?axis ?dtype ?out ?keepdims ?initial ?where ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "sum"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (fun ml -> Py.Tuple.of_list_map Py.Int.of_int ml)); ("dtype", Wrap_utils.Option.map dtype Np.Dtype.to_pyobject); ("out", Wrap_utils.Option.map out Np.Obj.to_pyobject); ("keepdims", Wrap_utils.Option.map keepdims Py.Bool.of_bool); ("initial", Wrap_utils.Option.map initial (function
| `F x -> Py.Float.of_float x
| `I x -> Py.Int.of_int x
| `Bool x -> Py.Bool.of_bool x
| `S x -> Py.String.of_string x
)); ("where", where); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let transpose ?axes ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "transpose"
     [||]
     (Wrap_utils.keyword_args [("axes", axes); ("a", Some(a |> Np.Obj.to_pyobject))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let zeros ?dtype ?order ~shape () =
                     Py.Module.get_function_with_keywords __wrap_namespace "zeros"
                       [||]
                       (Wrap_utils.keyword_args [("dtype", Wrap_utils.Option.map dtype Np.Dtype.to_pyobject); ("order", Wrap_utils.Option.map order (function
| `C -> Py.String.of_string "C"
| `F -> Py.String.of_string "F"
)); ("shape", Some(shape |> (fun ml -> Py.Tuple.of_list_map Py.Int.of_int ml)))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))

end
module Morestats = struct
let () = Wrap_utils.init ();;
let __wrap_namespace = Py.import "scipy.stats.morestats"

let get_py name = Py.Module.get __wrap_namespace name
module AndersonResult = struct
type tag = [`AndersonResult]
type t = [`AndersonResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~critical_values ~significance_level () =
   Py.Module.get_function_with_keywords __wrap_namespace "AndersonResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("critical_values", Some(critical_values )); ("significance_level", Some(significance_level ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Anderson_ksampResult = struct
type tag = [`Anderson_ksampResult]
type t = [`Anderson_ksampResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~critical_values ~significance_level () =
   Py.Module.get_function_with_keywords __wrap_namespace "Anderson_ksampResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("critical_values", Some(critical_values )); ("significance_level", Some(significance_level ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module AnsariResult = struct
type tag = [`AnsariResult]
type t = [`AnsariResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "AnsariResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module BartlettResult = struct
type tag = [`BartlettResult]
type t = [`BartlettResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "BartlettResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module FlignerResult = struct
type tag = [`FlignerResult]
type t = [`FlignerResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "FlignerResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module LeveneResult = struct
type tag = [`LeveneResult]
type t = [`LeveneResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "LeveneResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Mean = struct
type tag = [`Mean]
type t = [`Mean | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~minmax () =
   Py.Module.get_function_with_keywords __wrap_namespace "Mean"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("minmax", Some(minmax ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Std_dev = struct
type tag = [`Std_dev]
type t = [`Object | `Std_dev] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~minmax () =
   Py.Module.get_function_with_keywords __wrap_namespace "Std_dev"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("minmax", Some(minmax ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Variance = struct
type tag = [`Variance]
type t = [`Object | `Variance] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~minmax () =
   Py.Module.get_function_with_keywords __wrap_namespace "Variance"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("minmax", Some(minmax ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module WilcoxonResult = struct
type tag = [`WilcoxonResult]
type t = [`Object | `WilcoxonResult] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "WilcoxonResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Rv_generic = struct
type tag = [`Rv_generic]
type t = [`Object | `Rv_generic] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "rv_generic"
     [||]
     (Wrap_utils.keyword_args [("seed", seed)])
     |> of_pyobject
let entropy ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "entropy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let freeze ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "freeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let interval ?kwds ~alpha args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "interval"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (List.rev_append (Wrap_utils.keyword_args [("alpha", Some(alpha |> Np.Obj.to_pyobject))]) (match kwds with None -> [] | Some x -> x))

let mean ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let median ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "median"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
                  let moment ?kwds ~n args self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "moment"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("n", Some(n |> (function
| `N_1 x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)))]) (match kwds with None -> [] | Some x -> x))

let rvs ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "rvs"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let stats ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "stats"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let std ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let support ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "support"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let var ?kwds args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> Py.Float.to_float
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
                  let amax ?axis ?out ?keepdims ?initial ?where ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "amax"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (fun ml -> Py.Tuple.of_list_map Py.Int.of_int ml)); ("out", Wrap_utils.Option.map out Np.Obj.to_pyobject); ("keepdims", Wrap_utils.Option.map keepdims Py.Bool.of_bool); ("initial", Wrap_utils.Option.map initial (function
| `F x -> Py.Float.of_float x
| `I x -> Py.Int.of_int x
| `Bool x -> Py.Bool.of_bool x
| `S x -> Py.String.of_string x
)); ("where", where); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let amin ?axis ?out ?keepdims ?initial ?where ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "amin"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (fun ml -> Py.Tuple.of_list_map Py.Int.of_int ml)); ("out", Wrap_utils.Option.map out Np.Obj.to_pyobject); ("keepdims", Wrap_utils.Option.map keepdims Py.Bool.of_bool); ("initial", Wrap_utils.Option.map initial (function
| `F x -> Py.Float.of_float x
| `I x -> Py.Int.of_int x
| `Bool x -> Py.Bool.of_bool x
| `S x -> Py.String.of_string x
)); ("where", where); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let anderson ?dist ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "anderson"
                       [||]
                       (Wrap_utils.keyword_args [("dist", Wrap_utils.Option.map dist (function
| `Expon -> Py.String.of_string "expon"
| `Logistic -> Py.String.of_string "logistic"
| `Gumbel -> Py.String.of_string "gumbel"
| `Gumbel_l -> Py.String.of_string "gumbel_l"
| `PyObject x -> Wrap_utils.id x
)); ("x", Some(x |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 2))))
let anderson_ksamp ?midrank ~samples () =
   Py.Module.get_function_with_keywords __wrap_namespace "anderson_ksamp"
     [||]
     (Wrap_utils.keyword_args [("midrank", Wrap_utils.Option.map midrank Py.Bool.of_bool); ("samples", Some(samples ))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1)), (Py.Float.to_float (Py.Tuple.get x 2))))
let ansari ~x ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "ansari"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x )); ("y", Some(y ))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let any ?axis ?out ?keepdims ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "any"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (fun ml -> Py.Tuple.of_list_map Py.Int.of_int ml)); ("out", Wrap_utils.Option.map out Np.Obj.to_pyobject); ("keepdims", Wrap_utils.Option.map keepdims Py.Bool.of_bool); ("a", Some(a |> Np.Obj.to_pyobject))])

                  let arange ?start ?step ?dtype ~stop () =
                     Py.Module.get_function_with_keywords __wrap_namespace "arange"
                       [||]
                       (Wrap_utils.keyword_args [("start", Wrap_utils.Option.map start (function
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
)); ("step", Wrap_utils.Option.map step (function
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
)); ("dtype", Wrap_utils.Option.map dtype Np.Dtype.to_pyobject); ("stop", Some(stop |> (function
| `F x -> Py.Float.of_float x
| `I x -> Py.Int.of_int x
)))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let arctan2 ?out ?where ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "arctan2"
                       (Array.of_list @@ List.concat [[x ]])
                       (Wrap_utils.keyword_args [("out", Wrap_utils.Option.map out (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `Tuple_of_ndarray_and_None x -> Wrap_utils.id x
)); ("where", Wrap_utils.Option.map where Np.Obj.to_pyobject)])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let around ?decimals ?out ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "around"
     [||]
     (Wrap_utils.keyword_args [("decimals", Wrap_utils.Option.map decimals Py.Int.of_int); ("out", Wrap_utils.Option.map out Np.Obj.to_pyobject); ("a", Some(a |> Np.Obj.to_pyobject))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let array ?dtype ?copy ?order ?subok ?ndmin ~object_ () =
                     Py.Module.get_function_with_keywords __wrap_namespace "array"
                       [||]
                       (Wrap_utils.keyword_args [("dtype", Wrap_utils.Option.map dtype Np.Dtype.to_pyobject); ("copy", Wrap_utils.Option.map copy Py.Bool.of_bool); ("order", Wrap_utils.Option.map order (function
| `K -> Py.String.of_string "K"
| `A -> Py.String.of_string "A"
| `C -> Py.String.of_string "C"
| `F -> Py.String.of_string "F"
)); ("subok", Wrap_utils.Option.map subok Py.Bool.of_bool); ("ndmin", Wrap_utils.Option.map ndmin Py.Int.of_int); ("object", Some(object_ |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let asarray ?dtype ?order ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "asarray"
                       [||]
                       (Wrap_utils.keyword_args [("dtype", Wrap_utils.Option.map dtype Np.Dtype.to_pyobject); ("order", Wrap_utils.Option.map order (function
| `F -> Py.String.of_string "F"
| `C -> Py.String.of_string "C"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let atleast_1d arys =
   Py.Module.get_function_with_keywords __wrap_namespace "atleast_1d"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id arys)])
     []
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let bartlett args =
   Py.Module.get_function_with_keywords __wrap_namespace "bartlett"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let bayes_mvs ?alpha ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "bayes_mvs"
     [||]
     (Wrap_utils.keyword_args [("alpha", Wrap_utils.Option.map alpha Py.Float.of_float); ("data", Some(data |> Np.Obj.to_pyobject))])

                  let binom_test ?n ?p ?alternative ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "binom_test"
                       [||]
                       (Wrap_utils.keyword_args [("n", Wrap_utils.Option.map n Py.Int.of_int); ("p", Wrap_utils.Option.map p Py.Float.of_float); ("alternative", Wrap_utils.Option.map alternative (function
| `Two_sided -> Py.String.of_string "two-sided"
| `Greater -> Py.String.of_string "greater"
| `Less -> Py.String.of_string "less"
)); ("x", Some(x |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))])

                  let boxcox ?lmbda ?alpha ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "boxcox"
                       [||]
                       (Wrap_utils.keyword_args [("lmbda", Wrap_utils.Option.map lmbda (function
| `Bool x -> Py.Bool.of_bool x
| `S x -> Py.String.of_string x
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
)); ("alpha", Wrap_utils.Option.map alpha Py.Float.of_float); ("x", Some(x |> Np.Obj.to_pyobject))])
                       |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let boxcox_llf ~lmb ~data () =
                     Py.Module.get_function_with_keywords __wrap_namespace "boxcox_llf"
                       [||]
                       (Wrap_utils.keyword_args [("lmb", Some(lmb |> (function
| `F x -> Py.Float.of_float x
| `I x -> Py.Int.of_int x
| `Bool x -> Py.Bool.of_bool x
| `S x -> Py.String.of_string x
))); ("data", Some(data |> Np.Obj.to_pyobject))])

let boxcox_normmax ?brack ?method_ ~x () =
   Py.Module.get_function_with_keywords __wrap_namespace "boxcox_normmax"
     [||]
     (Wrap_utils.keyword_args [("brack", brack); ("method", Wrap_utils.Option.map method_ Py.String.of_string); ("x", Some(x |> Np.Obj.to_pyobject))])

let boxcox_normplot ?plot ?n ~x ~la ~lb () =
   Py.Module.get_function_with_keywords __wrap_namespace "boxcox_normplot"
     [||]
     (Wrap_utils.keyword_args [("plot", plot); ("N", Wrap_utils.Option.map n Py.Int.of_int); ("x", Some(x |> Np.Obj.to_pyobject)); ("la", Some(la )); ("lb", Some(lb ))])
     |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1))))
                  let ceil ?out ?where ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ceil"
                       (Array.of_list @@ List.concat [[x |> Np.Obj.to_pyobject]])
                       (Wrap_utils.keyword_args [("out", Wrap_utils.Option.map out (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `Tuple_of_ndarray_and_None x -> Wrap_utils.id x
)); ("where", Wrap_utils.Option.map where Np.Obj.to_pyobject)])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let chi2_contingency ?correction ?lambda_ ~observed () =
                     Py.Module.get_function_with_keywords __wrap_namespace "chi2_contingency"
                       [||]
                       (Wrap_utils.keyword_args [("correction", Wrap_utils.Option.map correction Py.Bool.of_bool); ("lambda_", Wrap_utils.Option.map lambda_ (function
| `S x -> Py.String.of_string x
| `F x -> Py.Float.of_float x
)); ("observed", Some(observed |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1)), (Py.Int.to_int (Py.Tuple.get x 2)), (Wrap_utils.id (Py.Tuple.get x 3))))
                  let circmean ?high ?low ?axis ?nan_policy ~samples () =
                     Py.Module.get_function_with_keywords __wrap_namespace "circmean"
                       [||]
                       (Wrap_utils.keyword_args [("high", Wrap_utils.Option.map high (function
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
)); ("low", Wrap_utils.Option.map low (function
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
)); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("samples", Some(samples |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
                  let circstd ?high ?low ?axis ?nan_policy ~samples () =
                     Py.Module.get_function_with_keywords __wrap_namespace "circstd"
                       [||]
                       (Wrap_utils.keyword_args [("high", Wrap_utils.Option.map high (function
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
)); ("low", Wrap_utils.Option.map low (function
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
)); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("samples", Some(samples |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
                  let circvar ?high ?low ?axis ?nan_policy ~samples () =
                     Py.Module.get_function_with_keywords __wrap_namespace "circvar"
                       [||]
                       (Wrap_utils.keyword_args [("high", Wrap_utils.Option.map high (function
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
)); ("low", Wrap_utils.Option.map low (function
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
)); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("samples", Some(samples |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
let compress ?axis ?out ~condition ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "compress"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("out", Wrap_utils.Option.map out Np.Obj.to_pyobject); ("condition", Some(condition )); ("a", Some(a |> Np.Obj.to_pyobject))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let cos ?out ?where ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "cos"
                       (Array.of_list @@ List.concat [[x |> Np.Obj.to_pyobject]])
                       (Wrap_utils.keyword_args [("out", Wrap_utils.Option.map out (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `Tuple_of_ndarray_and_None x -> Wrap_utils.id x
)); ("where", Wrap_utils.Option.map where Np.Obj.to_pyobject)])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let count_nonzero ?axis ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "count_nonzero"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `Tuple x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)); ("a", Some(a |> Np.Obj.to_pyobject))])

                  let exp ?out ?where ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "exp"
                       (Array.of_list @@ List.concat [[x |> Np.Obj.to_pyobject]])
                       (Wrap_utils.keyword_args [("out", Wrap_utils.Option.map out (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `Tuple_of_ndarray_and_None x -> Wrap_utils.id x
)); ("where", Wrap_utils.Option.map where Np.Obj.to_pyobject)])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let find_repeats arr =
   Py.Module.get_function_with_keywords __wrap_namespace "find_repeats"
     [||]
     (Wrap_utils.keyword_args [("arr", Some(arr |> Np.Obj.to_pyobject))])
     |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1))))
let fligner ?kwds args =
   Py.Module.get_function_with_keywords __wrap_namespace "fligner"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let floor ?out ?where ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "floor"
                       (Array.of_list @@ List.concat [[x |> Np.Obj.to_pyobject]])
                       (Wrap_utils.keyword_args [("out", Wrap_utils.Option.map out (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `Tuple_of_ndarray_and_None x -> Wrap_utils.id x
)); ("where", Wrap_utils.Option.map where Np.Obj.to_pyobject)])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let hypot ?out ?where ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "hypot"
                       (Array.of_list @@ List.concat [[x ]])
                       (Wrap_utils.keyword_args [("out", Wrap_utils.Option.map out (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `Tuple_of_ndarray_and_None x -> Wrap_utils.id x
)); ("where", Wrap_utils.Option.map where Np.Obj.to_pyobject)])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let isscalar element =
   Py.Module.get_function_with_keywords __wrap_namespace "isscalar"
     [||]
     (Wrap_utils.keyword_args [("element", Some(element ))])
     |> Py.Bool.to_bool
                  let kstat ?n ~data () =
                     Py.Module.get_function_with_keywords __wrap_namespace "kstat"
                       [||]
                       (Wrap_utils.keyword_args [("n", Wrap_utils.Option.map n (function
| `Three -> Py.Int.of_int 3
| `I x -> Py.Int.of_int x
| `Two -> Py.Int.of_int 2
| `PyObject x -> Wrap_utils.id x
)); ("data", Some(data |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
                  let kstatvar ?n ~data () =
                     Py.Module.get_function_with_keywords __wrap_namespace "kstatvar"
                       [||]
                       (Wrap_utils.keyword_args [("n", Wrap_utils.Option.map n (function
| `I x -> Py.Int.of_int x
| `PyObject x -> Wrap_utils.id x
)); ("data", Some(data |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
let levene ?kwds args =
   Py.Module.get_function_with_keywords __wrap_namespace "levene"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let log ?out ?where ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "log"
                       (Array.of_list @@ List.concat [[x |> Np.Obj.to_pyobject]])
                       (Wrap_utils.keyword_args [("out", Wrap_utils.Option.map out (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `Tuple_of_ndarray_and_None x -> Wrap_utils.id x
)); ("where", Wrap_utils.Option.map where Np.Obj.to_pyobject)])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let median_test ?kwds args =
   Py.Module.get_function_with_keywords __wrap_namespace "median_test"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1)), (Py.Float.to_float (Py.Tuple.get x 2)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 3))))
let mood ?axis ~x ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "mood"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("x", Some(x )); ("y", Some(y ))])

let mvsdist data =
   Py.Module.get_function_with_keywords __wrap_namespace "mvsdist"
     [||]
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1)), (Wrap_utils.id (Py.Tuple.get x 2))))
let namedtuple ?rename ?defaults ?module_ ~typename ~field_names () =
   Py.Module.get_function_with_keywords __wrap_namespace "namedtuple"
     [||]
     (Wrap_utils.keyword_args [("rename", rename); ("defaults", defaults); ("module", module_); ("typename", Some(typename )); ("field_names", Some(field_names ))])

                  let ppcc_max ?brack ?dist ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ppcc_max"
                       [||]
                       (Wrap_utils.keyword_args [("brack", brack); ("dist", Wrap_utils.Option.map dist (function
| `Stats_distributions_instance x -> Wrap_utils.id x
| `S x -> Py.String.of_string x
)); ("x", Some(x |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
                  let ppcc_plot ?dist ?plot ?n ~x ~a ~b () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ppcc_plot"
                       [||]
                       (Wrap_utils.keyword_args [("dist", Wrap_utils.Option.map dist (function
| `Stats_distributions_instance x -> Wrap_utils.id x
| `S x -> Py.String.of_string x
)); ("plot", plot); ("N", Wrap_utils.Option.map n Py.Int.of_int); ("x", Some(x |> Np.Obj.to_pyobject)); ("a", Some(a )); ("b", Some(b ))])
                       |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1))))
                  let probplot ?sparams ?dist ?fit ?plot ?rvalue ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "probplot"
                       [||]
                       (Wrap_utils.keyword_args [("sparams", sparams); ("dist", Wrap_utils.Option.map dist (function
| `Stats_distributions_instance x -> Wrap_utils.id x
| `S x -> Py.String.of_string x
)); ("fit", Wrap_utils.Option.map fit Py.Bool.of_bool); ("plot", plot); ("rvalue", rvalue); ("x", Some(x |> Np.Obj.to_pyobject))])

                  let ravel ?order ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ravel"
                       [||]
                       (Wrap_utils.keyword_args [("order", Wrap_utils.Option.map order (function
| `C -> Py.String.of_string "C"
| `F -> Py.String.of_string "F"
| `A -> Py.String.of_string "A"
| `K -> Py.String.of_string "K"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let shapiro x =
   Py.Module.get_function_with_keywords __wrap_namespace "shapiro"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))])
     |> Py.Float.to_float
                  let sin ?out ?where ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "sin"
                       (Array.of_list @@ List.concat [[x |> Np.Obj.to_pyobject]])
                       (Wrap_utils.keyword_args [("out", Wrap_utils.Option.map out (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `Tuple_of_ndarray_and_None x -> Wrap_utils.id x
)); ("where", Wrap_utils.Option.map where Np.Obj.to_pyobject)])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let sort ?axis ?kind ?order ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "sort"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("kind", Wrap_utils.Option.map kind (function
| `Stable -> Py.String.of_string "stable"
| `Quicksort -> Py.String.of_string "quicksort"
| `Heapsort -> Py.String.of_string "heapsort"
| `Mergesort -> Py.String.of_string "mergesort"
)); ("order", Wrap_utils.Option.map order (function
| `StringList x -> (Py.List.of_list_map Py.String.of_string) x
| `S x -> Py.String.of_string x
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let sqrt ?out ?where ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "sqrt"
                       (Array.of_list @@ List.concat [[x |> Np.Obj.to_pyobject]])
                       (Wrap_utils.keyword_args [("out", Wrap_utils.Option.map out (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `Tuple_of_ndarray_and_None x -> Wrap_utils.id x
)); ("where", Wrap_utils.Option.map where Np.Obj.to_pyobject)])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let unique ?return_index ?return_inverse ?return_counts ?axis ~ar () =
   Py.Module.get_function_with_keywords __wrap_namespace "unique"
     [||]
     (Wrap_utils.keyword_args [("return_index", Wrap_utils.Option.map return_index Py.Bool.of_bool); ("return_inverse", Wrap_utils.Option.map return_inverse Py.Bool.of_bool); ("return_counts", Wrap_utils.Option.map return_counts Py.Bool.of_bool); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("ar", Some(ar |> Np.Obj.to_pyobject))])
     |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 2)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 3))))
                  let wilcoxon ?y ?zero_method ?correction ?alternative ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "wilcoxon"
                       [||]
                       (Wrap_utils.keyword_args [("y", Wrap_utils.Option.map y Np.Obj.to_pyobject); ("zero_method", Wrap_utils.Option.map zero_method (function
| `Pratt -> Py.String.of_string "pratt"
| `Wilcox -> Py.String.of_string "wilcox"
| `Zsplit -> Py.String.of_string "zsplit"
)); ("correction", Wrap_utils.Option.map correction Py.Bool.of_bool); ("alternative", Wrap_utils.Option.map alternative (function
| `Two_sided -> Py.String.of_string "two-sided"
| `Greater -> Py.String.of_string "greater"
| `Less -> Py.String.of_string "less"
)); ("x", Some(x |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let yeojohnson ?lmbda ~x () =
   Py.Module.get_function_with_keywords __wrap_namespace "yeojohnson"
     [||]
     (Wrap_utils.keyword_args [("lmbda", Wrap_utils.Option.map lmbda Py.Float.of_float); ("x", Some(x |> Np.Obj.to_pyobject))])
     |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let yeojohnson_llf ~lmb ~data () =
                     Py.Module.get_function_with_keywords __wrap_namespace "yeojohnson_llf"
                       [||]
                       (Wrap_utils.keyword_args [("lmb", Some(lmb |> (function
| `F x -> Py.Float.of_float x
| `I x -> Py.Int.of_int x
| `Bool x -> Py.Bool.of_bool x
| `S x -> Py.String.of_string x
))); ("data", Some(data |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
let yeojohnson_normmax ?brack ~x () =
   Py.Module.get_function_with_keywords __wrap_namespace "yeojohnson_normmax"
     [||]
     (Wrap_utils.keyword_args [("brack", brack); ("x", Some(x |> Np.Obj.to_pyobject))])
     |> Py.Float.to_float
let yeojohnson_normplot ?plot ?n ~x ~la ~lb () =
   Py.Module.get_function_with_keywords __wrap_namespace "yeojohnson_normplot"
     [||]
     (Wrap_utils.keyword_args [("plot", plot); ("N", Wrap_utils.Option.map n Py.Int.of_int); ("x", Some(x |> Np.Obj.to_pyobject)); ("la", Some(la )); ("lb", Some(lb ))])
     |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1))))
                  let zeros ?dtype ?order ~shape () =
                     Py.Module.get_function_with_keywords __wrap_namespace "zeros"
                       [||]
                       (Wrap_utils.keyword_args [("dtype", Wrap_utils.Option.map dtype Np.Dtype.to_pyobject); ("order", Wrap_utils.Option.map order (function
| `C -> Py.String.of_string "C"
| `F -> Py.String.of_string "F"
)); ("shape", Some(shape |> (fun ml -> Py.Tuple.of_list_map Py.Int.of_int ml)))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))

end
module Mstats = struct
let () = Wrap_utils.init ();;
let __wrap_namespace = Py.import "scipy.stats.mstats"

let get_py name = Py.Module.get __wrap_namespace name
let argstoarray args =
   Py.Module.get_function_with_keywords __wrap_namespace "argstoarray"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []

                  let brunnermunzel ?alternative ?distribution ~x ~y () =
                     Py.Module.get_function_with_keywords __wrap_namespace "brunnermunzel"
                       [||]
                       (Wrap_utils.keyword_args [("alternative", Wrap_utils.Option.map alternative (function
| `Less -> Py.String.of_string "less"
| `Two_sided -> Py.String.of_string "two-sided"
| `Greater -> Py.String.of_string "greater"
)); ("distribution", Wrap_utils.Option.map distribution (function
| `T -> Py.String.of_string "t"
| `Normal -> Py.String.of_string "normal"
)); ("x", Some(x )); ("y", Some(y ))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let chisquare ?f_exp ?ddof ?axis ~f_obs () =
                     Py.Module.get_function_with_keywords __wrap_namespace "chisquare"
                       [||]
                       (Wrap_utils.keyword_args [("f_exp", Wrap_utils.Option.map f_exp Np.Obj.to_pyobject); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("f_obs", Some(f_obs |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
let compare_medians_ms ?axis ~group_1 ~group_2 () =
   Py.Module.get_function_with_keywords __wrap_namespace "compare_medians_ms"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("group_1", Some(group_1 |> Np.Obj.to_pyobject)); ("group_2", Some(group_2 |> Np.Obj.to_pyobject))])

let count_tied_groups ?use_missing ~x () =
   Py.Module.get_function_with_keywords __wrap_namespace "count_tied_groups"
     [||]
     (Wrap_utils.keyword_args [("use_missing", Wrap_utils.Option.map use_missing Py.Bool.of_bool); ("x", Some(x ))])

                  let describe ?axis ?ddof ?bias ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "describe"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("bias", Wrap_utils.Option.map bias Py.Bool.of_bool); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Int.to_int (Py.Tuple.get x 0)), ((fun x -> ((Py.Int.to_int (Py.Tuple.get x 0)), (Py.Int.to_int (Py.Tuple.get x 1)))) (Py.Tuple.get x 1)), (Py.Float.to_float (Py.Tuple.get x 2)), (Py.Float.to_float (Py.Tuple.get x 3)), (Py.Float.to_float (Py.Tuple.get x 4)), (Py.Float.to_float (Py.Tuple.get x 5))))
let f_oneway args =
   Py.Module.get_function_with_keywords __wrap_namespace "f_oneway"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let find_repeats arr =
   Py.Module.get_function_with_keywords __wrap_namespace "find_repeats"
     [||]
     (Wrap_utils.keyword_args [("arr", Some(arr ))])
     |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1))))
let friedmanchisquare args =
   Py.Module.get_function_with_keywords __wrap_namespace "friedmanchisquare"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let gmean ?axis ?dtype ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "gmean"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("dtype", Wrap_utils.Option.map dtype Np.Dtype.to_pyobject); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let hdmedian ?axis ?var ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "hdmedian"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("var", Wrap_utils.Option.map var Py.Bool.of_bool); ("data", Some(data |> Np.Obj.to_pyobject))])

let hdquantiles ?prob ?axis ?var ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "hdquantiles"
     [||]
     (Wrap_utils.keyword_args [("prob", prob); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("var", Wrap_utils.Option.map var Py.Bool.of_bool); ("data", Some(data |> Np.Obj.to_pyobject))])

let hdquantiles_sd ?prob ?axis ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "hdquantiles_sd"
     [||]
     (Wrap_utils.keyword_args [("prob", prob); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("data", Some(data |> Np.Obj.to_pyobject))])

                  let hmean ?axis ?dtype ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "hmean"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("dtype", Wrap_utils.Option.map dtype Np.Dtype.to_pyobject); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let idealfourths ?axis ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "idealfourths"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("data", Some(data |> Np.Obj.to_pyobject))])

                  let kendalltau ?use_ties ?use_missing ?method_ ~x ~y () =
                     Py.Module.get_function_with_keywords __wrap_namespace "kendalltau"
                       [||]
                       (Wrap_utils.keyword_args [("use_ties", Wrap_utils.Option.map use_ties Py.Bool.of_bool); ("use_missing", Wrap_utils.Option.map use_missing Py.Bool.of_bool); ("method", Wrap_utils.Option.map method_ (function
| `Auto -> Py.String.of_string "auto"
| `Asymptotic -> Py.String.of_string "asymptotic"
| `Exact -> Py.String.of_string "exact"
)); ("x", Some(x )); ("y", Some(y ))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let kendalltau_seasonal x =
   Py.Module.get_function_with_keywords __wrap_namespace "kendalltau_seasonal"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x ))])

let kruskal args =
   Py.Module.get_function_with_keywords __wrap_namespace "kruskal"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let kruskalwallis args =
   Py.Module.get_function_with_keywords __wrap_namespace "kruskalwallis"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let ks_2samp ?alternative ~data1 ~data2 () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ks_2samp"
                       [||]
                       (Wrap_utils.keyword_args [("alternative", Wrap_utils.Option.map alternative (function
| `Two_sided -> Py.String.of_string "two-sided"
| `Less -> Py.String.of_string "less"
| `Greater -> Py.String.of_string "greater"
)); ("data1", Some(data1 |> Np.Obj.to_pyobject)); ("data2", Some(data2 |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let ks_twosamp ?alternative ~data1 ~data2 () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ks_twosamp"
                       [||]
                       (Wrap_utils.keyword_args [("alternative", Wrap_utils.Option.map alternative (function
| `Two_sided -> Py.String.of_string "two-sided"
| `Less -> Py.String.of_string "less"
| `Greater -> Py.String.of_string "greater"
)); ("data1", Some(data1 |> Np.Obj.to_pyobject)); ("data2", Some(data2 |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let kurtosis ?axis ?fisher ?bias ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "kurtosis"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("fisher", Wrap_utils.Option.map fisher Py.Bool.of_bool); ("bias", Wrap_utils.Option.map bias Py.Bool.of_bool); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let kurtosistest ?axis ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "kurtosistest"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let linregress ?y ~x () =
   Py.Module.get_function_with_keywords __wrap_namespace "linregress"
     [||]
     (Wrap_utils.keyword_args [("y", y); ("x", Some(x ))])

let mannwhitneyu ?use_continuity ~x ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "mannwhitneyu"
     [||]
     (Wrap_utils.keyword_args [("use_continuity", Wrap_utils.Option.map use_continuity Py.Bool.of_bool); ("x", Some(x )); ("y", Some(y ))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let median_cihs ?alpha ?axis ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "median_cihs"
     [||]
     (Wrap_utils.keyword_args [("alpha", Wrap_utils.Option.map alpha Py.Float.of_float); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("data", Some(data |> Np.Obj.to_pyobject))])

let meppf ?alpha ?beta ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "meppf"
     [||]
     (Wrap_utils.keyword_args [("alpha", Wrap_utils.Option.map alpha Py.Float.of_float); ("beta", Wrap_utils.Option.map beta Py.Float.of_float); ("data", Some(data |> Np.Obj.to_pyobject))])

let mjci ?prob ?axis ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "mjci"
     [||]
     (Wrap_utils.keyword_args [("prob", prob); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("data", Some(data |> Np.Obj.to_pyobject))])

                  let mode ?axis ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "mode"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1))))
                  let moment ?moment ?axis ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "moment"
                       [||]
                       (Wrap_utils.keyword_args [("moment", Wrap_utils.Option.map moment Py.Int.of_int); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject))])

let mquantiles ?prob ?alphap ?betap ?axis ?limit ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "mquantiles"
     [||]
     (Wrap_utils.keyword_args [("prob", Wrap_utils.Option.map prob Np.Obj.to_pyobject); ("alphap", Wrap_utils.Option.map alphap Py.Float.of_float); ("betap", Wrap_utils.Option.map betap Py.Float.of_float); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("limit", limit); ("a", Some(a |> Np.Obj.to_pyobject))])

let mquantiles_cimj ?prob ?alpha ?axis ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "mquantiles_cimj"
     [||]
     (Wrap_utils.keyword_args [("prob", prob); ("alpha", Wrap_utils.Option.map alpha Py.Float.of_float); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1))))
let msign x =
   Py.Module.get_function_with_keywords __wrap_namespace "msign"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x ))])

                  let normaltest ?axis ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "normaltest"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
let obrientransform args =
   Py.Module.get_function_with_keywords __wrap_namespace "obrientransform"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []

let pearsonr ~x ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "pearsonr"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x )); ("y", Some(y ))])
     |> Py.Float.to_float
let plotting_positions ?alpha ?beta ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "plotting_positions"
     [||]
     (Wrap_utils.keyword_args [("alpha", Wrap_utils.Option.map alpha Py.Float.of_float); ("beta", Wrap_utils.Option.map beta Py.Float.of_float); ("data", Some(data |> Np.Obj.to_pyobject))])

let pointbiserialr ~x ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "pointbiserialr"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x )); ("y", Some(y |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let rankdata ?axis ?use_missing ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "rankdata"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("use_missing", Wrap_utils.Option.map use_missing Py.Bool.of_bool); ("data", Some(data ))])

let rsh ?points ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "rsh"
     [||]
     (Wrap_utils.keyword_args [("points", points); ("data", Some(data ))])

let scoreatpercentile ?limit ?alphap ?betap ~data ~per () =
   Py.Module.get_function_with_keywords __wrap_namespace "scoreatpercentile"
     [||]
     (Wrap_utils.keyword_args [("limit", limit); ("alphap", alphap); ("betap", betap); ("data", Some(data )); ("per", Some(per ))])

                  let sem ?axis ?ddof ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "sem"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("a", Some(a |> Np.Obj.to_pyobject))])

let sen_seasonal_slopes x =
   Py.Module.get_function_with_keywords __wrap_namespace "sen_seasonal_slopes"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x ))])

                  let siegelslopes ?x ?method_ ~y () =
                     Py.Module.get_function_with_keywords __wrap_namespace "siegelslopes"
                       [||]
                       (Wrap_utils.keyword_args [("x", Wrap_utils.Option.map x Np.Obj.to_pyobject); ("method", Wrap_utils.Option.map method_ (function
| `Hierarchical -> Py.String.of_string "hierarchical"
| `Separate -> Py.String.of_string "separate"
)); ("y", Some(y |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let skew ?axis ?bias ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "skew"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("bias", Wrap_utils.Option.map bias Py.Bool.of_bool); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let skewtest ?axis ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "skewtest"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let spearmanr ?y ?use_ties ?axis ?nan_policy ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "spearmanr"
                       [||]
                       (Wrap_utils.keyword_args [("y", y); ("use_ties", Wrap_utils.Option.map use_ties Py.Bool.of_bool); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("x", Some(x ))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let theilslopes ?x ?alpha ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "theilslopes"
     [||]
     (Wrap_utils.keyword_args [("x", Wrap_utils.Option.map x Np.Obj.to_pyobject); ("alpha", Wrap_utils.Option.map alpha Py.Float.of_float); ("y", Some(y |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1)), (Py.Float.to_float (Py.Tuple.get x 2)), (Py.Float.to_float (Py.Tuple.get x 3))))
                  let tmax ?upperlimit ?axis ?inclusive ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "tmax"
                       [||]
                       (Wrap_utils.keyword_args [("upperlimit", Wrap_utils.Option.map upperlimit Py.Float.of_float); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("inclusive", Wrap_utils.Option.map inclusive Py.Bool.of_bool); ("a", Some(a |> Np.Obj.to_pyobject))])

let tmean ?limits ?inclusive ?axis ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "tmean"
     [||]
     (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("a", Some(a |> Np.Obj.to_pyobject))])
     |> Py.Float.to_float
                  let tmin ?lowerlimit ?axis ?inclusive ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "tmin"
                       [||]
                       (Wrap_utils.keyword_args [("lowerlimit", Wrap_utils.Option.map lowerlimit Py.Float.of_float); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("inclusive", Wrap_utils.Option.map inclusive Py.Bool.of_bool); ("a", Some(a |> Np.Obj.to_pyobject))])

let trim ?limits ?inclusive ?relative ?axis ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "trim"
     [||]
     (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("relative", Wrap_utils.Option.map relative Py.Bool.of_bool); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("a", Some(a ))])

let trima ?limits ?inclusive ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "trima"
     [||]
     (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("a", Some(a |> Np.Obj.to_pyobject))])

let trimboth ?proportiontocut ?inclusive ?axis ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "trimboth"
     [||]
     (Wrap_utils.keyword_args [("proportiontocut", Wrap_utils.Option.map proportiontocut Py.Float.of_float); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("data", Some(data |> Np.Obj.to_pyobject))])

                  let trimmed_mean ?limits ?inclusive ?relative ?axis ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "trimmed_mean"
                       [||]
                       (Wrap_utils.keyword_args [("limits", Wrap_utils.Option.map limits (function
| `Tuple x -> Wrap_utils.id x
| `None -> Py.none
)); ("inclusive", inclusive); ("relative", Wrap_utils.Option.map relative Py.Bool.of_bool); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("a", Some(a ))])

                  let trimmed_mean_ci ?limits ?inclusive ?alpha ?axis ~data () =
                     Py.Module.get_function_with_keywords __wrap_namespace "trimmed_mean_ci"
                       [||]
                       (Wrap_utils.keyword_args [("limits", Wrap_utils.Option.map limits (function
| `Tuple x -> Wrap_utils.id x
| `None -> Py.none
)); ("inclusive", inclusive); ("alpha", Wrap_utils.Option.map alpha Py.Float.of_float); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("data", Some(data |> Np.Obj.to_pyobject))])

                  let trimmed_std ?limits ?inclusive ?relative ?axis ?ddof ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "trimmed_std"
                       [||]
                       (Wrap_utils.keyword_args [("limits", Wrap_utils.Option.map limits (function
| `Tuple x -> Wrap_utils.id x
| `None -> Py.none
)); ("inclusive", inclusive); ("relative", Wrap_utils.Option.map relative Py.Bool.of_bool); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("ddof", Wrap_utils.Option.map ddof (function
| `Zero -> Py.Int.of_int 0
| `I x -> Py.Int.of_int x
)); ("a", Some(a ))])

let trimmed_stde ?limits ?inclusive ?axis ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "trimmed_stde"
     [||]
     (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("a", Some(a ))])

                  let trimmed_var ?limits ?inclusive ?relative ?axis ?ddof ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "trimmed_var"
                       [||]
                       (Wrap_utils.keyword_args [("limits", Wrap_utils.Option.map limits (function
| `Tuple x -> Wrap_utils.id x
| `None -> Py.none
)); ("inclusive", inclusive); ("relative", Wrap_utils.Option.map relative Py.Bool.of_bool); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("ddof", Wrap_utils.Option.map ddof (function
| `Zero -> Py.Int.of_int 0
| `I x -> Py.Int.of_int x
)); ("a", Some(a ))])

let trimr ?limits ?inclusive ?axis ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "trimr"
     [||]
     (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("a", Some(a ))])

                  let trimtail ?proportiontocut ?tail ?inclusive ?axis ~data () =
                     Py.Module.get_function_with_keywords __wrap_namespace "trimtail"
                       [||]
                       (Wrap_utils.keyword_args [("proportiontocut", Wrap_utils.Option.map proportiontocut Py.Float.of_float); ("tail", Wrap_utils.Option.map tail (function
| `Left -> Py.String.of_string "left"
| `Right -> Py.String.of_string "right"
)); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("data", Some(data |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let tsem ?limits ?inclusive ?axis ?ddof ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "tsem"
                       [||]
                       (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
                  let ttest_1samp ?axis ~a ~popmean () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ttest_1samp"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject)); ("popmean", Some(popmean |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `F x -> Py.Float.of_float x
)))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
                  let ttest_ind ?axis ?equal_var ~a ~b () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ttest_ind"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("equal_var", Wrap_utils.Option.map equal_var Py.Bool.of_bool); ("a", Some(a )); ("b", Some(b ))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
                  let ttest_onesamp ?axis ~a ~popmean () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ttest_onesamp"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject)); ("popmean", Some(popmean |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `F x -> Py.Float.of_float x
)))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
                  let ttest_rel ?axis ~a ~b () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ttest_rel"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a )); ("b", Some(b ))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
                  let tvar ?limits ?inclusive ?axis ?ddof ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "tvar"
                       [||]
                       (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
                  let variation ?axis ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "variation"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let winsorize ?limits ?inclusive ?inplace ?axis ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "winsorize"
     [||]
     (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("inplace", Wrap_utils.Option.map inplace Py.Bool.of_bool); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("a", Some(a ))])

                  let zmap ?axis ?ddof ~scores ~compare () =
                     Py.Module.get_function_with_keywords __wrap_namespace "zmap"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("scores", Some(scores |> Np.Obj.to_pyobject)); ("compare", Some(compare |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let zscore ?axis ?ddof ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "zscore"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))

end
module Mstats_basic = struct
let () = Wrap_utils.init ();;
let __wrap_namespace = Py.import "scipy.stats.mstats_basic"

let get_py name = Py.Module.get __wrap_namespace name
module BrunnerMunzelResult = struct
type tag = [`BrunnerMunzelResult]
type t = [`BrunnerMunzelResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "BrunnerMunzelResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module DescribeResult = struct
type tag = [`DescribeResult]
type t = [`DescribeResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~nobs ~minmax ~mean ~variance ~skewness ~kurtosis () =
   Py.Module.get_function_with_keywords __wrap_namespace "DescribeResult"
     [||]
     (Wrap_utils.keyword_args [("nobs", Some(nobs )); ("minmax", Some(minmax )); ("mean", Some(mean )); ("variance", Some(variance )); ("skewness", Some(skewness )); ("kurtosis", Some(kurtosis ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module F_onewayResult = struct
type tag = [`F_onewayResult]
type t = [`F_onewayResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "F_onewayResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module FriedmanchisquareResult = struct
type tag = [`FriedmanchisquareResult]
type t = [`FriedmanchisquareResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "FriedmanchisquareResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module KendalltauResult = struct
type tag = [`KendalltauResult]
type t = [`KendalltauResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~correlation ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "KendalltauResult"
     [||]
     (Wrap_utils.keyword_args [("correlation", Some(correlation )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module KruskalResult = struct
type tag = [`KruskalResult]
type t = [`KruskalResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "KruskalResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module KurtosistestResult = struct
type tag = [`KurtosistestResult]
type t = [`KurtosistestResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "KurtosistestResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module LinregressResult = struct
type tag = [`LinregressResult]
type t = [`LinregressResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~slope ~intercept ~rvalue ~pvalue ~stderr () =
   Py.Module.get_function_with_keywords __wrap_namespace "LinregressResult"
     [||]
     (Wrap_utils.keyword_args [("slope", Some(slope )); ("intercept", Some(intercept )); ("rvalue", Some(rvalue )); ("pvalue", Some(pvalue )); ("stderr", Some(stderr ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module MannwhitneyuResult = struct
type tag = [`MannwhitneyuResult]
type t = [`MannwhitneyuResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "MannwhitneyuResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module ModeResult = struct
type tag = [`ModeResult]
type t = [`ModeResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~mode ~count () =
   Py.Module.get_function_with_keywords __wrap_namespace "ModeResult"
     [||]
     (Wrap_utils.keyword_args [("mode", Some(mode )); ("count", Some(count ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module NormaltestResult = struct
type tag = [`NormaltestResult]
type t = [`NormaltestResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "NormaltestResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module PointbiserialrResult = struct
type tag = [`PointbiserialrResult]
type t = [`Object | `PointbiserialrResult] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~correlation ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "PointbiserialrResult"
     [||]
     (Wrap_utils.keyword_args [("correlation", Some(correlation )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module SkewtestResult = struct
type tag = [`SkewtestResult]
type t = [`Object | `SkewtestResult] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "SkewtestResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module SpearmanrResult = struct
type tag = [`SpearmanrResult]
type t = [`Object | `SpearmanrResult] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~correlation ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "SpearmanrResult"
     [||]
     (Wrap_utils.keyword_args [("correlation", Some(correlation )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Ttest_1sampResult = struct
type tag = [`Ttest_1sampResult]
type t = [`Object | `Ttest_1sampResult] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "Ttest_1sampResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Ttest_indResult = struct
type tag = [`Ttest_indResult]
type t = [`Object | `Ttest_indResult] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "Ttest_indResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Ttest_relResult = struct
type tag = [`Ttest_relResult]
type t = [`Object | `Ttest_relResult] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "Ttest_relResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
let argstoarray args =
   Py.Module.get_function_with_keywords __wrap_namespace "argstoarray"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []

                  let brunnermunzel ?alternative ?distribution ~x ~y () =
                     Py.Module.get_function_with_keywords __wrap_namespace "brunnermunzel"
                       [||]
                       (Wrap_utils.keyword_args [("alternative", Wrap_utils.Option.map alternative (function
| `Less -> Py.String.of_string "less"
| `Two_sided -> Py.String.of_string "two-sided"
| `Greater -> Py.String.of_string "greater"
)); ("distribution", Wrap_utils.Option.map distribution (function
| `T -> Py.String.of_string "t"
| `Normal -> Py.String.of_string "normal"
)); ("x", Some(x )); ("y", Some(y ))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let count_tied_groups ?use_missing ~x () =
   Py.Module.get_function_with_keywords __wrap_namespace "count_tied_groups"
     [||]
     (Wrap_utils.keyword_args [("use_missing", Wrap_utils.Option.map use_missing Py.Bool.of_bool); ("x", Some(x ))])

                  let describe ?axis ?ddof ?bias ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "describe"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("bias", Wrap_utils.Option.map bias Py.Bool.of_bool); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Int.to_int (Py.Tuple.get x 0)), ((fun x -> ((Py.Int.to_int (Py.Tuple.get x 0)), (Py.Int.to_int (Py.Tuple.get x 1)))) (Py.Tuple.get x 1)), (Py.Float.to_float (Py.Tuple.get x 2)), (Py.Float.to_float (Py.Tuple.get x 3)), (Py.Float.to_float (Py.Tuple.get x 4)), (Py.Float.to_float (Py.Tuple.get x 5))))
let f_oneway args =
   Py.Module.get_function_with_keywords __wrap_namespace "f_oneway"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let find_repeats arr =
   Py.Module.get_function_with_keywords __wrap_namespace "find_repeats"
     [||]
     (Wrap_utils.keyword_args [("arr", Some(arr ))])
     |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1))))
let friedmanchisquare args =
   Py.Module.get_function_with_keywords __wrap_namespace "friedmanchisquare"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let iteritems d =
   Py.Module.get_function_with_keywords __wrap_namespace "iteritems"
     [||]
     (Wrap_utils.keyword_args [("d", Some(d ))])

                  let kendalltau ?use_ties ?use_missing ?method_ ~x ~y () =
                     Py.Module.get_function_with_keywords __wrap_namespace "kendalltau"
                       [||]
                       (Wrap_utils.keyword_args [("use_ties", Wrap_utils.Option.map use_ties Py.Bool.of_bool); ("use_missing", Wrap_utils.Option.map use_missing Py.Bool.of_bool); ("method", Wrap_utils.Option.map method_ (function
| `Auto -> Py.String.of_string "auto"
| `Asymptotic -> Py.String.of_string "asymptotic"
| `Exact -> Py.String.of_string "exact"
)); ("x", Some(x )); ("y", Some(y ))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let kendalltau_seasonal x =
   Py.Module.get_function_with_keywords __wrap_namespace "kendalltau_seasonal"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x ))])

let kruskal args =
   Py.Module.get_function_with_keywords __wrap_namespace "kruskal"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let kruskalwallis args =
   Py.Module.get_function_with_keywords __wrap_namespace "kruskalwallis"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let ks_2samp ?alternative ~data1 ~data2 () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ks_2samp"
                       [||]
                       (Wrap_utils.keyword_args [("alternative", Wrap_utils.Option.map alternative (function
| `Two_sided -> Py.String.of_string "two-sided"
| `Less -> Py.String.of_string "less"
| `Greater -> Py.String.of_string "greater"
)); ("data1", Some(data1 |> Np.Obj.to_pyobject)); ("data2", Some(data2 |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let ks_twosamp ?alternative ~data1 ~data2 () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ks_twosamp"
                       [||]
                       (Wrap_utils.keyword_args [("alternative", Wrap_utils.Option.map alternative (function
| `Two_sided -> Py.String.of_string "two-sided"
| `Less -> Py.String.of_string "less"
| `Greater -> Py.String.of_string "greater"
)); ("data1", Some(data1 |> Np.Obj.to_pyobject)); ("data2", Some(data2 |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let kurtosis ?axis ?fisher ?bias ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "kurtosis"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("fisher", Wrap_utils.Option.map fisher Py.Bool.of_bool); ("bias", Wrap_utils.Option.map bias Py.Bool.of_bool); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let kurtosistest ?axis ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "kurtosistest"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let linregress ?y ~x () =
   Py.Module.get_function_with_keywords __wrap_namespace "linregress"
     [||]
     (Wrap_utils.keyword_args [("y", y); ("x", Some(x ))])

let mannwhitneyu ?use_continuity ~x ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "mannwhitneyu"
     [||]
     (Wrap_utils.keyword_args [("use_continuity", Wrap_utils.Option.map use_continuity Py.Bool.of_bool); ("x", Some(x )); ("y", Some(y ))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let meppf ?alpha ?beta ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "meppf"
     [||]
     (Wrap_utils.keyword_args [("alpha", Wrap_utils.Option.map alpha Py.Float.of_float); ("beta", Wrap_utils.Option.map beta Py.Float.of_float); ("data", Some(data |> Np.Obj.to_pyobject))])

                  let mode ?axis ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "mode"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1))))
                  let moment ?moment ?axis ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "moment"
                       [||]
                       (Wrap_utils.keyword_args [("moment", Wrap_utils.Option.map moment Py.Int.of_int); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject))])

let mquantiles ?prob ?alphap ?betap ?axis ?limit ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "mquantiles"
     [||]
     (Wrap_utils.keyword_args [("prob", Wrap_utils.Option.map prob Np.Obj.to_pyobject); ("alphap", Wrap_utils.Option.map alphap Py.Float.of_float); ("betap", Wrap_utils.Option.map betap Py.Float.of_float); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("limit", limit); ("a", Some(a |> Np.Obj.to_pyobject))])

let msign x =
   Py.Module.get_function_with_keywords __wrap_namespace "msign"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x ))])

let namedtuple ?rename ?defaults ?module_ ~typename ~field_names () =
   Py.Module.get_function_with_keywords __wrap_namespace "namedtuple"
     [||]
     (Wrap_utils.keyword_args [("rename", rename); ("defaults", defaults); ("module", module_); ("typename", Some(typename )); ("field_names", Some(field_names ))])

                  let normaltest ?axis ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "normaltest"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
let obrientransform args =
   Py.Module.get_function_with_keywords __wrap_namespace "obrientransform"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []

let pearsonr ~x ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "pearsonr"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x )); ("y", Some(y ))])
     |> Py.Float.to_float
let plotting_positions ?alpha ?beta ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "plotting_positions"
     [||]
     (Wrap_utils.keyword_args [("alpha", Wrap_utils.Option.map alpha Py.Float.of_float); ("beta", Wrap_utils.Option.map beta Py.Float.of_float); ("data", Some(data |> Np.Obj.to_pyobject))])

let pointbiserialr ~x ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "pointbiserialr"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x )); ("y", Some(y |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let rankdata ?axis ?use_missing ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "rankdata"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("use_missing", Wrap_utils.Option.map use_missing Py.Bool.of_bool); ("data", Some(data ))])

let scoreatpercentile ?limit ?alphap ?betap ~data ~per () =
   Py.Module.get_function_with_keywords __wrap_namespace "scoreatpercentile"
     [||]
     (Wrap_utils.keyword_args [("limit", limit); ("alphap", alphap); ("betap", betap); ("data", Some(data )); ("per", Some(per ))])

                  let sem ?axis ?ddof ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "sem"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("a", Some(a |> Np.Obj.to_pyobject))])

let sen_seasonal_slopes x =
   Py.Module.get_function_with_keywords __wrap_namespace "sen_seasonal_slopes"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x ))])

                  let siegelslopes ?x ?method_ ~y () =
                     Py.Module.get_function_with_keywords __wrap_namespace "siegelslopes"
                       [||]
                       (Wrap_utils.keyword_args [("x", Wrap_utils.Option.map x Np.Obj.to_pyobject); ("method", Wrap_utils.Option.map method_ (function
| `Hierarchical -> Py.String.of_string "hierarchical"
| `Separate -> Py.String.of_string "separate"
)); ("y", Some(y |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let skew ?axis ?bias ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "skew"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("bias", Wrap_utils.Option.map bias Py.Bool.of_bool); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let skewtest ?axis ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "skewtest"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let spearmanr ?y ?use_ties ?axis ?nan_policy ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "spearmanr"
                       [||]
                       (Wrap_utils.keyword_args [("y", y); ("use_ties", Wrap_utils.Option.map use_ties Py.Bool.of_bool); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("x", Some(x ))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let stats_linregress ?y ~x () =
   Py.Module.get_function_with_keywords __wrap_namespace "stats_linregress"
     [||]
     (Wrap_utils.keyword_args [("y", y); ("x", Some(x ))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1)), (Py.Float.to_float (Py.Tuple.get x 2)), (Py.Float.to_float (Py.Tuple.get x 3)), (Py.Float.to_float (Py.Tuple.get x 4))))
                  let stats_siegelslopes ?x ?method_ ~y () =
                     Py.Module.get_function_with_keywords __wrap_namespace "stats_siegelslopes"
                       [||]
                       (Wrap_utils.keyword_args [("x", Wrap_utils.Option.map x Np.Obj.to_pyobject); ("method", Wrap_utils.Option.map method_ (function
| `Hierarchical -> Py.String.of_string "hierarchical"
| `Separate -> Py.String.of_string "separate"
)); ("y", Some(y |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let stats_theilslopes ?x ?alpha ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "stats_theilslopes"
     [||]
     (Wrap_utils.keyword_args [("x", Wrap_utils.Option.map x Np.Obj.to_pyobject); ("alpha", Wrap_utils.Option.map alpha Py.Float.of_float); ("y", Some(y |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1)), (Py.Float.to_float (Py.Tuple.get x 2)), (Py.Float.to_float (Py.Tuple.get x 3))))
let stde_median ?axis ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "stde_median"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("data", Some(data |> Np.Obj.to_pyobject))])

let theilslopes ?x ?alpha ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "theilslopes"
     [||]
     (Wrap_utils.keyword_args [("x", Wrap_utils.Option.map x Np.Obj.to_pyobject); ("alpha", Wrap_utils.Option.map alpha Py.Float.of_float); ("y", Some(y |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1)), (Py.Float.to_float (Py.Tuple.get x 2)), (Py.Float.to_float (Py.Tuple.get x 3))))
                  let tmax ?upperlimit ?axis ?inclusive ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "tmax"
                       [||]
                       (Wrap_utils.keyword_args [("upperlimit", Wrap_utils.Option.map upperlimit Py.Float.of_float); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("inclusive", Wrap_utils.Option.map inclusive Py.Bool.of_bool); ("a", Some(a |> Np.Obj.to_pyobject))])

let tmean ?limits ?inclusive ?axis ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "tmean"
     [||]
     (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("a", Some(a |> Np.Obj.to_pyobject))])
     |> Py.Float.to_float
                  let tmin ?lowerlimit ?axis ?inclusive ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "tmin"
                       [||]
                       (Wrap_utils.keyword_args [("lowerlimit", Wrap_utils.Option.map lowerlimit Py.Float.of_float); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("inclusive", Wrap_utils.Option.map inclusive Py.Bool.of_bool); ("a", Some(a |> Np.Obj.to_pyobject))])

let trim ?limits ?inclusive ?relative ?axis ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "trim"
     [||]
     (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("relative", Wrap_utils.Option.map relative Py.Bool.of_bool); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("a", Some(a ))])

                  let trim1 ?proportiontocut ?tail ?inclusive ?axis ~data () =
                     Py.Module.get_function_with_keywords __wrap_namespace "trim1"
                       [||]
                       (Wrap_utils.keyword_args [("proportiontocut", Wrap_utils.Option.map proportiontocut Py.Float.of_float); ("tail", Wrap_utils.Option.map tail (function
| `Left -> Py.String.of_string "left"
| `Right -> Py.String.of_string "right"
)); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("data", Some(data |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let trima ?limits ?inclusive ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "trima"
     [||]
     (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("a", Some(a |> Np.Obj.to_pyobject))])

let trimboth ?proportiontocut ?inclusive ?axis ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "trimboth"
     [||]
     (Wrap_utils.keyword_args [("proportiontocut", Wrap_utils.Option.map proportiontocut Py.Float.of_float); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("data", Some(data |> Np.Obj.to_pyobject))])

                  let trimmed_mean ?limits ?inclusive ?relative ?axis ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "trimmed_mean"
                       [||]
                       (Wrap_utils.keyword_args [("limits", Wrap_utils.Option.map limits (function
| `Tuple x -> Wrap_utils.id x
| `None -> Py.none
)); ("inclusive", inclusive); ("relative", Wrap_utils.Option.map relative Py.Bool.of_bool); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("a", Some(a ))])

                  let trimmed_std ?limits ?inclusive ?relative ?axis ?ddof ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "trimmed_std"
                       [||]
                       (Wrap_utils.keyword_args [("limits", Wrap_utils.Option.map limits (function
| `Tuple x -> Wrap_utils.id x
| `None -> Py.none
)); ("inclusive", inclusive); ("relative", Wrap_utils.Option.map relative Py.Bool.of_bool); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("ddof", Wrap_utils.Option.map ddof (function
| `Zero -> Py.Int.of_int 0
| `I x -> Py.Int.of_int x
)); ("a", Some(a ))])

let trimmed_stde ?limits ?inclusive ?axis ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "trimmed_stde"
     [||]
     (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("a", Some(a ))])

                  let trimmed_var ?limits ?inclusive ?relative ?axis ?ddof ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "trimmed_var"
                       [||]
                       (Wrap_utils.keyword_args [("limits", Wrap_utils.Option.map limits (function
| `Tuple x -> Wrap_utils.id x
| `None -> Py.none
)); ("inclusive", inclusive); ("relative", Wrap_utils.Option.map relative Py.Bool.of_bool); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("ddof", Wrap_utils.Option.map ddof (function
| `Zero -> Py.Int.of_int 0
| `I x -> Py.Int.of_int x
)); ("a", Some(a ))])

let trimr ?limits ?inclusive ?axis ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "trimr"
     [||]
     (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("a", Some(a ))])

                  let trimtail ?proportiontocut ?tail ?inclusive ?axis ~data () =
                     Py.Module.get_function_with_keywords __wrap_namespace "trimtail"
                       [||]
                       (Wrap_utils.keyword_args [("proportiontocut", Wrap_utils.Option.map proportiontocut Py.Float.of_float); ("tail", Wrap_utils.Option.map tail (function
| `Left -> Py.String.of_string "left"
| `Right -> Py.String.of_string "right"
)); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("data", Some(data |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let tsem ?limits ?inclusive ?axis ?ddof ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "tsem"
                       [||]
                       (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
                  let ttest_1samp ?axis ~a ~popmean () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ttest_1samp"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject)); ("popmean", Some(popmean |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `F x -> Py.Float.of_float x
)))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
                  let ttest_ind ?axis ?equal_var ~a ~b () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ttest_ind"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("equal_var", Wrap_utils.Option.map equal_var Py.Bool.of_bool); ("a", Some(a )); ("b", Some(b ))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
                  let ttest_onesamp ?axis ~a ~popmean () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ttest_onesamp"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject)); ("popmean", Some(popmean |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `F x -> Py.Float.of_float x
)))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
                  let ttest_rel ?axis ~a ~b () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ttest_rel"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a )); ("b", Some(b ))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
                  let tvar ?limits ?inclusive ?axis ?ddof ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "tvar"
                       [||]
                       (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
                  let variation ?axis ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "variation"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let winsorize ?limits ?inclusive ?inplace ?axis ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "winsorize"
     [||]
     (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("inplace", Wrap_utils.Option.map inplace Py.Bool.of_bool); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("a", Some(a ))])


end
module Mstats_extras = struct
let () = Wrap_utils.init ();;
let __wrap_namespace = Py.import "scipy.stats.mstats_extras"

let get_py name = Py.Module.get __wrap_namespace name
module MaskedArray = struct
type tag = [`MaskedArray]
type t = [`ArrayLike | `MaskedArray | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
                  let create ?data ?mask ?dtype ?copy ?subok ?ndmin ?fill_value ?keep_mask ?hard_mask ?shrink ?order ?options () =
                     Py.Module.get_function_with_keywords __wrap_namespace "MaskedArray"
                       [||]
                       (List.rev_append (Wrap_utils.keyword_args [("data", Wrap_utils.Option.map data Np.Obj.to_pyobject); ("mask", mask); ("dtype", Wrap_utils.Option.map dtype Np.Dtype.to_pyobject); ("copy", Wrap_utils.Option.map copy Py.Bool.of_bool); ("subok", Wrap_utils.Option.map subok Py.Bool.of_bool); ("ndmin", Wrap_utils.Option.map ndmin Py.Int.of_int); ("fill_value", Wrap_utils.Option.map fill_value (function
| `Bool x -> Py.Bool.of_bool x
| `S x -> Py.String.of_string x
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
)); ("keep_mask", Wrap_utils.Option.map keep_mask Py.Bool.of_bool); ("hard_mask", Wrap_utils.Option.map hard_mask Py.Bool.of_bool); ("shrink", Wrap_utils.Option.map shrink Py.Bool.of_bool); ("order", Wrap_utils.Option.map order (function
| `F -> Py.String.of_string "F"
| `A -> Py.String.of_string "A"
| `C -> Py.String.of_string "C"
))]) (match options with None -> [] | Some x -> x))
                       |> of_pyobject
let __getitem__ ~indx self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     [||]
     (Wrap_utils.keyword_args [("indx", Some(indx ))])

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let __setitem__ ~indx ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__setitem__"
     [||]
     (Wrap_utils.keyword_args [("indx", Some(indx )); ("value", Some(value ))])

let all ?axis ?out ?keepdims self =
   Py.Module.get_function_with_keywords (to_pyobject self) "all"
     [||]
     (Wrap_utils.keyword_args [("axis", axis); ("out", out); ("keepdims", keepdims)])

let anom ?axis ?dtype self =
   Py.Module.get_function_with_keywords (to_pyobject self) "anom"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("dtype", Wrap_utils.Option.map dtype Np.Dtype.to_pyobject)])

let any ?axis ?out ?keepdims self =
   Py.Module.get_function_with_keywords (to_pyobject self) "any"
     [||]
     (Wrap_utils.keyword_args [("axis", axis); ("out", out); ("keepdims", keepdims)])

let argmax ?axis ?fill_value ?out self =
   Py.Module.get_function_with_keywords (to_pyobject self) "argmax"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("fill_value", fill_value); ("out", Wrap_utils.Option.map out Np.Obj.to_pyobject)])

let argmin ?axis ?fill_value ?out self =
   Py.Module.get_function_with_keywords (to_pyobject self) "argmin"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("fill_value", fill_value); ("out", Wrap_utils.Option.map out Np.Obj.to_pyobject)])

let argpartition ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "argpartition"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

                  let argsort ?axis ?kind ?order ?endwith ?fill_value self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "argsort"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("kind", Wrap_utils.Option.map kind (function
| `Stable -> Py.String.of_string "stable"
| `Quicksort -> Py.String.of_string "quicksort"
| `Heapsort -> Py.String.of_string "heapsort"
| `Mergesort -> Py.String.of_string "mergesort"
)); ("order", Wrap_utils.Option.map order Np.Obj.to_pyobject); ("endwith", Wrap_utils.Option.map endwith Py.Bool.of_bool); ("fill_value", fill_value)])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let astype ?order ?casting ?subok ?copy ~dtype self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "astype"
                       [||]
                       (Wrap_utils.keyword_args [("order", Wrap_utils.Option.map order (function
| `C -> Py.String.of_string "C"
| `F -> Py.String.of_string "F"
| `A -> Py.String.of_string "A"
| `K -> Py.String.of_string "K"
)); ("casting", Wrap_utils.Option.map casting (function
| `No -> Py.String.of_string "no"
| `Equiv -> Py.String.of_string "equiv"
| `Safe -> Py.String.of_string "safe"
| `Same_kind -> Py.String.of_string "same_kind"
| `Unsafe -> Py.String.of_string "unsafe"
)); ("subok", subok); ("copy", Wrap_utils.Option.map copy Py.Bool.of_bool); ("dtype", Some(dtype |> (function
| `S x -> Py.String.of_string x
| `Dtype x -> Np.Dtype.to_pyobject x
)))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let byteswap ?inplace self =
   Py.Module.get_function_with_keywords (to_pyobject self) "byteswap"
     [||]
     (Wrap_utils.keyword_args [("inplace", Wrap_utils.Option.map inplace Py.Bool.of_bool)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let choose ?out ?mode ~choices self =
   Py.Module.get_function_with_keywords (to_pyobject self) "choose"
     [||]
     (Wrap_utils.keyword_args [("out", out); ("mode", mode); ("choices", Some(choices ))])

let clip ?min ?max ?out ?kwargs self =
   Py.Module.get_function_with_keywords (to_pyobject self) "clip"
     [||]
     (List.rev_append (Wrap_utils.keyword_args [("min", min); ("max", max); ("out", out)]) (match kwargs with None -> [] | Some x -> x))

let compress ?axis ?out ~condition self =
   Py.Module.get_function_with_keywords (to_pyobject self) "compress"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("out", out); ("condition", Some(condition ))])

let compressed self =
   Py.Module.get_function_with_keywords (to_pyobject self) "compressed"
     [||]
     []
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let copy ?params args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "copy"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match params with None -> [] | Some x -> x)

let count ?axis ?keepdims self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (fun ml -> Py.Tuple.of_list_map Py.Int.of_int ml)); ("keepdims", Wrap_utils.Option.map keepdims Py.Bool.of_bool)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let cumprod ?axis ?dtype ?out self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cumprod"
     [||]
     (Wrap_utils.keyword_args [("axis", axis); ("dtype", dtype); ("out", out)])

let cumsum ?axis ?dtype ?out self =
   Py.Module.get_function_with_keywords (to_pyobject self) "cumsum"
     [||]
     (Wrap_utils.keyword_args [("axis", axis); ("dtype", dtype); ("out", out)])

let diagonal ?params args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "diagonal"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match params with None -> [] | Some x -> x)

let dot ?out ?strict ~b self =
   Py.Module.get_function_with_keywords (to_pyobject self) "dot"
     [||]
     (Wrap_utils.keyword_args [("out", out); ("strict", Wrap_utils.Option.map strict Py.Bool.of_bool); ("b", Some(b ))])

                  let dump ~file self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "dump"
                       [||]
                       (Wrap_utils.keyword_args [("file", Some(file |> (function
| `S x -> Py.String.of_string x
| `Path x -> Wrap_utils.id x
)))])

                  let fill ~value self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "fill"
                       [||]
                       (Wrap_utils.keyword_args [("value", Some(value |> (function
| `F x -> Py.Float.of_float x
| `I x -> Py.Int.of_int x
| `Bool x -> Py.Bool.of_bool x
| `S x -> Py.String.of_string x
)))])

let filled ?fill_value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "filled"
     [||]
     (Wrap_utils.keyword_args [("fill_value", Wrap_utils.Option.map fill_value Np.Obj.to_pyobject)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let flatten ?params args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "flatten"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match params with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let get_fill_value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "get_fill_value"
     [||]
     []

let get_imag self =
   Py.Module.get_function_with_keywords (to_pyobject self) "get_imag"
     [||]
     []

let get_real self =
   Py.Module.get_function_with_keywords (to_pyobject self) "get_real"
     [||]
     []

                  let getfield ?offset ~dtype self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "getfield"
                       [||]
                       (Wrap_utils.keyword_args [("offset", Wrap_utils.Option.map offset Py.Int.of_int); ("dtype", Some(dtype |> (function
| `S x -> Py.String.of_string x
| `Dtype x -> Np.Dtype.to_pyobject x
)))])

let harden_mask self =
   Py.Module.get_function_with_keywords (to_pyobject self) "harden_mask"
     [||]
     []

let ids self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ids"
     [||]
     []

let iscontiguous self =
   Py.Module.get_function_with_keywords (to_pyobject self) "iscontiguous"
     [||]
     []

let item args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "item"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []

let itemset args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "itemset"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []

let max ?axis ?out ?fill_value ?keepdims self =
   Py.Module.get_function_with_keywords (to_pyobject self) "max"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("out", Wrap_utils.Option.map out Np.Obj.to_pyobject); ("fill_value", fill_value); ("keepdims", Wrap_utils.Option.map keepdims Py.Bool.of_bool)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mean ?axis ?dtype ?out ?keepdims self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mean"
     [||]
     (Wrap_utils.keyword_args [("axis", axis); ("dtype", dtype); ("out", out); ("keepdims", keepdims)])

let min ?axis ?out ?fill_value ?keepdims self =
   Py.Module.get_function_with_keywords (to_pyobject self) "min"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("out", Wrap_utils.Option.map out Np.Obj.to_pyobject); ("fill_value", fill_value); ("keepdims", Wrap_utils.Option.map keepdims Py.Bool.of_bool)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let mini ?axis self =
   Py.Module.get_function_with_keywords (to_pyobject self) "mini"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int)])

let newbyteorder ?new_order self =
   Py.Module.get_function_with_keywords (to_pyobject self) "newbyteorder"
     [||]
     (Wrap_utils.keyword_args [("new_order", Wrap_utils.Option.map new_order Py.String.of_string)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let nonzero self =
   Py.Module.get_function_with_keywords (to_pyobject self) "nonzero"
     [||]
     []

let partition ?kwargs args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "partition"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)

let prod ?axis ?dtype ?out ?keepdims self =
   Py.Module.get_function_with_keywords (to_pyobject self) "prod"
     [||]
     (Wrap_utils.keyword_args [("axis", axis); ("dtype", dtype); ("out", out); ("keepdims", keepdims)])

let ptp ?axis ?out ?fill_value ?keepdims self =
   Py.Module.get_function_with_keywords (to_pyobject self) "ptp"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("out", Wrap_utils.Option.map out Np.Obj.to_pyobject); ("fill_value", fill_value); ("keepdims", Wrap_utils.Option.map keepdims Py.Bool.of_bool)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let put ?mode ~indices ~values self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "put"
                       [||]
                       (Wrap_utils.keyword_args [("mode", Wrap_utils.Option.map mode (function
| `Raise -> Py.String.of_string "raise"
| `Wrap -> Py.String.of_string "wrap"
| `Clip -> Py.String.of_string "clip"
)); ("indices", Some(indices )); ("values", Some(values |> Np.Obj.to_pyobject))])

                  let ravel ?order self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "ravel"
                       [||]
                       (Wrap_utils.keyword_args [("order", Wrap_utils.Option.map order (function
| `C -> Py.String.of_string "C"
| `F -> Py.String.of_string "F"
| `A -> Py.String.of_string "A"
| `K -> Py.String.of_string "K"
))])

let repeat ?params args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "repeat"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match params with None -> [] | Some x -> x)

let reshape ?kwargs s self =
   Py.Module.get_function_with_keywords (to_pyobject self) "reshape"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id s)])
     (match kwargs with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let resize ?refcheck ?order ~newshape self =
   Py.Module.get_function_with_keywords (to_pyobject self) "resize"
     [||]
     (Wrap_utils.keyword_args [("refcheck", refcheck); ("order", order); ("newshape", Some(newshape ))])

let round ?decimals ?out self =
   Py.Module.get_function_with_keywords (to_pyobject self) "round"
     [||]
     (Wrap_utils.keyword_args [("decimals", decimals); ("out", out)])

let searchsorted ?side ?sorter ~v self =
   Py.Module.get_function_with_keywords (to_pyobject self) "searchsorted"
     [||]
     (Wrap_utils.keyword_args [("side", side); ("sorter", sorter); ("v", Some(v ))])

let set_fill_value ?value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "set_fill_value"
     [||]
     (Wrap_utils.keyword_args [("value", value)])

let setfield ?offset ~val_ ~dtype self =
   Py.Module.get_function_with_keywords (to_pyobject self) "setfield"
     [||]
     (Wrap_utils.keyword_args [("offset", Wrap_utils.Option.map offset Py.Int.of_int); ("val", Some(val_ )); ("dtype", Some(dtype ))])

let setflags ?write ?align ?uic self =
   Py.Module.get_function_with_keywords (to_pyobject self) "setflags"
     [||]
     (Wrap_utils.keyword_args [("write", Wrap_utils.Option.map write Py.Bool.of_bool); ("align", Wrap_utils.Option.map align Py.Bool.of_bool); ("uic", Wrap_utils.Option.map uic Py.Bool.of_bool)])

let shrink_mask self =
   Py.Module.get_function_with_keywords (to_pyobject self) "shrink_mask"
     [||]
     []

let soften_mask self =
   Py.Module.get_function_with_keywords (to_pyobject self) "soften_mask"
     [||]
     []

                  let sort ?axis ?kind ?order ?endwith ?fill_value self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "sort"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("kind", Wrap_utils.Option.map kind (function
| `Stable -> Py.String.of_string "stable"
| `Quicksort -> Py.String.of_string "quicksort"
| `Heapsort -> Py.String.of_string "heapsort"
| `Mergesort -> Py.String.of_string "mergesort"
)); ("order", Wrap_utils.Option.map order Np.Obj.to_pyobject); ("endwith", Wrap_utils.Option.map endwith Py.Bool.of_bool); ("fill_value", fill_value)])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let squeeze ?params args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "squeeze"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match params with None -> [] | Some x -> x)

let std ?axis ?dtype ?out ?ddof ?keepdims self =
   Py.Module.get_function_with_keywords (to_pyobject self) "std"
     [||]
     (Wrap_utils.keyword_args [("axis", axis); ("dtype", dtype); ("out", out); ("ddof", ddof); ("keepdims", keepdims)])

let sum ?axis ?dtype ?out ?keepdims self =
   Py.Module.get_function_with_keywords (to_pyobject self) "sum"
     [||]
     (Wrap_utils.keyword_args [("axis", axis); ("dtype", dtype); ("out", out); ("keepdims", keepdims)])

let swapaxes ?params args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "swapaxes"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match params with None -> [] | Some x -> x)

let take ?axis ?out ?mode ~indices self =
   Py.Module.get_function_with_keywords (to_pyobject self) "take"
     [||]
     (Wrap_utils.keyword_args [("axis", axis); ("out", out); ("mode", mode); ("indices", Some(indices ))])

                  let tobytes ?fill_value ?order self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "tobytes"
                       [||]
                       (Wrap_utils.keyword_args [("fill_value", Wrap_utils.Option.map fill_value (function
| `Bool x -> Py.Bool.of_bool x
| `S x -> Py.String.of_string x
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
)); ("order", Wrap_utils.Option.map order (function
| `C -> Py.String.of_string "C"
| `F -> Py.String.of_string "F"
| `A -> Py.String.of_string "A"
))])

let tofile ?sep ?format ~fid self =
   Py.Module.get_function_with_keywords (to_pyobject self) "tofile"
     [||]
     (Wrap_utils.keyword_args [("sep", sep); ("format", format); ("fid", Some(fid ))])

let toflex self =
   Py.Module.get_function_with_keywords (to_pyobject self) "toflex"
     [||]
     []
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let tolist ?fill_value self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "tolist"
                       [||]
                       (Wrap_utils.keyword_args [("fill_value", Wrap_utils.Option.map fill_value (function
| `Bool x -> Py.Bool.of_bool x
| `S x -> Py.String.of_string x
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let tostring ?fill_value ?order self =
   Py.Module.get_function_with_keywords (to_pyobject self) "tostring"
     [||]
     (Wrap_utils.keyword_args [("fill_value", fill_value); ("order", order)])

let trace ?offset ?axis1 ?axis2 ?dtype ?out self =
   Py.Module.get_function_with_keywords (to_pyobject self) "trace"
     [||]
     (Wrap_utils.keyword_args [("offset", offset); ("axis1", axis1); ("axis2", axis2); ("dtype", dtype); ("out", out)])

let transpose ?params args self =
   Py.Module.get_function_with_keywords (to_pyobject self) "transpose"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match params with None -> [] | Some x -> x)
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let unshare_mask self =
   Py.Module.get_function_with_keywords (to_pyobject self) "unshare_mask"
     [||]
     []

let var ?axis ?dtype ?out ?ddof ?keepdims self =
   Py.Module.get_function_with_keywords (to_pyobject self) "var"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (fun ml -> Py.Tuple.of_list_map Py.Int.of_int ml)); ("dtype", Wrap_utils.Option.map dtype Np.Dtype.to_pyobject); ("out", Wrap_utils.Option.map out Np.Obj.to_pyobject); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("keepdims", Wrap_utils.Option.map keepdims Py.Bool.of_bool)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let view ?dtype ?type_ ?fill_value self =
                     Py.Module.get_function_with_keywords (to_pyobject self) "view"
                       [||]
                       (Wrap_utils.keyword_args [("dtype", Wrap_utils.Option.map dtype (function
| `Ndarray_sub_class x -> Wrap_utils.id x
| `Dtype x -> Np.Dtype.to_pyobject x
)); ("type", type_); ("fill_value", Wrap_utils.Option.map fill_value (function
| `Bool x -> Py.Bool.of_bool x
| `S x -> Py.String.of_string x
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
))])

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
let beta ?loc ?scale ~a ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "beta"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Beta_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let binom ?loc ~n ~p () =
   Py.Module.get_function_with_keywords __wrap_namespace "binom"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("n", Some(n )); ("p", Some(p ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Binom_gen|`Object|`Rv_discrete|`Rv_generic] Np.Obj.t))
let compare_medians_ms ?axis ~group_1 ~group_2 () =
   Py.Module.get_function_with_keywords __wrap_namespace "compare_medians_ms"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("group_1", Some(group_1 |> Np.Obj.to_pyobject)); ("group_2", Some(group_2 |> Np.Obj.to_pyobject))])

let hdmedian ?axis ?var ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "hdmedian"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("var", Wrap_utils.Option.map var Py.Bool.of_bool); ("data", Some(data |> Np.Obj.to_pyobject))])

let hdquantiles ?prob ?axis ?var ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "hdquantiles"
     [||]
     (Wrap_utils.keyword_args [("prob", prob); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("var", Wrap_utils.Option.map var Py.Bool.of_bool); ("data", Some(data |> Np.Obj.to_pyobject))])

let hdquantiles_sd ?prob ?axis ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "hdquantiles_sd"
     [||]
     (Wrap_utils.keyword_args [("prob", prob); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("data", Some(data |> Np.Obj.to_pyobject))])

let idealfourths ?axis ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "idealfourths"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("data", Some(data |> Np.Obj.to_pyobject))])

let median_cihs ?alpha ?axis ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "median_cihs"
     [||]
     (Wrap_utils.keyword_args [("alpha", Wrap_utils.Option.map alpha Py.Float.of_float); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("data", Some(data |> Np.Obj.to_pyobject))])

let mjci ?prob ?axis ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "mjci"
     [||]
     (Wrap_utils.keyword_args [("prob", prob); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("data", Some(data |> Np.Obj.to_pyobject))])

let mquantiles_cimj ?prob ?alpha ?axis ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "mquantiles_cimj"
     [||]
     (Wrap_utils.keyword_args [("prob", prob); ("alpha", Wrap_utils.Option.map alpha Py.Float.of_float); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1))))
let norm ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "norm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Norm_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let rsh ?points ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "rsh"
     [||]
     (Wrap_utils.keyword_args [("points", points); ("data", Some(data ))])

let t ?loc ?scale ~df () =
   Py.Module.get_function_with_keywords __wrap_namespace "t"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("df", Some(df ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`T_gen] Np.Obj.t))
                  let trimmed_mean_ci ?limits ?inclusive ?alpha ?axis ~data () =
                     Py.Module.get_function_with_keywords __wrap_namespace "trimmed_mean_ci"
                       [||]
                       (Wrap_utils.keyword_args [("limits", Wrap_utils.Option.map limits (function
| `Tuple x -> Wrap_utils.id x
| `None -> Py.none
)); ("inclusive", inclusive); ("alpha", Wrap_utils.Option.map alpha Py.Float.of_float); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("data", Some(data |> Np.Obj.to_pyobject))])


end
module Mvn = struct
let () = Wrap_utils.init ();;
let __wrap_namespace = Py.import "scipy.stats.mvn"

let get_py name = Py.Module.get __wrap_namespace name

end
module Statlib = struct
let () = Wrap_utils.init ();;
let __wrap_namespace = Py.import "scipy.stats.statlib"

let get_py name = Py.Module.get __wrap_namespace name

end
module Stats = struct
let () = Wrap_utils.init ();;
let __wrap_namespace = Py.import "scipy.stats.stats"

let get_py name = Py.Module.get __wrap_namespace name
module BrunnerMunzelResult = struct
type tag = [`BrunnerMunzelResult]
type t = [`BrunnerMunzelResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "BrunnerMunzelResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module CumfreqResult = struct
type tag = [`CumfreqResult]
type t = [`CumfreqResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~cumcount ~lowerlimit ~binsize ~extrapoints () =
   Py.Module.get_function_with_keywords __wrap_namespace "CumfreqResult"
     [||]
     (Wrap_utils.keyword_args [("cumcount", Some(cumcount )); ("lowerlimit", Some(lowerlimit )); ("binsize", Some(binsize )); ("extrapoints", Some(extrapoints ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module DescribeResult = struct
type tag = [`DescribeResult]
type t = [`DescribeResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~nobs ~minmax ~mean ~variance ~skewness ~kurtosis () =
   Py.Module.get_function_with_keywords __wrap_namespace "DescribeResult"
     [||]
     (Wrap_utils.keyword_args [("nobs", Some(nobs )); ("minmax", Some(minmax )); ("mean", Some(mean )); ("variance", Some(variance )); ("skewness", Some(skewness )); ("kurtosis", Some(kurtosis ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module F_onewayResult = struct
type tag = [`F_onewayResult]
type t = [`F_onewayResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "F_onewayResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module FriedmanchisquareResult = struct
type tag = [`FriedmanchisquareResult]
type t = [`FriedmanchisquareResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "FriedmanchisquareResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module HistogramResult = struct
type tag = [`HistogramResult]
type t = [`HistogramResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~count ~lowerlimit ~binsize ~extrapoints () =
   Py.Module.get_function_with_keywords __wrap_namespace "HistogramResult"
     [||]
     (Wrap_utils.keyword_args [("count", Some(count )); ("lowerlimit", Some(lowerlimit )); ("binsize", Some(binsize )); ("extrapoints", Some(extrapoints ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module KendalltauResult = struct
type tag = [`KendalltauResult]
type t = [`KendalltauResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~correlation ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "KendalltauResult"
     [||]
     (Wrap_utils.keyword_args [("correlation", Some(correlation )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module KruskalResult = struct
type tag = [`KruskalResult]
type t = [`KruskalResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "KruskalResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Ks_2sampResult = struct
type tag = [`Ks_2sampResult]
type t = [`Ks_2sampResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "Ks_2sampResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module KstestResult = struct
type tag = [`KstestResult]
type t = [`KstestResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "KstestResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module KurtosistestResult = struct
type tag = [`KurtosistestResult]
type t = [`KurtosistestResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "KurtosistestResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module MGCResult = struct
type tag = [`MGCResult]
type t = [`MGCResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~stat ~pvalue ~mgc_dict () =
   Py.Module.get_function_with_keywords __wrap_namespace "MGCResult"
     [||]
     (Wrap_utils.keyword_args [("stat", Some(stat )); ("pvalue", Some(pvalue )); ("mgc_dict", Some(mgc_dict ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module MannwhitneyuResult = struct
type tag = [`MannwhitneyuResult]
type t = [`MannwhitneyuResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "MannwhitneyuResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module MapWrapper = struct
type tag = [`MapWrapper]
type t = [`MapWrapper | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
                  let create ?pool () =
                     Py.Module.get_function_with_keywords __wrap_namespace "MapWrapper"
                       [||]
                       (Wrap_utils.keyword_args [("pool", Wrap_utils.Option.map pool (function
| `Map_like_callable x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
))])
                       |> of_pyobject
let close self =
   Py.Module.get_function_with_keywords (to_pyobject self) "close"
     [||]
     []

let join self =
   Py.Module.get_function_with_keywords (to_pyobject self) "join"
     [||]
     []

let terminate self =
   Py.Module.get_function_with_keywords (to_pyobject self) "terminate"
     [||]
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module ModeResult = struct
type tag = [`ModeResult]
type t = [`ModeResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~mode ~count () =
   Py.Module.get_function_with_keywords __wrap_namespace "ModeResult"
     [||]
     (Wrap_utils.keyword_args [("mode", Some(mode )); ("count", Some(count ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module NormaltestResult = struct
type tag = [`NormaltestResult]
type t = [`NormaltestResult | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "NormaltestResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module NumpyVersion = struct
type tag = [`NumpyVersion]
type t = [`NumpyVersion | `Object] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create vstring =
   Py.Module.get_function_with_keywords __wrap_namespace "NumpyVersion"
     [||]
     (Wrap_utils.keyword_args [("vstring", Some(vstring |> Py.String.of_string))])
     |> of_pyobject
let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module PointbiserialrResult = struct
type tag = [`PointbiserialrResult]
type t = [`Object | `PointbiserialrResult] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~correlation ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "PointbiserialrResult"
     [||]
     (Wrap_utils.keyword_args [("correlation", Some(correlation )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Power_divergenceResult = struct
type tag = [`Power_divergenceResult]
type t = [`Object | `Power_divergenceResult] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "Power_divergenceResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module RanksumsResult = struct
type tag = [`RanksumsResult]
type t = [`Object | `RanksumsResult] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "RanksumsResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module RelfreqResult = struct
type tag = [`RelfreqResult]
type t = [`Object | `RelfreqResult] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~frequency ~lowerlimit ~binsize ~extrapoints () =
   Py.Module.get_function_with_keywords __wrap_namespace "RelfreqResult"
     [||]
     (Wrap_utils.keyword_args [("frequency", Some(frequency )); ("lowerlimit", Some(lowerlimit )); ("binsize", Some(binsize )); ("extrapoints", Some(extrapoints ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module RepeatedResults = struct
type tag = [`RepeatedResults]
type t = [`Object | `RepeatedResults] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~values ~counts () =
   Py.Module.get_function_with_keywords __wrap_namespace "RepeatedResults"
     [||]
     (Wrap_utils.keyword_args [("values", Some(values )); ("counts", Some(counts ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module SigmaclipResult = struct
type tag = [`SigmaclipResult]
type t = [`Object | `SigmaclipResult] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~clipped ~lower ~upper () =
   Py.Module.get_function_with_keywords __wrap_namespace "SigmaclipResult"
     [||]
     (Wrap_utils.keyword_args [("clipped", Some(clipped )); ("lower", Some(lower )); ("upper", Some(upper ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module SkewtestResult = struct
type tag = [`SkewtestResult]
type t = [`Object | `SkewtestResult] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "SkewtestResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module SpearmanrResult = struct
type tag = [`SpearmanrResult]
type t = [`Object | `SpearmanrResult] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~correlation ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "SpearmanrResult"
     [||]
     (Wrap_utils.keyword_args [("correlation", Some(correlation )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Ttest_1sampResult = struct
type tag = [`Ttest_1sampResult]
type t = [`Object | `Ttest_1sampResult] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "Ttest_1sampResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Ttest_indResult = struct
type tag = [`Ttest_indResult]
type t = [`Object | `Ttest_indResult] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "Ttest_indResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module Ttest_relResult = struct
type tag = [`Ttest_relResult]
type t = [`Object | `Ttest_relResult] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~statistic ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "Ttest_relResult"
     [||]
     (Wrap_utils.keyword_args [("statistic", Some(statistic )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
module WeightedTauResult = struct
type tag = [`WeightedTauResult]
type t = [`Object | `WeightedTauResult] Obj.t
let of_pyobject x = ((Obj.of_pyobject x) : t)
let to_pyobject x = Obj.to_pyobject x
let create ~correlation ~pvalue () =
   Py.Module.get_function_with_keywords __wrap_namespace "WeightedTauResult"
     [||]
     (Wrap_utils.keyword_args [("correlation", Some(correlation )); ("pvalue", Some(pvalue ))])
     |> of_pyobject
let __getitem__ ~key self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__getitem__"
     (Array.of_list @@ List.concat [[key ]])
     []

let __iter__ self =
   Py.Module.get_function_with_keywords (to_pyobject self) "__iter__"
     [||]
     []

let count ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "count"
     (Array.of_list @@ List.concat [[value ]])
     []

let index ?start ?stop ~value self =
   Py.Module.get_function_with_keywords (to_pyobject self) "index"
     (Array.of_list @@ List.concat [(match start with None -> [] | Some x -> [x ]);(match stop with None -> [] | Some x -> [x ]);[value ]])
     []

let to_string self = Py.Object.to_string (to_pyobject self)
let show self = to_string self
let pp formatter self = Format.fprintf formatter "%s" (show self)

end
                  let array ?dtype ?copy ?order ?subok ?ndmin ~object_ () =
                     Py.Module.get_function_with_keywords __wrap_namespace "array"
                       [||]
                       (Wrap_utils.keyword_args [("dtype", Wrap_utils.Option.map dtype Np.Dtype.to_pyobject); ("copy", Wrap_utils.Option.map copy Py.Bool.of_bool); ("order", Wrap_utils.Option.map order (function
| `K -> Py.String.of_string "K"
| `A -> Py.String.of_string "A"
| `C -> Py.String.of_string "C"
| `F -> Py.String.of_string "F"
)); ("subok", Wrap_utils.Option.map subok Py.Bool.of_bool); ("ndmin", Wrap_utils.Option.map ndmin Py.Int.of_int); ("object", Some(object_ |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let asarray ?dtype ?order ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "asarray"
                       [||]
                       (Wrap_utils.keyword_args [("dtype", Wrap_utils.Option.map dtype Np.Dtype.to_pyobject); ("order", Wrap_utils.Option.map order (function
| `F -> Py.String.of_string "F"
| `C -> Py.String.of_string "C"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let brunnermunzel ?alternative ?distribution ?nan_policy ~x ~y () =
                     Py.Module.get_function_with_keywords __wrap_namespace "brunnermunzel"
                       [||]
                       (Wrap_utils.keyword_args [("alternative", Wrap_utils.Option.map alternative (function
| `Two_sided -> Py.String.of_string "two-sided"
| `Less -> Py.String.of_string "less"
| `Greater -> Py.String.of_string "greater"
)); ("distribution", Wrap_utils.Option.map distribution (function
| `T -> Py.String.of_string "t"
| `Normal -> Py.String.of_string "normal"
)); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("x", Some(x )); ("y", Some(y ))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let callable obj =
   Py.Module.get_function_with_keywords __wrap_namespace "callable"
     [||]
     (Wrap_utils.keyword_args [("obj", Some(obj ))])

                  let cdist ?metric ?kwargs ~xa ~xb args =
                     Py.Module.get_function_with_keywords __wrap_namespace "cdist"
                       (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
                       (List.rev_append (Wrap_utils.keyword_args [("metric", Wrap_utils.Option.map metric (function
| `Callable x -> Wrap_utils.id x
| `S x -> Py.String.of_string x
)); ("XA", Some(xa |> Np.Obj.to_pyobject)); ("XB", Some(xb |> Np.Obj.to_pyobject))]) (match kwargs with None -> [] | Some x -> x))
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let check_random_state seed =
   Py.Module.get_function_with_keywords __wrap_namespace "check_random_state"
     [||]
     (Wrap_utils.keyword_args [("seed", Some(seed ))])

                  let chisquare ?f_exp ?ddof ?axis ~f_obs () =
                     Py.Module.get_function_with_keywords __wrap_namespace "chisquare"
                       [||]
                       (Wrap_utils.keyword_args [("f_exp", Wrap_utils.Option.map f_exp Np.Obj.to_pyobject); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("f_obs", Some(f_obs |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
                  let combine_pvalues ?method_ ?weights ~pvalues () =
                     Py.Module.get_function_with_keywords __wrap_namespace "combine_pvalues"
                       [||]
                       (Wrap_utils.keyword_args [("method", Wrap_utils.Option.map method_ (function
| `Fisher -> Py.String.of_string "fisher"
| `Pearson -> Py.String.of_string "pearson"
| `Tippett -> Py.String.of_string "tippett"
| `Stouffer -> Py.String.of_string "stouffer"
| `Mudholkar_george -> Py.String.of_string "mudholkar_george"
)); ("weights", Wrap_utils.Option.map weights (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `T1_D x -> Wrap_utils.id x
)); ("pvalues", Some(pvalues |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `T1_D x -> Wrap_utils.id x
)))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let cumfreq ?numbins ?defaultreallimits ?weights ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "cumfreq"
     [||]
     (Wrap_utils.keyword_args [("numbins", Wrap_utils.Option.map numbins Py.Int.of_int); ("defaultreallimits", defaultreallimits); ("weights", Wrap_utils.Option.map weights Np.Obj.to_pyobject); ("a", Some(a |> Np.Obj.to_pyobject))])
     |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1)), (Py.Float.to_float (Py.Tuple.get x 2)), (Py.Int.to_int (Py.Tuple.get x 3))))
                  let describe ?axis ?ddof ?bias ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "describe"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("bias", Wrap_utils.Option.map bias Py.Bool.of_bool); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1)), (Wrap_utils.id (Py.Tuple.get x 2)), (Wrap_utils.id (Py.Tuple.get x 3)), (Wrap_utils.id (Py.Tuple.get x 4)), (Wrap_utils.id (Py.Tuple.get x 5))))
let energy_distance ?u_weights ?v_weights ~u_values ~v_values () =
   Py.Module.get_function_with_keywords __wrap_namespace "energy_distance"
     [||]
     (Wrap_utils.keyword_args [("u_weights", u_weights); ("v_weights", v_weights); ("u_values", Some(u_values )); ("v_values", Some(v_values ))])
     |> Py.Float.to_float
let epps_singleton_2samp ?t ~x ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "epps_singleton_2samp"
     [||]
     (Wrap_utils.keyword_args [("t", Wrap_utils.Option.map t Np.Obj.to_pyobject); ("x", Some(x )); ("y", Some(y ))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let f_oneway args =
   Py.Module.get_function_with_keywords __wrap_namespace "f_oneway"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let find_repeats arr =
   Py.Module.get_function_with_keywords __wrap_namespace "find_repeats"
     [||]
     (Wrap_utils.keyword_args [("arr", Some(arr |> Np.Obj.to_pyobject))])
     |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1))))
                  let fisher_exact ?alternative ~table () =
                     Py.Module.get_function_with_keywords __wrap_namespace "fisher_exact"
                       [||]
                       (Wrap_utils.keyword_args [("alternative", Wrap_utils.Option.map alternative (function
| `Two_sided -> Py.String.of_string "two-sided"
| `Less -> Py.String.of_string "less"
| `Greater -> Py.String.of_string "greater"
)); ("table", Some(table ))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let friedmanchisquare args =
   Py.Module.get_function_with_keywords __wrap_namespace "friedmanchisquare"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let gcd ~x ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "gcd"
     (Array.of_list @@ List.concat [[x ];[y ]])
     []

                  let gmean ?axis ?dtype ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "gmean"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("dtype", Wrap_utils.Option.map dtype Np.Dtype.to_pyobject); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let gstd ?axis ?ddof ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "gstd"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `Tuple x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("a", Some(a |> Np.Obj.to_pyobject))])

                  let hmean ?axis ?dtype ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "hmean"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("dtype", Wrap_utils.Option.map dtype Np.Dtype.to_pyobject); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let iqr ?axis ?rng ?scale ?nan_policy ?interpolation ?keepdims ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "iqr"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `Sequence_of_int x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)); ("rng", rng); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("interpolation", Wrap_utils.Option.map interpolation (function
| `Linear -> Py.String.of_string "linear"
| `Lower -> Py.String.of_string "lower"
| `Higher -> Py.String.of_string "higher"
| `Midpoint -> Py.String.of_string "midpoint"
| `Nearest -> Py.String.of_string "nearest"
)); ("keepdims", Wrap_utils.Option.map keepdims Py.Bool.of_bool); ("x", Some(x |> Np.Obj.to_pyobject))])

let itemfreq ?kwds args =
   Py.Module.get_function_with_keywords __wrap_namespace "itemfreq"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let jarque_bera x =
   Py.Module.get_function_with_keywords __wrap_namespace "jarque_bera"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let kendalltau ?initial_lexsort ?nan_policy ?method_ ~x ~y () =
                     Py.Module.get_function_with_keywords __wrap_namespace "kendalltau"
                       [||]
                       (Wrap_utils.keyword_args [("initial_lexsort", Wrap_utils.Option.map initial_lexsort Py.Bool.of_bool); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("method", Wrap_utils.Option.map method_ (function
| `Auto -> Py.String.of_string "auto"
| `Asymptotic -> Py.String.of_string "asymptotic"
| `Exact -> Py.String.of_string "exact"
)); ("x", Some(x )); ("y", Some(y ))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let kruskal ?kwargs args =
   Py.Module.get_function_with_keywords __wrap_namespace "kruskal"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let ks_2samp ?alternative ?mode ~data1 ~data2 () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ks_2samp"
                       [||]
                       (Wrap_utils.keyword_args [("alternative", Wrap_utils.Option.map alternative (function
| `Two_sided -> Py.String.of_string "two-sided"
| `Less -> Py.String.of_string "less"
| `Greater -> Py.String.of_string "greater"
)); ("mode", Wrap_utils.Option.map mode (function
| `Auto -> Py.String.of_string "auto"
| `Exact -> Py.String.of_string "exact"
| `Asymp -> Py.String.of_string "asymp"
)); ("data1", Some(data1 )); ("data2", Some(data2 ))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let kstest ?args ?n ?alternative ?mode ~rvs ~cdf () =
                     Py.Module.get_function_with_keywords __wrap_namespace "kstest"
                       [||]
                       (Wrap_utils.keyword_args [("args", args); ("N", Wrap_utils.Option.map n Py.Int.of_int); ("alternative", Wrap_utils.Option.map alternative (function
| `Two_sided -> Py.String.of_string "two-sided"
| `Less -> Py.String.of_string "less"
| `Greater -> Py.String.of_string "greater"
)); ("mode", Wrap_utils.Option.map mode (function
| `Approx -> Py.String.of_string "approx"
| `Asymp -> Py.String.of_string "asymp"
)); ("rvs", Some(rvs |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `Callable x -> Wrap_utils.id x
| `S x -> Py.String.of_string x
))); ("cdf", Some(cdf |> (function
| `Callable x -> Wrap_utils.id x
| `S x -> Py.String.of_string x
)))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let kurtosis ?axis ?fisher ?bias ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "kurtosis"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("fisher", Wrap_utils.Option.map fisher Py.Bool.of_bool); ("bias", Wrap_utils.Option.map bias Py.Bool.of_bool); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let kurtosistest ?axis ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "kurtosistest"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let linregress ?y ~x () =
   Py.Module.get_function_with_keywords __wrap_namespace "linregress"
     [||]
     (Wrap_utils.keyword_args [("y", y); ("x", Some(x ))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1)), (Py.Float.to_float (Py.Tuple.get x 2)), (Py.Float.to_float (Py.Tuple.get x 3)), (Py.Float.to_float (Py.Tuple.get x 4))))
                  let mannwhitneyu ?use_continuity ?alternative ~x ~y () =
                     Py.Module.get_function_with_keywords __wrap_namespace "mannwhitneyu"
                       [||]
                       (Wrap_utils.keyword_args [("use_continuity", Wrap_utils.Option.map use_continuity Py.Bool.of_bool); ("alternative", Wrap_utils.Option.map alternative (function
| `Two_sided -> Py.String.of_string "two-sided"
| `Less -> Py.String.of_string "less"
| `Greater -> Py.String.of_string "greater"
)); ("x", Some(x )); ("y", Some(y ))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let median_absolute_deviation ?axis ?center ?scale ?nan_policy ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "median_absolute_deviation"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("center", center); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("x", Some(x |> Np.Obj.to_pyobject))])

                  let mode ?axis ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "mode"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1))))
                  let moment ?moment ?axis ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "moment"
                       [||]
                       (Wrap_utils.keyword_args [("moment", Wrap_utils.Option.map moment (function
| `I x -> Py.Int.of_int x
| `Array_like_of_ints x -> Wrap_utils.id x
)); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])

                  let multiscale_graphcorr ?compute_distance ?reps ?workers ?is_twosamp ?random_state ~x ~y () =
                     Py.Module.get_function_with_keywords __wrap_namespace "multiscale_graphcorr"
                       [||]
                       (Wrap_utils.keyword_args [("compute_distance", compute_distance); ("reps", Wrap_utils.Option.map reps Py.Int.of_int); ("workers", Wrap_utils.Option.map workers (function
| `Map_like_callable x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)); ("is_twosamp", Wrap_utils.Option.map is_twosamp Py.Bool.of_bool); ("random_state", Wrap_utils.Option.map random_state (function
| `I x -> Py.Int.of_int x
| `Np_random_RandomState_instance x -> Wrap_utils.id x
)); ("x", Some(x )); ("y", Some(y ))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1)), (Wrap_utils.id (Py.Tuple.get x 2))))
let namedtuple ?rename ?defaults ?module_ ~typename ~field_names () =
   Py.Module.get_function_with_keywords __wrap_namespace "namedtuple"
     [||]
     (Wrap_utils.keyword_args [("rename", rename); ("defaults", defaults); ("module", module_); ("typename", Some(typename )); ("field_names", Some(field_names ))])

                  let normaltest ?axis ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "normaltest"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
let obrientransform args =
   Py.Module.get_function_with_keywords __wrap_namespace "obrientransform"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let pearsonr ~x ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "pearsonr"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject)); ("y", Some(y |> Np.Obj.to_pyobject))])
     |> Py.Float.to_float
                  let percentileofscore ?kind ~a ~score () =
                     Py.Module.get_function_with_keywords __wrap_namespace "percentileofscore"
                       [||]
                       (Wrap_utils.keyword_args [("kind", Wrap_utils.Option.map kind (function
| `Rank -> Py.String.of_string "rank"
| `Weak -> Py.String.of_string "weak"
| `Strict -> Py.String.of_string "strict"
| `Mean -> Py.String.of_string "mean"
)); ("a", Some(a |> Np.Obj.to_pyobject)); ("score", Some(score |> (function
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
)))])
                       |> Py.Float.to_float
let pointbiserialr ~x ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "pointbiserialr"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x )); ("y", Some(y |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let power_divergence ?f_exp ?ddof ?axis ?lambda_ ~f_obs () =
                     Py.Module.get_function_with_keywords __wrap_namespace "power_divergence"
                       [||]
                       (Wrap_utils.keyword_args [("f_exp", Wrap_utils.Option.map f_exp Np.Obj.to_pyobject); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("lambda_", Wrap_utils.Option.map lambda_ (function
| `S x -> Py.String.of_string x
| `F x -> Py.Float.of_float x
)); ("f_obs", Some(f_obs |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
                  let rankdata ?method_ ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "rankdata"
                       [||]
                       (Wrap_utils.keyword_args [("method", Wrap_utils.Option.map method_ (function
| `Average -> Py.String.of_string "average"
| `Min -> Py.String.of_string "min"
| `Max -> Py.String.of_string "max"
| `Dense -> Py.String.of_string "dense"
| `Ordinal -> Py.String.of_string "ordinal"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ranksums ~x ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "ranksums"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x )); ("y", Some(y ))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let relfreq ?numbins ?defaultreallimits ?weights ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "relfreq"
     [||]
     (Wrap_utils.keyword_args [("numbins", Wrap_utils.Option.map numbins Py.Int.of_int); ("defaultreallimits", defaultreallimits); ("weights", Wrap_utils.Option.map weights Np.Obj.to_pyobject); ("a", Some(a |> Np.Obj.to_pyobject))])
     |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1)), (Py.Float.to_float (Py.Tuple.get x 2)), (Py.Int.to_int (Py.Tuple.get x 3))))
                  let rvs_ratio_uniforms ?size ?c ?random_state ~pdf ~umax ~vmin ~vmax () =
                     Py.Module.get_function_with_keywords __wrap_namespace "rvs_ratio_uniforms"
                       [||]
                       (Wrap_utils.keyword_args [("size", Wrap_utils.Option.map size (fun ml -> Py.Tuple.of_list_map Py.Int.of_int ml)); ("c", Wrap_utils.Option.map c Py.Float.of_float); ("random_state", Wrap_utils.Option.map random_state (function
| `I x -> Py.Int.of_int x
| `Np_random_RandomState_instance x -> Wrap_utils.id x
)); ("pdf", Some(pdf )); ("umax", Some(umax |> Py.Float.of_float)); ("vmin", Some(vmin |> Py.Float.of_float)); ("vmax", Some(vmax |> Py.Float.of_float))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let scoreatpercentile ?limit ?interpolation_method ?axis ~a ~per () =
                     Py.Module.get_function_with_keywords __wrap_namespace "scoreatpercentile"
                       [||]
                       (Wrap_utils.keyword_args [("limit", limit); ("interpolation_method", Wrap_utils.Option.map interpolation_method (function
| `Fraction -> Py.String.of_string "fraction"
| `Lower -> Py.String.of_string "lower"
| `Higher -> Py.String.of_string "higher"
)); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("a", Some(a |> Np.Obj.to_pyobject)); ("per", Some(per |> Np.Obj.to_pyobject))])

                  let sem ?axis ?ddof ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "sem"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])

                  let siegelslopes ?x ?method_ ~y () =
                     Py.Module.get_function_with_keywords __wrap_namespace "siegelslopes"
                       [||]
                       (Wrap_utils.keyword_args [("x", Wrap_utils.Option.map x Np.Obj.to_pyobject); ("method", Wrap_utils.Option.map method_ (function
| `Hierarchical -> Py.String.of_string "hierarchical"
| `Separate -> Py.String.of_string "separate"
)); ("y", Some(y |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let sigmaclip ?low ?high ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "sigmaclip"
     [||]
     (Wrap_utils.keyword_args [("low", Wrap_utils.Option.map low Py.Float.of_float); ("high", Wrap_utils.Option.map high Py.Float.of_float); ("a", Some(a |> Np.Obj.to_pyobject))])
     |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1)), (Py.Float.to_float (Py.Tuple.get x 2))))
                  let skew ?axis ?bias ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "skew"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("bias", Wrap_utils.Option.map bias Py.Bool.of_bool); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let skewtest ?axis ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "skewtest"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let spearmanr ?b ?axis ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "spearmanr"
                       [||]
                       (Wrap_utils.keyword_args [("b", b); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a ))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let theilslopes ?x ?alpha ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "theilslopes"
     [||]
     (Wrap_utils.keyword_args [("x", Wrap_utils.Option.map x Np.Obj.to_pyobject); ("alpha", Wrap_utils.Option.map alpha Py.Float.of_float); ("y", Some(y |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1)), (Py.Float.to_float (Py.Tuple.get x 2)), (Py.Float.to_float (Py.Tuple.get x 3))))
let tiecorrect rankvals =
   Py.Module.get_function_with_keywords __wrap_namespace "tiecorrect"
     [||]
     (Wrap_utils.keyword_args [("rankvals", Some(rankvals |> Np.Obj.to_pyobject))])
     |> Py.Float.to_float
                  let tmax ?upperlimit ?axis ?inclusive ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "tmax"
                       [||]
                       (Wrap_utils.keyword_args [("upperlimit", Wrap_utils.Option.map upperlimit Py.Float.of_float); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("inclusive", Wrap_utils.Option.map inclusive Py.Bool.of_bool); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])

let tmean ?limits ?inclusive ?axis ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "tmean"
     [||]
     (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("a", Some(a |> Np.Obj.to_pyobject))])
     |> Py.Float.to_float
                  let tmin ?lowerlimit ?axis ?inclusive ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "tmin"
                       [||]
                       (Wrap_utils.keyword_args [("lowerlimit", Wrap_utils.Option.map lowerlimit Py.Float.of_float); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("inclusive", Wrap_utils.Option.map inclusive Py.Bool.of_bool); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])

                  let trim1 ?tail ?axis ~a ~proportiontocut () =
                     Py.Module.get_function_with_keywords __wrap_namespace "trim1"
                       [||]
                       (Wrap_utils.keyword_args [("tail", Wrap_utils.Option.map tail (function
| `Left -> Py.String.of_string "left"
| `Right -> Py.String.of_string "right"
)); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject)); ("proportiontocut", Some(proportiontocut |> Py.Float.of_float))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let trim_mean ?axis ~a ~proportiontocut () =
                     Py.Module.get_function_with_keywords __wrap_namespace "trim_mean"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject)); ("proportiontocut", Some(proportiontocut |> Py.Float.of_float))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let trimboth ?axis ~a ~proportiontocut () =
                     Py.Module.get_function_with_keywords __wrap_namespace "trimboth"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject)); ("proportiontocut", Some(proportiontocut |> Py.Float.of_float))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let tsem ?limits ?inclusive ?axis ?ddof ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "tsem"
                       [||]
                       (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
                  let tstd ?limits ?inclusive ?axis ?ddof ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "tstd"
                       [||]
                       (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
                  let ttest_1samp ?axis ?nan_policy ~a ~popmean () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ttest_1samp"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject)); ("popmean", Some(popmean |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `F x -> Py.Float.of_float x
)))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
                  let ttest_ind ?axis ?equal_var ?nan_policy ~a ~b () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ttest_ind"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("equal_var", Wrap_utils.Option.map equal_var Py.Bool.of_bool); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a )); ("b", Some(b ))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
let ttest_ind_from_stats ?equal_var ~mean1 ~std1 ~nobs1 ~mean2 ~std2 ~nobs2 () =
   Py.Module.get_function_with_keywords __wrap_namespace "ttest_ind_from_stats"
     [||]
     (Wrap_utils.keyword_args [("equal_var", Wrap_utils.Option.map equal_var Py.Bool.of_bool); ("mean1", Some(mean1 |> Np.Obj.to_pyobject)); ("std1", Some(std1 |> Np.Obj.to_pyobject)); ("nobs1", Some(nobs1 |> Np.Obj.to_pyobject)); ("mean2", Some(mean2 |> Np.Obj.to_pyobject)); ("std2", Some(std2 |> Np.Obj.to_pyobject)); ("nobs2", Some(nobs2 |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
                  let ttest_rel ?axis ?nan_policy ~a ~b () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ttest_rel"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a )); ("b", Some(b ))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
                  let tvar ?limits ?inclusive ?axis ?ddof ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "tvar"
                       [||]
                       (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
                  let variation ?axis ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "variation"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let wasserstein_distance ?u_weights ?v_weights ~u_values ~v_values () =
   Py.Module.get_function_with_keywords __wrap_namespace "wasserstein_distance"
     [||]
     (Wrap_utils.keyword_args [("u_weights", u_weights); ("v_weights", v_weights); ("u_values", Some(u_values )); ("v_values", Some(v_values ))])
     |> Py.Float.to_float
                  let weightedtau ?rank ?weigher ?additive ~x ~y () =
                     Py.Module.get_function_with_keywords __wrap_namespace "weightedtau"
                       [||]
                       (Wrap_utils.keyword_args [("rank", Wrap_utils.Option.map rank (function
| `Bool x -> Py.Bool.of_bool x
| `Array_like_of_ints x -> Wrap_utils.id x
)); ("weigher", weigher); ("additive", Wrap_utils.Option.map additive Py.Bool.of_bool); ("x", Some(x )); ("y", Some(y ))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let zmap ?axis ?ddof ~scores ~compare () =
                     Py.Module.get_function_with_keywords __wrap_namespace "zmap"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("scores", Some(scores |> Np.Obj.to_pyobject)); ("compare", Some(compare |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let zscore ?axis ?ddof ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "zscore"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))

end
let alpha ?loc ?scale ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "alpha"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Alpha_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
                  let anderson ?dist ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "anderson"
                       [||]
                       (Wrap_utils.keyword_args [("dist", Wrap_utils.Option.map dist (function
| `Expon -> Py.String.of_string "expon"
| `Logistic -> Py.String.of_string "logistic"
| `Gumbel -> Py.String.of_string "gumbel"
| `Gumbel_l -> Py.String.of_string "gumbel_l"
| `PyObject x -> Wrap_utils.id x
)); ("x", Some(x |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 2))))
let anderson_ksamp ?midrank ~samples () =
   Py.Module.get_function_with_keywords __wrap_namespace "anderson_ksamp"
     [||]
     (Wrap_utils.keyword_args [("midrank", Wrap_utils.Option.map midrank Py.Bool.of_bool); ("samples", Some(samples ))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1)), (Py.Float.to_float (Py.Tuple.get x 2))))
let anglit ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "anglit"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Anglit_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let ansari ~x ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "ansari"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x )); ("y", Some(y ))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let arcsine ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "arcsine"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Arcsine_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let argus ?loc ?scale ~chi () =
   Py.Module.get_function_with_keywords __wrap_namespace "argus"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("chi", Some(chi ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Argus_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let bartlett args =
   Py.Module.get_function_with_keywords __wrap_namespace "bartlett"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let bayes_mvs ?alpha ~data () =
   Py.Module.get_function_with_keywords __wrap_namespace "bayes_mvs"
     [||]
     (Wrap_utils.keyword_args [("alpha", Wrap_utils.Option.map alpha Py.Float.of_float); ("data", Some(data |> Np.Obj.to_pyobject))])

let bernoulli ?loc ~p () =
   Py.Module.get_function_with_keywords __wrap_namespace "bernoulli"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("p", Some(p ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Bernoulli_gen|`Object|`Rv_discrete|`Rv_generic] Np.Obj.t))
let beta ?loc ?scale ~a ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "beta"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Beta_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let betabinom ?loc ~n ~a ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "betabinom"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("n", Some(n )); ("a", Some(a )); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Betabinom_gen|`Object|`Rv_discrete|`Rv_generic] Np.Obj.t))
let betaprime ?loc ?scale ~a ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "betaprime"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Betaprime_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
                  let binned_statistic ?statistic ?bins ?range ~x ~values () =
                     Py.Module.get_function_with_keywords __wrap_namespace "binned_statistic"
                       [||]
                       (Wrap_utils.keyword_args [("statistic", Wrap_utils.Option.map statistic (function
| `Callable x -> Wrap_utils.id x
| `S x -> Py.String.of_string x
)); ("bins", Wrap_utils.Option.map bins (function
| `Sequence_of_scalars x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)); ("range", Wrap_utils.Option.map range (function
| `Tuple x -> (fun (ml_0, ml_1) -> Py.Tuple.of_list [(Py.Float.of_float ml_0); (Py.Float.of_float ml_1)]) x
| `T_float_float_ x -> Wrap_utils.id x
)); ("x", Some(x |> Np.Obj.to_pyobject)); ("values", Some(values |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `List_array_like x -> Wrap_utils.id x
)))])
                       |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1)), (Wrap_utils.id (Py.Tuple.get x 2))))
                  let binned_statistic_2d ?statistic ?bins ?range ?expand_binnumbers ~x ~y ~values () =
                     Py.Module.get_function_with_keywords __wrap_namespace "binned_statistic_2d"
                       [||]
                       (Wrap_utils.keyword_args [("statistic", Wrap_utils.Option.map statistic (function
| `Callable x -> Wrap_utils.id x
| `S x -> Py.String.of_string x
)); ("bins", Wrap_utils.Option.map bins (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
| `PyObject x -> Wrap_utils.id x
)); ("range", range); ("expand_binnumbers", Wrap_utils.Option.map expand_binnumbers Py.Bool.of_bool); ("x", Some(x |> Np.Obj.to_pyobject)); ("y", Some(y |> Np.Obj.to_pyobject)); ("values", Some(values |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `List_array_like x -> Wrap_utils.id x
)))])
                       |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 2)), (Wrap_utils.id (Py.Tuple.get x 3))))
                  let binned_statistic_dd ?statistic ?bins ?range ?expand_binnumbers ?binned_statistic_result ~sample ~values () =
                     Py.Module.get_function_with_keywords __wrap_namespace "binned_statistic_dd"
                       [||]
                       (Wrap_utils.keyword_args [("statistic", Wrap_utils.Option.map statistic (function
| `Callable x -> Wrap_utils.id x
| `S x -> Py.String.of_string x
)); ("bins", bins); ("range", range); ("expand_binnumbers", Wrap_utils.Option.map expand_binnumbers Py.Bool.of_bool); ("binned_statistic_result", binned_statistic_result); ("sample", Some(sample |> Np.Obj.to_pyobject)); ("values", Some(values |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `List_array_like x -> Wrap_utils.id x
)))])
                       |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1)), (Wrap_utils.id (Py.Tuple.get x 2))))
let binom ?loc ~n ~p () =
   Py.Module.get_function_with_keywords __wrap_namespace "binom"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("n", Some(n )); ("p", Some(p ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Binom_gen|`Object|`Rv_discrete|`Rv_generic] Np.Obj.t))
                  let binom_test ?n ?p ?alternative ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "binom_test"
                       [||]
                       (Wrap_utils.keyword_args [("n", Wrap_utils.Option.map n Py.Int.of_int); ("p", Wrap_utils.Option.map p Py.Float.of_float); ("alternative", Wrap_utils.Option.map alternative (function
| `Two_sided -> Py.String.of_string "two-sided"
| `Greater -> Py.String.of_string "greater"
| `Less -> Py.String.of_string "less"
)); ("x", Some(x |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `I x -> Py.Int.of_int x
)))])

let boltzmann ?loc ~lambda_ ~n () =
   Py.Module.get_function_with_keywords __wrap_namespace "boltzmann"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("lambda_", Some(lambda_ )); ("N", Some(n ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Boltzmann_gen|`Object|`Rv_discrete|`Rv_generic] Np.Obj.t))
                  let boxcox ?lmbda ?alpha ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "boxcox"
                       [||]
                       (Wrap_utils.keyword_args [("lmbda", Wrap_utils.Option.map lmbda (function
| `Bool x -> Py.Bool.of_bool x
| `S x -> Py.String.of_string x
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
)); ("alpha", Wrap_utils.Option.map alpha Py.Float.of_float); ("x", Some(x |> Np.Obj.to_pyobject))])
                       |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let boxcox_llf ~lmb ~data () =
                     Py.Module.get_function_with_keywords __wrap_namespace "boxcox_llf"
                       [||]
                       (Wrap_utils.keyword_args [("lmb", Some(lmb |> (function
| `F x -> Py.Float.of_float x
| `I x -> Py.Int.of_int x
| `Bool x -> Py.Bool.of_bool x
| `S x -> Py.String.of_string x
))); ("data", Some(data |> Np.Obj.to_pyobject))])

let boxcox_normmax ?brack ?method_ ~x () =
   Py.Module.get_function_with_keywords __wrap_namespace "boxcox_normmax"
     [||]
     (Wrap_utils.keyword_args [("brack", brack); ("method", Wrap_utils.Option.map method_ Py.String.of_string); ("x", Some(x |> Np.Obj.to_pyobject))])

let boxcox_normplot ?plot ?n ~x ~la ~lb () =
   Py.Module.get_function_with_keywords __wrap_namespace "boxcox_normplot"
     [||]
     (Wrap_utils.keyword_args [("plot", plot); ("N", Wrap_utils.Option.map n Py.Int.of_int); ("x", Some(x |> Np.Obj.to_pyobject)); ("la", Some(la )); ("lb", Some(lb ))])
     |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1))))
let bradford ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "bradford"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Bradford_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
                  let brunnermunzel ?alternative ?distribution ?nan_policy ~x ~y () =
                     Py.Module.get_function_with_keywords __wrap_namespace "brunnermunzel"
                       [||]
                       (Wrap_utils.keyword_args [("alternative", Wrap_utils.Option.map alternative (function
| `Two_sided -> Py.String.of_string "two-sided"
| `Less -> Py.String.of_string "less"
| `Greater -> Py.String.of_string "greater"
)); ("distribution", Wrap_utils.Option.map distribution (function
| `T -> Py.String.of_string "t"
| `Normal -> Py.String.of_string "normal"
)); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("x", Some(x )); ("y", Some(y ))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let burr ?loc ?scale ~c ~d () =
   Py.Module.get_function_with_keywords __wrap_namespace "burr"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c )); ("d", Some(d ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Burr_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let burr12 ?loc ?scale ~c ~d () =
   Py.Module.get_function_with_keywords __wrap_namespace "burr12"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c )); ("d", Some(d ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Burr12_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let cauchy ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "cauchy"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Cauchy_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let chi ?loc ?scale ~df () =
   Py.Module.get_function_with_keywords __wrap_namespace "chi"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("df", Some(df ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Chi_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let chi2 ?loc ?scale ~df () =
   Py.Module.get_function_with_keywords __wrap_namespace "chi2"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("df", Some(df ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Chi2_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
                  let chi2_contingency ?correction ?lambda_ ~observed () =
                     Py.Module.get_function_with_keywords __wrap_namespace "chi2_contingency"
                       [||]
                       (Wrap_utils.keyword_args [("correction", Wrap_utils.Option.map correction Py.Bool.of_bool); ("lambda_", Wrap_utils.Option.map lambda_ (function
| `S x -> Py.String.of_string x
| `F x -> Py.Float.of_float x
)); ("observed", Some(observed |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1)), (Py.Int.to_int (Py.Tuple.get x 2)), (Wrap_utils.id (Py.Tuple.get x 3))))
                  let chisquare ?f_exp ?ddof ?axis ~f_obs () =
                     Py.Module.get_function_with_keywords __wrap_namespace "chisquare"
                       [||]
                       (Wrap_utils.keyword_args [("f_exp", Wrap_utils.Option.map f_exp Np.Obj.to_pyobject); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("f_obs", Some(f_obs |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
                  let circmean ?high ?low ?axis ?nan_policy ~samples () =
                     Py.Module.get_function_with_keywords __wrap_namespace "circmean"
                       [||]
                       (Wrap_utils.keyword_args [("high", Wrap_utils.Option.map high (function
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
)); ("low", Wrap_utils.Option.map low (function
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
)); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("samples", Some(samples |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
                  let circstd ?high ?low ?axis ?nan_policy ~samples () =
                     Py.Module.get_function_with_keywords __wrap_namespace "circstd"
                       [||]
                       (Wrap_utils.keyword_args [("high", Wrap_utils.Option.map high (function
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
)); ("low", Wrap_utils.Option.map low (function
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
)); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("samples", Some(samples |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
                  let circvar ?high ?low ?axis ?nan_policy ~samples () =
                     Py.Module.get_function_with_keywords __wrap_namespace "circvar"
                       [||]
                       (Wrap_utils.keyword_args [("high", Wrap_utils.Option.map high (function
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
)); ("low", Wrap_utils.Option.map low (function
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
)); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("samples", Some(samples |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
                  let combine_pvalues ?method_ ?weights ~pvalues () =
                     Py.Module.get_function_with_keywords __wrap_namespace "combine_pvalues"
                       [||]
                       (Wrap_utils.keyword_args [("method", Wrap_utils.Option.map method_ (function
| `Fisher -> Py.String.of_string "fisher"
| `Pearson -> Py.String.of_string "pearson"
| `Tippett -> Py.String.of_string "tippett"
| `Stouffer -> Py.String.of_string "stouffer"
| `Mudholkar_george -> Py.String.of_string "mudholkar_george"
)); ("weights", Wrap_utils.Option.map weights (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `T1_D x -> Wrap_utils.id x
)); ("pvalues", Some(pvalues |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `T1_D x -> Wrap_utils.id x
)))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let cosine ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "cosine"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Cosine_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let crystalball ?loc ?scale ~beta ~m () =
   Py.Module.get_function_with_keywords __wrap_namespace "crystalball"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("beta", Some(beta )); ("m", Some(m ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Crystalball_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let cumfreq ?numbins ?defaultreallimits ?weights ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "cumfreq"
     [||]
     (Wrap_utils.keyword_args [("numbins", Wrap_utils.Option.map numbins Py.Int.of_int); ("defaultreallimits", defaultreallimits); ("weights", Wrap_utils.Option.map weights Np.Obj.to_pyobject); ("a", Some(a |> Np.Obj.to_pyobject))])
     |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1)), (Py.Float.to_float (Py.Tuple.get x 2)), (Py.Int.to_int (Py.Tuple.get x 3))))
                  let describe ?axis ?ddof ?bias ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "describe"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("bias", Wrap_utils.Option.map bias Py.Bool.of_bool); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1)), (Wrap_utils.id (Py.Tuple.get x 2)), (Wrap_utils.id (Py.Tuple.get x 3)), (Wrap_utils.id (Py.Tuple.get x 4)), (Wrap_utils.id (Py.Tuple.get x 5))))
let dgamma ?loc ?scale ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "dgamma"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Dgamma_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let dirichlet ?seed ~alpha () =
   Py.Module.get_function_with_keywords __wrap_namespace "dirichlet"
     [||]
     (Wrap_utils.keyword_args [("seed", seed); ("alpha", Some(alpha |> Np.Obj.to_pyobject))])

let dlaplace ?loc ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "dlaplace"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("a", Some(a ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Dlaplace_gen|`Object|`Rv_discrete|`Rv_generic] Np.Obj.t))
let dweibull ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "dweibull"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Dweibull_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let energy_distance ?u_weights ?v_weights ~u_values ~v_values () =
   Py.Module.get_function_with_keywords __wrap_namespace "energy_distance"
     [||]
     (Wrap_utils.keyword_args [("u_weights", u_weights); ("v_weights", v_weights); ("u_values", Some(u_values )); ("v_values", Some(v_values ))])
     |> Py.Float.to_float
let entropy ?qk ?base ?axis ~pk () =
   Py.Module.get_function_with_keywords __wrap_namespace "entropy"
     [||]
     (Wrap_utils.keyword_args [("qk", qk); ("base", Wrap_utils.Option.map base Py.Float.of_float); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("pk", Some(pk ))])
     |> Py.Float.to_float
let epps_singleton_2samp ?t ~x ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "epps_singleton_2samp"
     [||]
     (Wrap_utils.keyword_args [("t", Wrap_utils.Option.map t Np.Obj.to_pyobject); ("x", Some(x )); ("y", Some(y ))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let erlang ?loc ?scale ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "erlang"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Erlang_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let expon ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "expon"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Expon_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let exponnorm ?loc ?scale ~k () =
   Py.Module.get_function_with_keywords __wrap_namespace "exponnorm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("K", Some(k ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Exponnorm_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let exponpow ?loc ?scale ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "exponpow"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Exponpow_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let exponweib ?loc ?scale ~a ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "exponweib"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Exponweib_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let f ?loc ?scale ~dfn ~dfd () =
   Py.Module.get_function_with_keywords __wrap_namespace "f"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("dfn", Some(dfn )); ("dfd", Some(dfd ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`F_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let f_oneway args =
   Py.Module.get_function_with_keywords __wrap_namespace "f_oneway"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let fatiguelife ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "fatiguelife"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Fatiguelife_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let find_repeats arr =
   Py.Module.get_function_with_keywords __wrap_namespace "find_repeats"
     [||]
     (Wrap_utils.keyword_args [("arr", Some(arr |> Np.Obj.to_pyobject))])
     |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1))))
                  let fisher_exact ?alternative ~table () =
                     Py.Module.get_function_with_keywords __wrap_namespace "fisher_exact"
                       [||]
                       (Wrap_utils.keyword_args [("alternative", Wrap_utils.Option.map alternative (function
| `Two_sided -> Py.String.of_string "two-sided"
| `Less -> Py.String.of_string "less"
| `Greater -> Py.String.of_string "greater"
)); ("table", Some(table ))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let fisk ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "fisk"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Fisk_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let fligner ?kwds args =
   Py.Module.get_function_with_keywords __wrap_namespace "fligner"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let foldcauchy ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "foldcauchy"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Foldcauchy_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let foldnorm ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "foldnorm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Foldnorm_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let frechet_l ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "frechet_l"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Frechet_l_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let frechet_r ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "frechet_r"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Frechet_r_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let friedmanchisquare args =
   Py.Module.get_function_with_keywords __wrap_namespace "friedmanchisquare"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let gamma ?loc ?scale ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "gamma"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Gamma_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let gausshyper ?loc ?scale ~a ~b ~c ~z () =
   Py.Module.get_function_with_keywords __wrap_namespace "gausshyper"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("b", Some(b )); ("c", Some(c )); ("z", Some(z ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Gausshyper_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let genexpon ?loc ?scale ~a ~b ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "genexpon"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("b", Some(b )); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Genexpon_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let genextreme ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "genextreme"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Genextreme_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let gengamma ?loc ?scale ~a ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "gengamma"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Gengamma_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let genhalflogistic ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "genhalflogistic"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Genhalflogistic_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let geninvgauss ?loc ?scale ~p ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "geninvgauss"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("p", Some(p )); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Geninvgauss_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let genlogistic ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "genlogistic"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Genlogistic_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let gennorm ?loc ?scale ~beta () =
   Py.Module.get_function_with_keywords __wrap_namespace "gennorm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("beta", Some(beta ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Gennorm_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let genpareto ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "genpareto"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Genpareto_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let geom ?loc ~p () =
   Py.Module.get_function_with_keywords __wrap_namespace "geom"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("p", Some(p ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Geom_gen|`Object|`Rv_discrete|`Rv_generic] Np.Obj.t))
let gilbrat ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "gilbrat"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Gilbrat_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
                  let gmean ?axis ?dtype ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "gmean"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("dtype", Wrap_utils.Option.map dtype Np.Dtype.to_pyobject); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let gompertz ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "gompertz"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Gompertz_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
                  let gstd ?axis ?ddof ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "gstd"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `Tuple x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("a", Some(a |> Np.Obj.to_pyobject))])

let gumbel_l ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "gumbel_l"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Gumbel_l_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let gumbel_r ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "gumbel_r"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Gumbel_r_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let halfcauchy ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "halfcauchy"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Halfcauchy_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let halfgennorm ?loc ?scale ~beta () =
   Py.Module.get_function_with_keywords __wrap_namespace "halfgennorm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("beta", Some(beta ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Halfgennorm_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let halflogistic ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "halflogistic"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Halflogistic_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let halfnorm ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "halfnorm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Halfnorm_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
                  let hmean ?axis ?dtype ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "hmean"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("dtype", Wrap_utils.Option.map dtype Np.Dtype.to_pyobject); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let hypergeom ?loc ~m ~n ~n' () =
   Py.Module.get_function_with_keywords __wrap_namespace "hypergeom"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("M", Some(m )); ("n", Some(n )); ("N", Some(n' ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Hypergeom_gen|`Object|`Rv_discrete|`Rv_generic] Np.Obj.t))
let hypsecant ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "hypsecant"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Hypsecant_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let invgamma ?loc ?scale ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "invgamma"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Invgamma_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let invgauss ?loc ?scale ~mu () =
   Py.Module.get_function_with_keywords __wrap_namespace "invgauss"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("mu", Some(mu ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Invgauss_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let invweibull ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "invweibull"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Invweibull_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let invwishart ?df ?scale ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "invwishart"
     [||]
     (Wrap_utils.keyword_args [("df", Wrap_utils.Option.map df Py.Int.of_int); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("seed", seed)])

                  let iqr ?axis ?rng ?scale ?nan_policy ?interpolation ?keepdims ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "iqr"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `Sequence_of_int x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)); ("rng", rng); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("interpolation", Wrap_utils.Option.map interpolation (function
| `Linear -> Py.String.of_string "linear"
| `Lower -> Py.String.of_string "lower"
| `Higher -> Py.String.of_string "higher"
| `Midpoint -> Py.String.of_string "midpoint"
| `Nearest -> Py.String.of_string "nearest"
)); ("keepdims", Wrap_utils.Option.map keepdims Py.Bool.of_bool); ("x", Some(x |> Np.Obj.to_pyobject))])

let itemfreq ?kwds args =
   Py.Module.get_function_with_keywords __wrap_namespace "itemfreq"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)

let jarque_bera x =
   Py.Module.get_function_with_keywords __wrap_namespace "jarque_bera"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let johnsonsb ?loc ?scale ~a ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "johnsonsb"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Johnsonsb_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let johnsonsu ?loc ?scale ~a ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "johnsonsu"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Johnsonsu_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let kappa3 ?loc ?scale ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "kappa3"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Kappa3_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let kappa4 ?loc ?scale ~h ~k () =
   Py.Module.get_function_with_keywords __wrap_namespace "kappa4"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("h", Some(h )); ("k", Some(k ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Kappa4_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
                  let kendalltau ?initial_lexsort ?nan_policy ?method_ ~x ~y () =
                     Py.Module.get_function_with_keywords __wrap_namespace "kendalltau"
                       [||]
                       (Wrap_utils.keyword_args [("initial_lexsort", Wrap_utils.Option.map initial_lexsort Py.Bool.of_bool); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("method", Wrap_utils.Option.map method_ (function
| `Auto -> Py.String.of_string "auto"
| `Asymptotic -> Py.String.of_string "asymptotic"
| `Exact -> Py.String.of_string "exact"
)); ("x", Some(x )); ("y", Some(y ))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let kruskal ?kwargs args =
   Py.Module.get_function_with_keywords __wrap_namespace "kruskal"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwargs with None -> [] | Some x -> x)
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let ks_2samp ?alternative ?mode ~data1 ~data2 () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ks_2samp"
                       [||]
                       (Wrap_utils.keyword_args [("alternative", Wrap_utils.Option.map alternative (function
| `Two_sided -> Py.String.of_string "two-sided"
| `Less -> Py.String.of_string "less"
| `Greater -> Py.String.of_string "greater"
)); ("mode", Wrap_utils.Option.map mode (function
| `Auto -> Py.String.of_string "auto"
| `Exact -> Py.String.of_string "exact"
| `Asymp -> Py.String.of_string "asymp"
)); ("data1", Some(data1 )); ("data2", Some(data2 ))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let ksone ?loc ?scale ~n () =
   Py.Module.get_function_with_keywords __wrap_namespace "ksone"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("n", Some(n ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Ksone_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
                  let kstat ?n ~data () =
                     Py.Module.get_function_with_keywords __wrap_namespace "kstat"
                       [||]
                       (Wrap_utils.keyword_args [("n", Wrap_utils.Option.map n (function
| `Three -> Py.Int.of_int 3
| `I x -> Py.Int.of_int x
| `Two -> Py.Int.of_int 2
| `PyObject x -> Wrap_utils.id x
)); ("data", Some(data |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
                  let kstatvar ?n ~data () =
                     Py.Module.get_function_with_keywords __wrap_namespace "kstatvar"
                       [||]
                       (Wrap_utils.keyword_args [("n", Wrap_utils.Option.map n (function
| `I x -> Py.Int.of_int x
| `PyObject x -> Wrap_utils.id x
)); ("data", Some(data |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
                  let kstest ?args ?n ?alternative ?mode ~rvs ~cdf () =
                     Py.Module.get_function_with_keywords __wrap_namespace "kstest"
                       [||]
                       (Wrap_utils.keyword_args [("args", args); ("N", Wrap_utils.Option.map n Py.Int.of_int); ("alternative", Wrap_utils.Option.map alternative (function
| `Two_sided -> Py.String.of_string "two-sided"
| `Less -> Py.String.of_string "less"
| `Greater -> Py.String.of_string "greater"
)); ("mode", Wrap_utils.Option.map mode (function
| `Approx -> Py.String.of_string "approx"
| `Asymp -> Py.String.of_string "asymp"
)); ("rvs", Some(rvs |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `Callable x -> Wrap_utils.id x
| `S x -> Py.String.of_string x
))); ("cdf", Some(cdf |> (function
| `Callable x -> Wrap_utils.id x
| `S x -> Py.String.of_string x
)))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let kstwobign ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "kstwobign"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Kstwobign_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
                  let kurtosis ?axis ?fisher ?bias ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "kurtosis"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("fisher", Wrap_utils.Option.map fisher Py.Bool.of_bool); ("bias", Wrap_utils.Option.map bias Py.Bool.of_bool); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let kurtosistest ?axis ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "kurtosistest"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let laplace ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "laplace"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Laplace_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let levene ?kwds args =
   Py.Module.get_function_with_keywords __wrap_namespace "levene"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let levy ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "levy"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Levy_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let levy_l ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "levy_l"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Levy_l_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let levy_stable ?loc ?scale ~alpha ~beta () =
   Py.Module.get_function_with_keywords __wrap_namespace "levy_stable"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("alpha", Some(alpha )); ("beta", Some(beta ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Levy_stable_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let linregress ?y ~x () =
   Py.Module.get_function_with_keywords __wrap_namespace "linregress"
     [||]
     (Wrap_utils.keyword_args [("y", y); ("x", Some(x ))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1)), (Py.Float.to_float (Py.Tuple.get x 2)), (Py.Float.to_float (Py.Tuple.get x 3)), (Py.Float.to_float (Py.Tuple.get x 4))))
let loggamma ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "loggamma"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Loggamma_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let logistic ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "logistic"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Logistic_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let loglaplace ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "loglaplace"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Loglaplace_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let lognorm ?loc ?scale ~s () =
   Py.Module.get_function_with_keywords __wrap_namespace "lognorm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("s", Some(s ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Lognorm_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let logser ?loc ~p () =
   Py.Module.get_function_with_keywords __wrap_namespace "logser"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("p", Some(p ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Logser_gen|`Object|`Rv_discrete|`Rv_generic] Np.Obj.t))
let loguniform ?loc ?scale ~a ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "loguniform"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("b", Some(b ))])

let lomax ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "lomax"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Lomax_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
                  let mannwhitneyu ?use_continuity ?alternative ~x ~y () =
                     Py.Module.get_function_with_keywords __wrap_namespace "mannwhitneyu"
                       [||]
                       (Wrap_utils.keyword_args [("use_continuity", Wrap_utils.Option.map use_continuity Py.Bool.of_bool); ("alternative", Wrap_utils.Option.map alternative (function
| `Two_sided -> Py.String.of_string "two-sided"
| `Less -> Py.String.of_string "less"
| `Greater -> Py.String.of_string "greater"
)); ("x", Some(x )); ("y", Some(y ))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let matrix_normal ?mean ?rowcov ?colcov ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "matrix_normal"
     [||]
     (Wrap_utils.keyword_args [("mean", Wrap_utils.Option.map mean Np.Obj.to_pyobject); ("rowcov", Wrap_utils.Option.map rowcov Np.Obj.to_pyobject); ("colcov", Wrap_utils.Option.map colcov Np.Obj.to_pyobject); ("seed", seed)])

let maxwell ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "maxwell"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Maxwell_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
                  let median_absolute_deviation ?axis ?center ?scale ?nan_policy ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "median_absolute_deviation"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("center", center); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("x", Some(x |> Np.Obj.to_pyobject))])

let median_test ?kwds args =
   Py.Module.get_function_with_keywords __wrap_namespace "median_test"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     (match kwds with None -> [] | Some x -> x)
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1)), (Py.Float.to_float (Py.Tuple.get x 2)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 3))))
let mielke ?loc ?scale ~k ~s () =
   Py.Module.get_function_with_keywords __wrap_namespace "mielke"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("k", Some(k )); ("s", Some(s ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Mielke_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
                  let mode ?axis ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "mode"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1))))
                  let moment ?moment ?axis ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "moment"
                       [||]
                       (Wrap_utils.keyword_args [("moment", Wrap_utils.Option.map moment (function
| `I x -> Py.Int.of_int x
| `Array_like_of_ints x -> Wrap_utils.id x
)); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])

let mood ?axis ~x ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "mood"
     [||]
     (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("x", Some(x )); ("y", Some(y ))])

let moyal ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "moyal"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Moyal_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let multinomial ?seed ~n ~p () =
   Py.Module.get_function_with_keywords __wrap_namespace "multinomial"
     [||]
     (Wrap_utils.keyword_args [("seed", seed); ("n", Some(n |> Py.Int.of_int)); ("p", Some(p |> Np.Obj.to_pyobject))])

                  let multiscale_graphcorr ?compute_distance ?reps ?workers ?is_twosamp ?random_state ~x ~y () =
                     Py.Module.get_function_with_keywords __wrap_namespace "multiscale_graphcorr"
                       [||]
                       (Wrap_utils.keyword_args [("compute_distance", compute_distance); ("reps", Wrap_utils.Option.map reps Py.Int.of_int); ("workers", Wrap_utils.Option.map workers (function
| `Map_like_callable x -> Wrap_utils.id x
| `I x -> Py.Int.of_int x
)); ("is_twosamp", Wrap_utils.Option.map is_twosamp Py.Bool.of_bool); ("random_state", Wrap_utils.Option.map random_state (function
| `I x -> Py.Int.of_int x
| `Np_random_RandomState_instance x -> Wrap_utils.id x
)); ("x", Some(x )); ("y", Some(y ))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1)), (Wrap_utils.id (Py.Tuple.get x 2))))
let multivariate_normal ?mean ?cov ?allow_singular ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "multivariate_normal"
     [||]
     (Wrap_utils.keyword_args [("mean", Wrap_utils.Option.map mean Np.Obj.to_pyobject); ("cov", Wrap_utils.Option.map cov Np.Obj.to_pyobject); ("allow_singular", Wrap_utils.Option.map allow_singular Py.Bool.of_bool); ("seed", seed)])

let mvsdist data =
   Py.Module.get_function_with_keywords __wrap_namespace "mvsdist"
     [||]
     (Wrap_utils.keyword_args [("data", Some(data |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1)), (Wrap_utils.id (Py.Tuple.get x 2))))
let nakagami ?loc ?scale ~nu () =
   Py.Module.get_function_with_keywords __wrap_namespace "nakagami"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("nu", Some(nu ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Nakagami_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let nbinom ?loc ~n ~p () =
   Py.Module.get_function_with_keywords __wrap_namespace "nbinom"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("n", Some(n )); ("p", Some(p ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Nbinom_gen|`Object|`Rv_discrete|`Rv_generic] Np.Obj.t))
let ncf ?loc ?scale ~dfn ~dfd ~nc () =
   Py.Module.get_function_with_keywords __wrap_namespace "ncf"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("dfn", Some(dfn )); ("dfd", Some(dfd )); ("nc", Some(nc ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Ncf_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let nct ?loc ?scale ~df ~nc () =
   Py.Module.get_function_with_keywords __wrap_namespace "nct"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("df", Some(df )); ("nc", Some(nc ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Nct_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let ncx2 ?loc ?scale ~df ~nc () =
   Py.Module.get_function_with_keywords __wrap_namespace "ncx2"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("df", Some(df )); ("nc", Some(nc ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Ncx2_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let norm ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "norm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Norm_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
                  let normaltest ?axis ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "normaltest"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
let norminvgauss ?loc ?scale ~a ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "norminvgauss"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Norminvgauss_gen|`Object|`Rv_continuous|`Rv_generic] Np.Obj.t))
let obrientransform args =
   Py.Module.get_function_with_keywords __wrap_namespace "obrientransform"
     (Array.of_list @@ List.concat [(List.map Wrap_utils.id args)])
     []
     |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let pareto ?loc ?scale ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "pareto"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Pareto_gen|`Rv_continuous|`Rv_generic] Np.Obj.t))
let pearson3 ?loc ?scale ~skew () =
   Py.Module.get_function_with_keywords __wrap_namespace "pearson3"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("skew", Some(skew ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Pearson3_gen|`Rv_continuous|`Rv_generic] Np.Obj.t))
let pearsonr ~x ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "pearsonr"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject)); ("y", Some(y |> Np.Obj.to_pyobject))])
     |> Py.Float.to_float
                  let percentileofscore ?kind ~a ~score () =
                     Py.Module.get_function_with_keywords __wrap_namespace "percentileofscore"
                       [||]
                       (Wrap_utils.keyword_args [("kind", Wrap_utils.Option.map kind (function
| `Rank -> Py.String.of_string "rank"
| `Weak -> Py.String.of_string "weak"
| `Strict -> Py.String.of_string "strict"
| `Mean -> Py.String.of_string "mean"
)); ("a", Some(a |> Np.Obj.to_pyobject)); ("score", Some(score |> (function
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
)))])
                       |> Py.Float.to_float
let planck ?loc ~lambda_ () =
   Py.Module.get_function_with_keywords __wrap_namespace "planck"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("lambda_", Some(lambda_ ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Planck_gen|`Rv_discrete|`Rv_generic] Np.Obj.t))
let pointbiserialr ~x ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "pointbiserialr"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x )); ("y", Some(y |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let poisson ?loc ~mu () =
   Py.Module.get_function_with_keywords __wrap_namespace "poisson"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("mu", Some(mu ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Poisson_gen|`Rv_discrete|`Rv_generic] Np.Obj.t))
                  let power_divergence ?f_exp ?ddof ?axis ?lambda_ ~f_obs () =
                     Py.Module.get_function_with_keywords __wrap_namespace "power_divergence"
                       [||]
                       (Wrap_utils.keyword_args [("f_exp", Wrap_utils.Option.map f_exp Np.Obj.to_pyobject); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("lambda_", Wrap_utils.Option.map lambda_ (function
| `S x -> Py.String.of_string x
| `F x -> Py.Float.of_float x
)); ("f_obs", Some(f_obs |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
let powerlaw ?loc ?scale ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "powerlaw"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Powerlaw_gen|`Rv_continuous|`Rv_generic] Np.Obj.t))
let powerlognorm ?loc ?scale ~c ~s () =
   Py.Module.get_function_with_keywords __wrap_namespace "powerlognorm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c )); ("s", Some(s ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Powerlognorm_gen|`Rv_continuous|`Rv_generic] Np.Obj.t))
let powernorm ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "powernorm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Powernorm_gen|`Rv_continuous|`Rv_generic] Np.Obj.t))
                  let ppcc_max ?brack ?dist ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ppcc_max"
                       [||]
                       (Wrap_utils.keyword_args [("brack", brack); ("dist", Wrap_utils.Option.map dist (function
| `Stats_distributions_instance x -> Wrap_utils.id x
| `S x -> Py.String.of_string x
)); ("x", Some(x |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
                  let ppcc_plot ?dist ?plot ?n ~x ~a ~b () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ppcc_plot"
                       [||]
                       (Wrap_utils.keyword_args [("dist", Wrap_utils.Option.map dist (function
| `Stats_distributions_instance x -> Wrap_utils.id x
| `S x -> Py.String.of_string x
)); ("plot", plot); ("N", Wrap_utils.Option.map n Py.Int.of_int); ("x", Some(x |> Np.Obj.to_pyobject)); ("a", Some(a )); ("b", Some(b ))])
                       |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1))))
                  let probplot ?sparams ?dist ?fit ?plot ?rvalue ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "probplot"
                       [||]
                       (Wrap_utils.keyword_args [("sparams", sparams); ("dist", Wrap_utils.Option.map dist (function
| `Stats_distributions_instance x -> Wrap_utils.id x
| `S x -> Py.String.of_string x
)); ("fit", Wrap_utils.Option.map fit Py.Bool.of_bool); ("plot", plot); ("rvalue", rvalue); ("x", Some(x |> Np.Obj.to_pyobject))])

let randint ?loc ~low ~high () =
   Py.Module.get_function_with_keywords __wrap_namespace "randint"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("low", Some(low )); ("high", Some(high ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Randint_gen|`Rv_discrete|`Rv_generic] Np.Obj.t))
                  let rankdata ?method_ ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "rankdata"
                       [||]
                       (Wrap_utils.keyword_args [("method", Wrap_utils.Option.map method_ (function
| `Average -> Py.String.of_string "average"
| `Min -> Py.String.of_string "min"
| `Max -> Py.String.of_string "max"
| `Dense -> Py.String.of_string "dense"
| `Ordinal -> Py.String.of_string "ordinal"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let ranksums ~x ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "ranksums"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x )); ("y", Some(y ))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let rayleigh ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "rayleigh"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rayleigh_gen|`Rv_continuous|`Rv_generic] Np.Obj.t))
let rdist ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "rdist"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rdist_gen|`Rv_continuous|`Rv_generic] Np.Obj.t))
let recipinvgauss ?loc ?scale ~mu () =
   Py.Module.get_function_with_keywords __wrap_namespace "recipinvgauss"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("mu", Some(mu ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Recipinvgauss_gen|`Rv_continuous|`Rv_generic] Np.Obj.t))
let reciprocal ?loc ?scale ~a ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "reciprocal"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Reciprocal_gen|`Rv_continuous|`Rv_generic] Np.Obj.t))
let relfreq ?numbins ?defaultreallimits ?weights ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "relfreq"
     [||]
     (Wrap_utils.keyword_args [("numbins", Wrap_utils.Option.map numbins Py.Int.of_int); ("defaultreallimits", defaultreallimits); ("weights", Wrap_utils.Option.map weights Np.Obj.to_pyobject); ("a", Some(a |> Np.Obj.to_pyobject))])
     |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1)), (Py.Float.to_float (Py.Tuple.get x 2)), (Py.Int.to_int (Py.Tuple.get x 3))))
let rice ?loc ?scale ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "rice"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rice_gen|`Rv_continuous|`Rv_generic] Np.Obj.t))
                  let rvs_ratio_uniforms ?size ?c ?random_state ~pdf ~umax ~vmin ~vmax () =
                     Py.Module.get_function_with_keywords __wrap_namespace "rvs_ratio_uniforms"
                       [||]
                       (Wrap_utils.keyword_args [("size", Wrap_utils.Option.map size (fun ml -> Py.Tuple.of_list_map Py.Int.of_int ml)); ("c", Wrap_utils.Option.map c Py.Float.of_float); ("random_state", Wrap_utils.Option.map random_state (function
| `I x -> Py.Int.of_int x
| `Np_random_RandomState_instance x -> Wrap_utils.id x
)); ("pdf", Some(pdf )); ("umax", Some(umax |> Py.Float.of_float)); ("vmin", Some(vmin |> Py.Float.of_float)); ("vmax", Some(vmax |> Py.Float.of_float))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let scoreatpercentile ?limit ?interpolation_method ?axis ~a ~per () =
                     Py.Module.get_function_with_keywords __wrap_namespace "scoreatpercentile"
                       [||]
                       (Wrap_utils.keyword_args [("limit", limit); ("interpolation_method", Wrap_utils.Option.map interpolation_method (function
| `Fraction -> Py.String.of_string "fraction"
| `Lower -> Py.String.of_string "lower"
| `Higher -> Py.String.of_string "higher"
)); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("a", Some(a |> Np.Obj.to_pyobject)); ("per", Some(per |> Np.Obj.to_pyobject))])

                  let sem ?axis ?ddof ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "sem"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])

let semicircular ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "semicircular"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Semicircular_gen] Np.Obj.t))
let shapiro x =
   Py.Module.get_function_with_keywords __wrap_namespace "shapiro"
     [||]
     (Wrap_utils.keyword_args [("x", Some(x |> Np.Obj.to_pyobject))])
     |> Py.Float.to_float
                  let siegelslopes ?x ?method_ ~y () =
                     Py.Module.get_function_with_keywords __wrap_namespace "siegelslopes"
                       [||]
                       (Wrap_utils.keyword_args [("x", Wrap_utils.Option.map x Np.Obj.to_pyobject); ("method", Wrap_utils.Option.map method_ (function
| `Hierarchical -> Py.String.of_string "hierarchical"
| `Separate -> Py.String.of_string "separate"
)); ("y", Some(y |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let sigmaclip ?low ?high ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "sigmaclip"
     [||]
     (Wrap_utils.keyword_args [("low", Wrap_utils.Option.map low Py.Float.of_float); ("high", Wrap_utils.Option.map high Py.Float.of_float); ("a", Some(a |> Np.Obj.to_pyobject))])
     |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1)), (Py.Float.to_float (Py.Tuple.get x 2))))
let skellam ?loc ~mu1 ~mu2 () =
   Py.Module.get_function_with_keywords __wrap_namespace "skellam"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("mu1", Some(mu1 )); ("mu2", Some(mu2 ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_discrete|`Rv_generic|`Skellam_gen] Np.Obj.t))
                  let skew ?axis ?bias ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "skew"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("bias", Wrap_utils.Option.map bias Py.Bool.of_bool); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let skewnorm ?loc ?scale ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "skewnorm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a ))])

                  let skewtest ?axis ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "skewtest"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let spearmanr ?b ?axis ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "spearmanr"
                       [||]
                       (Wrap_utils.keyword_args [("b", b); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a ))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let special_ortho_group ?dim ?seed () =
                     Py.Module.get_function_with_keywords __wrap_namespace "special_ortho_group"
                       [||]
                       (Wrap_utils.keyword_args [("dim", Wrap_utils.Option.map dim (function
| `Bool x -> Py.Bool.of_bool x
| `S x -> Py.String.of_string x
| `I x -> Py.Int.of_int x
| `F x -> Py.Float.of_float x
)); ("seed", seed)])

let t ?loc ?scale ~df () =
   Py.Module.get_function_with_keywords __wrap_namespace "t"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("df", Some(df ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`T_gen] Np.Obj.t))
let theilslopes ?x ?alpha ~y () =
   Py.Module.get_function_with_keywords __wrap_namespace "theilslopes"
     [||]
     (Wrap_utils.keyword_args [("x", Wrap_utils.Option.map x Np.Obj.to_pyobject); ("alpha", Wrap_utils.Option.map alpha Py.Float.of_float); ("y", Some(y |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1)), (Py.Float.to_float (Py.Tuple.get x 2)), (Py.Float.to_float (Py.Tuple.get x 3))))
let tiecorrect rankvals =
   Py.Module.get_function_with_keywords __wrap_namespace "tiecorrect"
     [||]
     (Wrap_utils.keyword_args [("rankvals", Some(rankvals |> Np.Obj.to_pyobject))])
     |> Py.Float.to_float
                  let tmax ?upperlimit ?axis ?inclusive ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "tmax"
                       [||]
                       (Wrap_utils.keyword_args [("upperlimit", Wrap_utils.Option.map upperlimit Py.Float.of_float); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("inclusive", Wrap_utils.Option.map inclusive Py.Bool.of_bool); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])

let tmean ?limits ?inclusive ?axis ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "tmean"
     [||]
     (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis Py.Int.of_int); ("a", Some(a |> Np.Obj.to_pyobject))])
     |> Py.Float.to_float
                  let tmin ?lowerlimit ?axis ?inclusive ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "tmin"
                       [||]
                       (Wrap_utils.keyword_args [("lowerlimit", Wrap_utils.Option.map lowerlimit Py.Float.of_float); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("inclusive", Wrap_utils.Option.map inclusive Py.Bool.of_bool); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])

let trapz ?loc ?scale ~c ~d () =
   Py.Module.get_function_with_keywords __wrap_namespace "trapz"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c )); ("d", Some(d ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Trapz_gen] Np.Obj.t))
let triang ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "triang"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Triang_gen] Np.Obj.t))
                  let trim1 ?tail ?axis ~a ~proportiontocut () =
                     Py.Module.get_function_with_keywords __wrap_namespace "trim1"
                       [||]
                       (Wrap_utils.keyword_args [("tail", Wrap_utils.Option.map tail (function
| `Left -> Py.String.of_string "left"
| `Right -> Py.String.of_string "right"
)); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject)); ("proportiontocut", Some(proportiontocut |> Py.Float.of_float))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let trim_mean ?axis ~a ~proportiontocut () =
                     Py.Module.get_function_with_keywords __wrap_namespace "trim_mean"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject)); ("proportiontocut", Some(proportiontocut |> Py.Float.of_float))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let trimboth ?axis ~a ~proportiontocut () =
                     Py.Module.get_function_with_keywords __wrap_namespace "trimboth"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("a", Some(a |> Np.Obj.to_pyobject)); ("proportiontocut", Some(proportiontocut |> Py.Float.of_float))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let truncexpon ?loc ?scale ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "truncexpon"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Truncexpon_gen] Np.Obj.t))
let truncnorm ?loc ?scale ~a ~b () =
   Py.Module.get_function_with_keywords __wrap_namespace "truncnorm"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("a", Some(a )); ("b", Some(b ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Truncnorm_gen] Np.Obj.t))
                  let tsem ?limits ?inclusive ?axis ?ddof ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "tsem"
                       [||]
                       (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
                  let tstd ?limits ?inclusive ?axis ?ddof ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "tstd"
                       [||]
                       (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
                  let ttest_1samp ?axis ?nan_policy ~a ~popmean () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ttest_1samp"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject)); ("popmean", Some(popmean |> (function
| `Ndarray x -> Np.Obj.to_pyobject x
| `F x -> Py.Float.of_float x
)))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
                  let ttest_ind ?axis ?equal_var ?nan_policy ~a ~b () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ttest_ind"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("equal_var", Wrap_utils.Option.map equal_var Py.Bool.of_bool); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a )); ("b", Some(b ))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
let ttest_ind_from_stats ?equal_var ~mean1 ~std1 ~nobs1 ~mean2 ~std2 ~nobs2 () =
   Py.Module.get_function_with_keywords __wrap_namespace "ttest_ind_from_stats"
     [||]
     (Wrap_utils.keyword_args [("equal_var", Wrap_utils.Option.map equal_var Py.Bool.of_bool); ("mean1", Some(mean1 |> Np.Obj.to_pyobject)); ("std1", Some(std1 |> Np.Obj.to_pyobject)); ("nobs1", Some(nobs1 |> Np.Obj.to_pyobject)); ("mean2", Some(mean2 |> Np.Obj.to_pyobject)); ("std2", Some(std2 |> Np.Obj.to_pyobject)); ("nobs2", Some(nobs2 |> Np.Obj.to_pyobject))])
     |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
                  let ttest_rel ?axis ?nan_policy ~a ~b () =
                     Py.Module.get_function_with_keywords __wrap_namespace "ttest_rel"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a )); ("b", Some(b ))])
                       |> (fun x -> ((Wrap_utils.id (Py.Tuple.get x 0)), (Wrap_utils.id (Py.Tuple.get x 1))))
let tukeylambda ?loc ?scale ~lam () =
   Py.Module.get_function_with_keywords __wrap_namespace "tukeylambda"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("lam", Some(lam ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Tukeylambda_gen] Np.Obj.t))
                  let tvar ?limits ?inclusive ?axis ?ddof ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "tvar"
                       [||]
                       (Wrap_utils.keyword_args [("limits", limits); ("inclusive", inclusive); ("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
let uniform ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "uniform"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Uniform_gen] Np.Obj.t))
                  let variation ?axis ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "variation"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
let vonmises ?loc ?scale ~kappa () =
   Py.Module.get_function_with_keywords __wrap_namespace "vonmises"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("kappa", Some(kappa ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Vonmises_gen] Np.Obj.t))
let vonmises_line ?loc ?scale ~kappa () =
   Py.Module.get_function_with_keywords __wrap_namespace "vonmises_line"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("kappa", Some(kappa ))])

let wald ?loc ?scale () =
   Py.Module.get_function_with_keywords __wrap_namespace "wald"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float)])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Wald_gen] Np.Obj.t))
let wasserstein_distance ?u_weights ?v_weights ~u_values ~v_values () =
   Py.Module.get_function_with_keywords __wrap_namespace "wasserstein_distance"
     [||]
     (Wrap_utils.keyword_args [("u_weights", u_weights); ("v_weights", v_weights); ("u_values", Some(u_values )); ("v_values", Some(v_values ))])
     |> Py.Float.to_float
let weibull_max ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "weibull_max"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Weibull_max_gen] Np.Obj.t))
let weibull_min ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "weibull_min"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Weibull_min_gen] Np.Obj.t))
                  let weightedtau ?rank ?weigher ?additive ~x ~y () =
                     Py.Module.get_function_with_keywords __wrap_namespace "weightedtau"
                       [||]
                       (Wrap_utils.keyword_args [("rank", Wrap_utils.Option.map rank (function
| `Bool x -> Py.Bool.of_bool x
| `Array_like_of_ints x -> Wrap_utils.id x
)); ("weigher", weigher); ("additive", Wrap_utils.Option.map additive Py.Bool.of_bool); ("x", Some(x )); ("y", Some(y ))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let wilcoxon ?y ?zero_method ?correction ?alternative ~x () =
                     Py.Module.get_function_with_keywords __wrap_namespace "wilcoxon"
                       [||]
                       (Wrap_utils.keyword_args [("y", Wrap_utils.Option.map y Np.Obj.to_pyobject); ("zero_method", Wrap_utils.Option.map zero_method (function
| `Pratt -> Py.String.of_string "pratt"
| `Wilcox -> Py.String.of_string "wilcox"
| `Zsplit -> Py.String.of_string "zsplit"
)); ("correction", Wrap_utils.Option.map correction Py.Bool.of_bool); ("alternative", Wrap_utils.Option.map alternative (function
| `Two_sided -> Py.String.of_string "two-sided"
| `Greater -> Py.String.of_string "greater"
| `Less -> Py.String.of_string "less"
)); ("x", Some(x |> Np.Obj.to_pyobject))])
                       |> (fun x -> ((Py.Float.to_float (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
let wishart ?df ?scale ?seed () =
   Py.Module.get_function_with_keywords __wrap_namespace "wishart"
     [||]
     (Wrap_utils.keyword_args [("df", Wrap_utils.Option.map df Py.Int.of_int); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("seed", seed)])

let wrapcauchy ?loc ?scale ~c () =
   Py.Module.get_function_with_keywords __wrap_namespace "wrapcauchy"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("scale", Wrap_utils.Option.map scale Py.Float.of_float); ("c", Some(c ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_continuous|`Rv_generic|`Wrapcauchy_gen] Np.Obj.t))
let yeojohnson ?lmbda ~x () =
   Py.Module.get_function_with_keywords __wrap_namespace "yeojohnson"
     [||]
     (Wrap_utils.keyword_args [("lmbda", Wrap_utils.Option.map lmbda Py.Float.of_float); ("x", Some(x |> Np.Obj.to_pyobject))])
     |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), (Py.Float.to_float (Py.Tuple.get x 1))))
                  let yeojohnson_llf ~lmb ~data () =
                     Py.Module.get_function_with_keywords __wrap_namespace "yeojohnson_llf"
                       [||]
                       (Wrap_utils.keyword_args [("lmb", Some(lmb |> (function
| `F x -> Py.Float.of_float x
| `I x -> Py.Int.of_int x
| `Bool x -> Py.Bool.of_bool x
| `S x -> Py.String.of_string x
))); ("data", Some(data |> Np.Obj.to_pyobject))])
                       |> Py.Float.to_float
let yeojohnson_normmax ?brack ~x () =
   Py.Module.get_function_with_keywords __wrap_namespace "yeojohnson_normmax"
     [||]
     (Wrap_utils.keyword_args [("brack", brack); ("x", Some(x |> Np.Obj.to_pyobject))])
     |> Py.Float.to_float
let yeojohnson_normplot ?plot ?n ~x ~la ~lb () =
   Py.Module.get_function_with_keywords __wrap_namespace "yeojohnson_normplot"
     [||]
     (Wrap_utils.keyword_args [("plot", plot); ("N", Wrap_utils.Option.map n Py.Int.of_int); ("x", Some(x |> Np.Obj.to_pyobject)); ("la", Some(la )); ("lb", Some(lb ))])
     |> (fun x -> (((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 0)), ((fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t)) (Py.Tuple.get x 1))))
let yulesimon ?loc ~alpha () =
   Py.Module.get_function_with_keywords __wrap_namespace "yulesimon"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("alpha", Some(alpha ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_discrete|`Rv_generic|`Yulesimon_gen] Np.Obj.t))
let zipf ?loc ~a () =
   Py.Module.get_function_with_keywords __wrap_namespace "zipf"
     [||]
     (Wrap_utils.keyword_args [("loc", Wrap_utils.Option.map loc Py.Float.of_float); ("a", Some(a ))])
     |> (fun py -> (Np.Obj.of_pyobject py : [`Object|`Rv_discrete|`Rv_generic|`Zipf_gen] Np.Obj.t))
                  let zmap ?axis ?ddof ~scores ~compare () =
                     Py.Module.get_function_with_keywords __wrap_namespace "zmap"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("scores", Some(scores |> Np.Obj.to_pyobject)); ("compare", Some(compare |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
                  let zscore ?axis ?ddof ?nan_policy ~a () =
                     Py.Module.get_function_with_keywords __wrap_namespace "zscore"
                       [||]
                       (Wrap_utils.keyword_args [("axis", Wrap_utils.Option.map axis (function
| `I x -> Py.Int.of_int x
| `None -> Py.none
)); ("ddof", Wrap_utils.Option.map ddof Py.Int.of_int); ("nan_policy", Wrap_utils.Option.map nan_policy (function
| `Propagate -> Py.String.of_string "propagate"
| `Raise -> Py.String.of_string "raise"
| `Omit -> Py.String.of_string "omit"
)); ("a", Some(a |> Np.Obj.to_pyobject))])
                       |> (fun py -> (Np.Obj.of_pyobject py : [`ArrayLike|`Ndarray|`Object] Np.Obj.t))
